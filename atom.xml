<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>王志超的博客</title>
  
  <subtitle>今天你更博学了吗</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://wangzc.wang/"/>
  <updated>2020-04-16T16:39:56.508Z</updated>
  <id>http://wangzc.wang/</id>
  
  <author>
    <name>王志超</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>svn实现钉钉代码提交通知</title>
    <link href="http://wangzc.wang/2020/04/15/svnDingTalk/"/>
    <id>http://wangzc.wang/2020/04/15/svnDingTalk/</id>
    <published>2020-04-15T09:05:02.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><p>svn其实也和github一样有自己的钩子，我们先看下效果</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/LvGpOP59%20.png"  alt=""></p><h3 id="钉钉机器人配置（webhook生成）"><a href="#钉钉机器人配置（webhook生成）" class="headerlink" title="钉钉机器人配置（webhook生成）"></a>钉钉机器人配置（webhook生成）</h3><blockquote><p>设置=&gt;添加机器人</p></blockquote><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/nZFDbj40%20.png"  alt=""></p><blockquote><p>添加自定义机器人，这里的关键词添加<code>#</code>即可</p></blockquote><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/J4KTp031%20.png"  alt=""></p><p>复制webhook</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/Dj1ANe58%20.png"  alt=""></p><h3 id="svn设置"><a href="#svn设置" class="headerlink" title="svn设置"></a>svn设置</h3><p>我们进入到svn的服务器代码目录，会看到有个hooks的文件夹</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/vHYxvF27%20.png"  alt=""></p><p>目前svn提供了5个hooks，今天我们只介绍<code>post-commit</code><a href="https://www.kancloud.cn/i281151/svn/197125" target="_blank" rel="noopener">参考</a></p><p>它在事务完成后运行，创建一个新的修订版本。大多数人用这个钩子来发送关于提交的描述性电子邮件，或者作为版本库的备份。版本库传给程序两个参数：到版本库的路径和被创建的新的修订版本号。退出程序会被忽略。</p><p>接下来我们进入hooks文件夹，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim post-commit</span><br></pre></td></tr></table></figure><p>如果没有会自动新建此文件</p><p>键入代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;bin&#x2F;bash</span><br><span class="line"># svn中变量1为仓库路径，2为提交版本号</span><br><span class="line"></span><br><span class="line">REPOS&#x3D;&quot;$1&quot;</span><br><span class="line">REV&#x3D;&quot;$2&quot;</span><br><span class="line"></span><br><span class="line"># 设置默认字符集，否则post信息到钉钉时中文乱码</span><br><span class="line">export LANG&#x3D;en_US.UTF-8</span><br><span class="line"></span><br><span class="line"># 下方svnlook命令获取相应的结果</span><br><span class="line">time&#x3D;$(date +%F&#x2F;%T)</span><br><span class="line">AUTHOR&#x3D;$(&#x2F;bin&#x2F;svnlook author -r $&#123;REV&#125; $&#123;REPOS&#125;)</span><br><span class="line">CHANGEDDIRS&#x3D;$(&#x2F;bin&#x2F;svnlook dirs-changed $REPOS)</span><br><span class="line">MESSAGE&#x3D;$(&#x2F;bin&#x2F;svnlook log -r $REV $REPOS)</span><br><span class="line"></span><br><span class="line">CONTENT&#x3D;提交时间：$&#123;time&#125;\\n提交版本：#$&#123;REV&#125;\\n提交者：$&#123;AUTHOR&#125;\\n提交备注：$&#123;MESSAGE&#125;\\n修改目录：$CHANGEDDIRS</span><br><span class="line">curl &#39;https:&#x2F;&#x2F;oapi.dingtalk.com&#x2F;robot&#x2F;send?access_token&#x3D;这里输入你的webhooks的token&#39; \</span><br><span class="line">   -H &#39;Content-Type: application&#x2F;json&#39; \</span><br><span class="line">   -d &#39;&#123;&quot;msgtype&quot;: &quot;text&quot;,</span><br><span class="line">        &quot;text&quot;: &#123;</span><br><span class="line">             &quot;content&quot;:&quot;&#39;$CONTENT&#39;&quot;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;&#39;</span><br></pre></td></tr></table></figure><blockquote><p>我说一下之前钉钉webhoos生成时候安全设置的<code>#</code>号和上述代码中提交版本后的<code>#</code>对应了起来</p></blockquote><p>最后测试效果就是文字开始的图片！每次提交代码都会触发postcommit hook自动推送信息到钉钉</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欢迎加入前端交流群：&lt;a href=&quot;//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501&quot; target=&quot;_blank&quot; rel=
      
    
    </summary>
    
    
      <category term="前端自动化" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="jenkins" scheme="http://wangzc.wang/tags/jenkins/"/>
    
      <category term="svn" scheme="http://wangzc.wang/tags/svn/"/>
    
  </entry>
  
  <entry>
    <title>使用jenkins自动构建github项目</title>
    <link href="http://wangzc.wang/2020/04/10/github-jenkins/"/>
    <id>http://wangzc.wang/2020/04/10/github-jenkins/</id>
    <published>2020-04-10T09:25:53.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/6EZtuT00%20.png"  alt=""><br>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h2 id="jenkins介绍"><a href="#jenkins介绍" class="headerlink" title="jenkins介绍"></a><a href="https://jenkins.io/zh/" target="_blank" rel="noopener">jenkins介绍</a></h2><p>构建伟大，无所不能</p><p>Jenkins是开源CI&amp;CD软件领导者， 提供超过1000个插件来支持构建、部署、自动化， 满足任何项目的需要。</p><ul><li>作为一个可扩展的自动化服务器，Jenkins 可以用作简单的 CI 服务器，或者变成任何项目的持续交付中心。</li><li>Jenkins 是一个基于 Java 的独立程序，可以立即运行，包含 Windows、Mac OS X 和其他类 Unix 操作系统。</li><li>Jenkins 可以通过其网页界面轻松设置和配置，其中包括即时错误检查和内置帮助。</li><li>通过更新中心中的 1000 多个插件，Jenkins 集成了持续集成和持续交付工具链中几乎所有的工具。</li><li>Jenkins 可以通过其插件架构进行扩展，从而为 Jenkins 可以做的事提供几乎无限的可能性。</li><li>Jenkins 可以轻松地在多台机器上分配工作，帮助更快速地跨多个平台推动构建、测试和部署。</li></ul><h2 id="安装jenkins"><a href="#安装jenkins" class="headerlink" title="安装jenkins"></a>安装jenkins</h2><p>jenkins的安装请移步<a href="/2020/03/13/jenkins-i-linux/" title="在linux服务器上安装Jenkins">在linux服务器上安装Jenkins</a></p><h2 id="新建github项目"><a href="#新建github项目" class="headerlink" title="新建github项目"></a>新建github项目</h2><p>我们新建一个名为jenkins的git仓库，代码我这里选择了用<a href="https://cli.vuejs.org/" target="_blank" rel="noopener">vue-cli</a>简易生成了一个示例demo<br><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/ByAMEO42%20.png"  alt=""></p><h2 id="github配置"><a href="#github配置" class="headerlink" title="github配置"></a>github配置</h2><h3 id="sercret-text"><a href="#sercret-text" class="headerlink" title="sercret text"></a>sercret text</h3><p>注：此处需要一个对项目有写权限的账户</p><blockquote><p>进入github –&gt; setting –&gt; Personal Access Token –&gt; Generate new token<br><a href="https://github.com/settings/tokens/new" target="_blank" rel="noopener">或者点击进入</a></p></blockquote><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/IYOV3G06%20.png"  alt="img"></p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/xUqndM35%20.png"  alt="img"></p><p>自己先保存此<code>token</code>，如果丢失，之后再也无法找到这个<code>token</code>。</p><h3 id="GitHub-webhooks-设置"><a href="#GitHub-webhooks-设置" class="headerlink" title="GitHub webhooks 设置"></a>GitHub webhooks 设置</h3><blockquote><p>进入刚才新建的jenkins仓库 –&gt; setting –&gt; WebHooks&amp;Services –&gt; add webhook –&gt; 输入刚刚部署jenkins的服务器的IP</p></blockquote><p>jenkins地址后加上<code>/github-webhook/</code></p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/QqqJoy08%20.png"  alt="img"></p><h2 id="jenkins的github配置"><a href="#jenkins的github配置" class="headerlink" title="jenkins的github配置"></a>jenkins的github配置</h2><h3 id="安装GitHub-Plugin"><a href="#安装GitHub-Plugin" class="headerlink" title="安装GitHub Plugin"></a>安装GitHub Plugin</h3><blockquote><p>系统管理–&gt;插件管理–&gt;可选插件</p></blockquote><p>直接安装Github Plugin, jenkins会自动帮你解决其他插件的依赖，直接安装该插件Jenkins会自动帮你安装plain-credentials 、<a href="http://lib.csdn.net/base/git" target="_blank" rel="noopener">Git</a> 、 credentials 、 github-api</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/436630-ff8c8744ed7ade0d15%20.png"  alt="img"></p><h3 id="配置GitHub-Plugin"><a href="#配置GitHub-Plugin" class="headerlink" title="配置GitHub Plugin"></a>配置GitHub Plugin</h3><blockquote><p>系统管理 –&gt; 系统设置 –&gt; GitHub –&gt; Add GitHub Sever</p></blockquote><p>如下图所示</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/rzzEY431%20.png"  alt="img"></p><p>API URL 输入 <code>https://api.github.com</code>，Credentials点击Add添加，Kind选择Secret Text,具体如下图所示。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/5srXs406%20.png"  alt="img"></p><p>Secret添加刚才生成的token，id和描述随便填写</p><p>设置完成后，点击<code>TestConnection</code>,提示<code>Credentials verified for user UUserName, rate limit: xxx</code>,则表明有效。<br> <img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/diNJuO28%20.png"  alt=""></p><h3 id="创建一个freestyle任务"><a href="#创建一个freestyle任务" class="headerlink" title="创建一个freestyle任务"></a>创建一个freestyle任务</h3><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/uMDxQj41%20.png"  alt=""><br>- General 设置<br>填写GitHub project URL, 也就是你的项目主页<br>eg. <code>https://github.com/your_name/your_repo_name</code></p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/amghlB38%20.png"  alt="img"></p><p>- 配置源码管理</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/ycegOY59%20.png"  alt="img"></p><ol><li>填写项目的git地址, eg. <code>https://github.com/your_name/your_repo_name.git</code></li><li>添加github用户和密码</li><li>选择githubweb源码库浏览器，并填上你的项目URL，这样每次构建都会生成对应的changes，可直接链到github上看变更详情</li></ol><p>- 构建触发器，构建环境</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/OaN2fB22%20.png"  alt="img"></p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/FYgxXC09%20.png"  alt="img"></p><blockquote><p>这里如果没有node，就需要安装下node<br>因为Jenkins容器中只有java环境支持运行jenkins，没有node环境，但是jenkins提供在线安装nodejs。<a href="https://plugins.jenkins.io/nodejs" target="_blank" rel="noopener">官方文档</a></p></blockquote><ul><li>下载nodejs插件并配置</li><li>系统管理—&gt;管理插件—&gt;下载NodeJS插件</li><li>下载的插件在：$JENKINS_HOME/plugins目录下</li><li>系统管理—&gt;Global Tool Configuration—&gt;选择需要安装的nodejs版本</li><li>会从nodejs官网下载安装，nodejs安装包在：$JENKINS_HOME/tools目录下</li></ul><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/3611157-f781ebbe880aa77203%20.png"  alt=""></p><p>- 构建</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/0kqlIQ16%20.png"  alt=""></p><p>- 构建后操作</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/3Cz30U13%20.png"  alt="img"></p><p>最后点击保存即可</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>上传代码<br>查看jenkins<br><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/MrUocw40%20.png"  alt=""><br>这样就成功了，每次提交代码到master就会进行自动构建测试代码有没有问题</p><p>下一篇我们介绍如何添加钉钉机器人提示提交信息</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/&quot; class=&quot;lazyload&quot; data-src=&quot;https://gitee.com/Wzhichao/img/raw/master/uPic/6EZtuT00%20.png&quot;  alt=&quot;&quot;&gt;&lt;br&gt;欢迎加入前端交流群：&lt;a href=&quot;//
      
    
    </summary>
    
    
      <category term="前端自动化" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="jenkins" scheme="http://wangzc.wang/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>github clone加速脚本 GitHub 国内加速下载</title>
    <link href="http://wangzc.wang/2020/04/02/githun-speed/"/>
    <id>http://wangzc.wang/2020/04/02/githun-speed/</id>
    <published>2020-04-02T11:10:36.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p>GitHub 我们都知道是世界上最大的开源及私有软件项目的托管平台，全世界每天有海量优秀的开源软件在这里产生，而 GitHub 在国内很多时候获取到的下载链接是亚马逊的服务器。</p><p>中国因为不可言说的原因，经常抽疯或龟速。想要加快 GitHub 下载速度就需要用到 GitHub 国内加速服务。</p><p>完美解决github项目下载、clone慢的问题</p><a id="more"></a><h3 id="1-Github-加速下载-适合下载包"><a href="#1-Github-加速下载-适合下载包" class="headerlink" title="1.Github 加速下载(适合下载包)"></a>1.Github 加速下载(适合下载包)</h3><p>只需要复制当前 GitHub 地址粘贴到输入框中就可以加速下载！</p><p><a href="https://www.toolnb.com/tools/githubjiasu.html" target="_blank" rel="noopener">https://www.toolnb.com/tools/githubjiasu.html</a></p><h3 id="2-GitHub-加速脚本-强力推荐👍"><a href="#2-GitHub-加速脚本-强力推荐👍" class="headerlink" title="2.GitHub 加速脚本(强力推荐👍)"></a>2.GitHub 加速脚本(强力推荐👍)</h3><p>2.1首先需要下载谷歌插件才能运行脚本：<a href="https://545c.com/file/13811899-415771322" target="_blank" rel="noopener">插件地址</a><br>2.2脚本js下载：<a href="https://greasyfork.org/zh-CN/scripts/398278-github-%E9%95%9C%E5%83%8F%E8%AE%BF%E9%97%AE-%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD" target="_blank" rel="noopener">脚本js地址</a><br>如果以上地址打不开请移步百度云 链接: <a href="https://pan.baidu.com/s/1vKe0BsrUX2g4R5VlBjtLlA" target="_blank" rel="noopener">https://pan.baidu.com/s/1vKe0BsrUX2g4R5VlBjtLlA</a>  密码: 6hbo</p><p>我们先安装谷歌插件，然后打开插件<img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/njaX5C15%20.jpg"  alt=""><br>点击+号添加脚本，复制js文件里内容保存关闭即可<br><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/so4fPH04%20.jpg"  alt=""><br>然后打开github项目你就会看到如下界面，就可以愉快的克隆了<br><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/ZbRDos23%20.jpg"  alt=""></p><p>对比下克隆速度：</p><h3 id="加速前："><a href="#加速前：" class="headerlink" title="加速前："></a>加速前：</h3><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/6XroC236%20.jpg"  alt=""></p><h3 id="加速后："><a href="#加速后：" class="headerlink" title="加速后："></a>加速后：</h3><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/tPM0IH46%20.jpg"  alt=""><br>简直是质的飞跃，妈妈再也不用担心我clone了</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;GitHub 我们都知道是世界上最大的开源及私有软件项目的托管平台，全世界每天有海量优秀的开源软件在这里产生，而 GitHub 在国内很多时候获取到的下载链接是亚马逊的服务器。&lt;/p&gt;
&lt;p&gt;中国因为不可言说的原因，经常抽疯或龟速。想要加快 GitHub 下载速度就需要用到 GitHub 国内加速服务。&lt;/p&gt;
&lt;p&gt;完美解决github项目下载、clone慢的问题&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="github" scheme="http://wangzc.wang/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>在linux服务器上安装Jenkins</title>
    <link href="http://wangzc.wang/2020/03/13/jenkins-i-linux/"/>
    <id>http://wangzc.wang/2020/03/13/jenkins-i-linux/</id>
    <published>2020-03-13T15:45:30.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins是用java编写的开源持续集成工具，目前被国内外各公司广泛使用。本章教大家如何在linux服务器上安装Jenkins。</p><h3 id="获得一台linux服务器"><a href="#获得一台linux服务器" class="headerlink" title="获得一台linux服务器"></a>获得一台linux服务器</h3><p>要在linux下安装git，首先你得先有一台linux服务器，这里我选择了腾讯云<br><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/DJRKTi06%20.png"  alt=""></p><h3 id="安装jdk"><a href="#安装jdk" class="headerlink" title="安装jdk"></a>安装jdk</h3><p>Jenkins的运行需要依赖jdk，所以在安装Jenkins之前我们得先把jdk装上。没有安装经验的同学可以参考我的另一篇在linux服务器上安装jdk的教程。传送门：<a href="/2019/12/10/linux-i-jdk/" title="在linux服务器上安装jdk">在linux服务器上安装jdk</a></p><h3 id="yum安装Jenkins"><a href="#yum安装Jenkins" class="headerlink" title="yum安装Jenkins"></a>yum安装Jenkins</h3><p>这里推荐使用yum方式安装Jenkins，最简单方便。</p><p>yum的repos中默认是没有Jenkins的，需要先将Jenkins存储库添加到yum repos。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo wget -O &#x2F;etc&#x2F;yum.repos.d&#x2F;jenkins.repo https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat-stable&#x2F;jenkins.repo</span><br><span class="line">sudo rpm --import https:&#x2F;&#x2F;pkg.jenkins.io&#x2F;redhat-stable&#x2F;jenkins.io.key</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/HV40p625%20.jpg"  alt=""></p><p>yum安装Jenkins</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install jenkins</span><br></pre></td></tr></table></figure><p>随后就可以看到系统开始自动下载安装。<br>出现提示是否下载的时候输入y并按回车。<br>耐心等待安装完成。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/UhLrYS49%20.jpg"  alt=""></p><p>现在Jenkins已经安装好了，不过启动之前最好稍微修改一下配置。默认情况是Jenkins是使用Jenkins用户启动的，但这个用户目前系统并没有赋予权限，这里我们将启动用户修改为root；另外Jenkins默认端口是8080，这个跟tomcat的默认端口冲突，我们也修改一下默认端口。<br>输入命令进入Jenkins配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi &#x2F;etc&#x2F;sysconfig&#x2F;jenkins</span><br></pre></td></tr></table></figure><p>在配置文件中很容易找到</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/V9l1sV30%20.jpg"  alt=""></p><p>此处修改配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">JENKINS_USER&#x3D;&quot;root&quot;</span><br><span class="line">JENKINS_PORT&#x3D;&quot;8082&quot;</span><br></pre></td></tr></table></figure><p>修改完配置后，保存退出。<br>好了，现在配置文件也修改好了，可以启动Jenkins了。<br>输入启动命令以启动Jenkins服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service jenkins start</span><br></pre></td></tr></table></figure><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/onfXOM25%20.jpg"  alt=""></p><p>出现OK表示Jenkins启动成功。<br>在浏览器输入ip:8081进入Jenkins登录页面。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/IGjyP848%20.jpg"  alt=""></p><p>Jenkins首次登录<br>进入登录页面后，Jenkins提示我们需要输入超级管理员密码进行解锁。根据提示，我们可以在/var/lib/jenkins/secrets/initialAdminPassword文件里找到密码。</p><p>输入命令以找到密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail &#x2F;var&#x2F;lib&#x2F;jenkins&#x2F;secrets&#x2F;initialAdminPassword</span><br></pre></td></tr></table></figure><p>找到解锁密码<br>找到密码后，复制密码，粘贴到Jenkins解锁页面，点击Continue继续初始化配置。短暂的等待后，进入插件安装页面。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/YOCsj337%20.jpg"  alt=""></p><p>Jenkins插件安装<br>这里我们点击的Install suggested plugins，安装默认插件，当然你也可以点击另一个按钮安装指定的插件。</p><p>点击后，页面进入了插件下载安装页面。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/VJppCr49%20.jpg"  alt=""></p><p>默认插件安装<br>耐心等待全部安装完成。安装完成后，页面自动进入了管理员账户注册页面。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/n9GCRN21%20.jpg"  alt=""></p><p>管理员账户注册<br>这个页面大家肯定都不陌生，自己输入信息注册吧。输入完信息点击Save and Finish。</p><p>Jenkins安装完成<br>点击Start using Jenkins，进入Jenkins主页面。</p><p>Jenkins<br>至此，Jenkins安装并初始化完成了，<br><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/pftEC404%20.jpg"  alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Jenkins是用java编写的开源持续集成工具，目前被国内外各公司广泛使用。本章教大家如何在linux服务器上安装Jenkins。&lt;/p&gt;
&lt;h3 id=&quot;获得一台linux服务器&quot;&gt;&lt;a href=&quot;#获得一台linux服务器&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
    
      <category term="前端自动化" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="jenkins" scheme="http://wangzc.wang/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>Angular动画</title>
    <link href="http://wangzc.wang/2020/01/16/angularAnimation/"/>
    <id>http://wangzc.wang/2020/01/16/angularAnimation/</id>
    <published>2020-01-16T11:01:54.000Z</published>
    <updated>2020-04-16T16:39:56.500Z</updated>
    
    <content type="html"><![CDATA[<p class="note note-primary">原生实现</p><p>如果不使用框架的话我们在浏览器中使用动画无非2种</p><ul><li>css实现</li><li>js实现</li></ul><h4 id="css实现"><a href="#css实现" class="headerlink" title="css实现"></a>css实现</h4><p>我们可以使用基于css3的一个动画库，<a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">Animate.css</a><br>这样可以实现动画，但是不太好控制它的行为</p><a id="more"></a><h4 id="javascript实现"><a href="#javascript实现" class="headerlink" title="javascript实现"></a>javascript实现</h4><p>如果为了实现更复杂的动画，更好的控制，我们可以使用js来实现动画<br>比如使用</p><ul><li><a href="http://jquery.cuishifeng.cn/show.html" target="_blank" rel="noopener">jquery</a></li><li><a href="https://www.npmjs.com/package/gsap" target="_blank" rel="noopener">GSAP</a></li><li><a href="https://zeptojs.com/" target="_blank" rel="noopener">Zepto</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Animations_API" target="_blank" rel="noopener">Web Animations Api</a></li></ul><p class="note note-primary">Angular中使用</p><p><a href="https://angular.io/guide/animations" target="_blank" rel="noopener">官方文档</a></p><p>典型的动画会涉及多种随时间变化的转换。HTML 元素可以移动、变换颜色、增加或缩小、隐藏或从页面中滑出。 这些变化可以同时发生或顺序发生。你可以控制每次转换的持续时间。</p><p>Angular 的动画系统是基于 CSS 功能构建的，这意味着你可以 “动” 浏览器认为可动的任何属性。包括位置、大小、变形、颜色、边框等。W3C 在它的 <a href="https://www.w3.org/TR/css-transitions-1/" target="_blank" rel="noopener">CSS Transitions</a> 页中维护了一个可动属性的列表。</p><p>angular动画大体分为四部分</p><ul><li>trigger()</li><li>transition()</li><li>state()</li><li>animate()</li></ul><h4 id="trigger"><a href="#trigger" class="headerlink" title="trigger"></a>trigger</h4><p>创建一个有名字的动画触发器，包含一个 state() 和 transition() 的列表，当此触发器的绑定表达式发生变化时，它们就会重新求值。</p><h4 id="state"><a href="#state" class="headerlink" title="state"></a>state</h4><p>在附加到元素的触发器上，声明一个动画状态。<br>默认状态为<code>void</code>,简称无状态</p><h4 id="transition"><a href="#transition" class="headerlink" title="transition"></a>transition</h4><p>声明一个转场动画，以便在满足给定条件时运行一系列动画步骤。该条件是一个逻辑型表达式或一个函数， 该函数比较以前和现在的动画状态，如果应该开始转场则返回 true。 当满足所定义的转场动画的状态标准时，就会开始执行相关的动画。</p><h4 id="animate"><a href="#animate" class="headerlink" title="animate"></a>animate</h4><p>定义一个动画步骤，它把一些样式信息和时序信息组合在一起。</p><p><a href="https://stackblitz.com/edit/angulartransition" target="_blank" rel="noopener">示例demo</a><br>app.component.ts</p><!-- tab app.component.ts --><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">@Component(&#123;</span><br><span class="line">  selector: <span class="string">'app-app'</span>,</span><br><span class="line">  animations: [</span><br><span class="line">    trigger(<span class="string">'openClose'</span>, [</span><br><span class="line">      <span class="comment">// ...</span></span><br><span class="line">      state(<span class="string">'open'</span>, style(&#123;</span><br><span class="line">        height: <span class="string">'200px'</span>,</span><br><span class="line">        opacity: <span class="number">1</span>,</span><br><span class="line">        backgroundColor: <span class="string">'yellow'</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      state(<span class="string">'closed'</span>, style(&#123;</span><br><span class="line">        height: <span class="string">'100px'</span>,</span><br><span class="line">        opacity: <span class="number">0.5</span>,</span><br><span class="line">        backgroundColor: <span class="string">'green'</span></span><br><span class="line">      &#125;)),</span><br><span class="line">      transition(<span class="string">'open =&gt; closed'</span>, [</span><br><span class="line">        animate(<span class="string">'1s'</span>)</span><br><span class="line">      ]),</span><br><span class="line">      transition(<span class="string">'closed =&gt; open'</span>, [</span><br><span class="line">        animate(<span class="string">'0.5s'</span>)</span><br><span class="line">      ]),</span><br><span class="line">    ]),</span><br><span class="line">  ],</span><br><span class="line">  templateUrl: <span class="string">'app.component.html'</span>,</span><br><span class="line">  styleUrls: [<span class="string">'app.component.css'</span>]</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">OpenCloseComponent</span> </span>&#123;</span><br><span class="line">  isOpen = <span class="literal">true</span>;</span><br><span class="line"> </span><br><span class="line">  toggle() &#123;</span><br><span class="line">    <span class="keyword">this</span>.isOpen = !<span class="keyword">this</span>.isOpen;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- endtab --><!-- tab app.component.html --><p>app.component.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> [@<span class="attr">openClose</span>]=<span class="string">"isOpen ? 'open' : 'closed'"</span> <span class="attr">class</span>=<span class="string">"open-close-container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>The box is now &#123;&#123; isOpen ? 'Open' : 'Closed' &#125;&#125;!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><!-- endtab --><!-- tab app.component.css --><p>app.component.css</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:host</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.open-close-container</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#dddddd</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">1em</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">20px</span> <span class="number">20px</span> <span class="number">0px</span> <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000000</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: bold;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><!-- endtab -->]]></content>
    
    <summary type="html">
    
      &lt;p class=&quot;note note-primary&quot;&gt;原生实现&lt;/p&gt;

&lt;p&gt;如果不使用框架的话我们在浏览器中使用动画无非2种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;css实现&lt;/li&gt;
&lt;li&gt;js实现&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;css实现&quot;&gt;&lt;a href=&quot;#css实现&quot; class=&quot;headerlink&quot; title=&quot;css实现&quot;&gt;&lt;/a&gt;css实现&lt;/h4&gt;&lt;p&gt;我们可以使用基于css3的一个动画库，&lt;a href=&quot;https://daneden.github.io/animate.css/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Animate.css&lt;/a&gt;&lt;br&gt;这样可以实现动画，但是不太好控制它的行为&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>git常用指令</title>
    <link href="http://wangzc.wang/2020/01/13/gitConsole/"/>
    <id>http://wangzc.wang/2020/01/13/gitConsole/</id>
    <published>2020-01-13T17:37:34.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Git常用命令清单"><a href="#Git常用命令清单" class="headerlink" title="Git常用命令清单"></a>Git常用命令清单</h3><p>git常用命令合集</p><a id="more"></a><h4 id="增加-删除文件"><a href="#增加-删除文件" class="headerlink" title="增加/删除文件"></a>增加/删除文件</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 添加指定文件到暂存区</span><br><span class="line">$ git add [file1] [file2] ...</span><br><span class="line"></span><br><span class="line"># 添加指定目录到暂存区，包括子目录</span><br><span class="line">$ git add [dir]</span><br><span class="line"></span><br><span class="line"># 添加当前目录的所有文件到暂存区</span><br><span class="line">$ git add .</span><br><span class="line"></span><br><span class="line"># 改名文件，并且将这个改名放入暂存区</span><br><span class="line">$ git mv [file-original] [file-renamed]</span><br></pre></td></tr></table></figure><h4 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># 提交暂存区到仓库区</span><br><span class="line">$ git commit -m [message]</span><br><span class="line"></span><br><span class="line"># 提交暂存区的指定文件到仓库区</span><br><span class="line">$ git commit [file1] [file2] ... -m [message]</span><br><span class="line"></span><br><span class="line"># 提交工作区自上次commit之后的变化，直接到仓库区</span><br><span class="line">$ git commit -a</span><br><span class="line"></span><br><span class="line"># 提交时显示所有diff信息</span><br><span class="line">$ git commit -v</span><br><span class="line"></span><br><span class="line"># 使用一次新的commit，替代上一次提交</span><br><span class="line"># 如果代码没有任何新变化，则用来改写上一次commit的提交信息</span><br><span class="line">$ git commit --amend -m [message]</span><br><span class="line"></span><br><span class="line"># 重做上一次commit，并包括指定文件的新变化</span><br><span class="line">$ git commit --amend [file1] [file2] ...</span><br></pre></td></tr></table></figure><h4 id="分支操作"><a href="#分支操作" class="headerlink" title="分支操作"></a>分支操作</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"># 列出所有本地分支</span><br><span class="line">$ git branch</span><br><span class="line"></span><br><span class="line"># 列出所有远程分支</span><br><span class="line">$ git branch -r</span><br><span class="line"></span><br><span class="line"># 列出所有本地分支和远程分支</span><br><span class="line">$ git branch -a</span><br><span class="line"></span><br><span class="line"># 新建一个分支，但依然停留在当前分支</span><br><span class="line">$ git branch [branch-name]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，并切换到该分支</span><br><span class="line">$ git checkout -b [branch]</span><br><span class="line"></span><br><span class="line"># 新建一个分支，指向指定commit</span><br><span class="line">$ git branch [branch] [commit]</span><br><span class="line"></span><br><span class="line"># 建立追踪关系，在现有分支与指定的远程分支之间</span><br><span class="line">$ git branch --<span class="keyword">set</span>-upstream [branch] [remote-branch]</span><br><span class="line"></span><br><span class="line"># 合并指定分支到当前分支</span><br><span class="line">$ git merge [branch]</span><br><span class="line"></span><br><span class="line"># 选择一个commit，合并进当前分支</span><br><span class="line">$ git cherry-pick [commit]</span><br><span class="line"></span><br><span class="line"># 删除分支</span><br><span class="line">$ git branch -d [branch-name]</span><br><span class="line"></span><br><span class="line"># 删除远程分支</span><br><span class="line">$ git push origin --delete [branch-name]</span><br><span class="line">$ git branch -dr [remote/branch]</span><br></pre></td></tr></table></figure><h4 id="撤销"><a href="#撤销" class="headerlink" title="撤销"></a>撤销</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"># 恢复暂存区的指定文件到工作区</span><br><span class="line">$ git checkout [file]</span><br><span class="line"></span><br><span class="line"># 恢复某个commit的指定文件到暂存区和工作区</span><br><span class="line">$ git checkout [commit] [file]</span><br><span class="line"></span><br><span class="line"># 恢复暂存区的所有文件到工作区</span><br><span class="line">$ git checkout .</span><br><span class="line"></span><br><span class="line"># 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变</span><br><span class="line">$ git reset [file]</span><br><span class="line"></span><br><span class="line"># 重置暂存区与工作区，与上一次commit保持一致</span><br><span class="line">$ git reset --hard</span><br><span class="line"></span><br><span class="line"># 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">$ git reset [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致</span><br><span class="line">$ git reset --hard [commit]</span><br><span class="line"></span><br><span class="line"># 重置当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">$ git reset --keep [commit]</span><br><span class="line"></span><br><span class="line"># 新建一个commit，用来撤销指定commit</span><br><span class="line"># 后者的所有变化都将被前者抵消，并且应用到当前分支</span><br><span class="line">$ git revert [commit]</span><br><span class="line"></span><br><span class="line"># 暂时将未提交的变化移除，稍后再移入</span><br><span class="line">$ git stash</span><br><span class="line">$ git stash pop</span><br></pre></td></tr></table></figure><h4 id="更改本地和远程分支的名称"><a href="#更改本地和远程分支的名称" class="headerlink" title="更改本地和远程分支的名称"></a>更改本地和远程分支的名称</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch -m old_branch new_branch # Rename branch locally </span><br><span class="line">git push origin :old_branch # Delete the old branch </span><br><span class="line">git push --<span class="keyword">set</span>-upstream origin new_branch # Push the new branch, <span class="keyword">set</span> local branch to track the new remote</span><br></pre></td></tr></table></figure><h4 id="放弃修改，强制覆盖本地代码"><a href="#放弃修改，强制覆盖本地代码" class="headerlink" title="放弃修改，强制覆盖本地代码"></a>放弃修改，强制覆盖本地代码</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git fetch --all</span><br><span class="line">git reset --hard origin/master </span><br><span class="line">git pull</span><br><span class="line"><span class="comment">//合并写法</span></span><br><span class="line">git fetch --all &amp;&amp; git reset --hard origin/master &amp;&amp; git pull</span><br></pre></td></tr></table></figure><h4 id="撤销commit"><a href="#撤销commit" class="headerlink" title="撤销commit"></a>撤销commit</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git reset --soft HEAD^so</span><br></pre></td></tr></table></figure><h4 id="解决冲突，合并分支"><a href="#解决冲突，合并分支" class="headerlink" title="解决冲突，合并分支"></a>解决冲突，合并分支</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//合并指定分支到当前分支</span></span><br><span class="line">git merge master</span><br></pre></td></tr></table></figure><h4 id="使用一次新的commit，替代上一次提交"><a href="#使用一次新的commit，替代上一次提交" class="headerlink" title="使用一次新的commit，替代上一次提交"></a>使用一次新的commit，替代上一次提交</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit --amend -m [message]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Git常用命令清单&quot;&gt;&lt;a href=&quot;#Git常用命令清单&quot; class=&quot;headerlink&quot; title=&quot;Git常用命令清单&quot;&gt;&lt;/a&gt;Git常用命令清单&lt;/h3&gt;&lt;p&gt;git常用命令合集&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>利用 Hexo + Github Pages 搭建博客</title>
    <link href="http://wangzc.wang/2020/01/10/hexo-blog/"/>
    <id>http://wangzc.wang/2020/01/10/hexo-blog/</id>
    <published>2020-01-10T11:10:33.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>本文总结一下 Hexo 搭建博客的主要流程，能够在日后快速恢复博客环境。</p><p>Hexo 的官方文档写的已经很全面了，本文仅将一些注意点列出。</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a><br>安装 Hexo 的文档参考：</p><ul><li><a href="https://hexo.io/zh-cn/docs/index.html" target="_blank" rel="noopener">官宣-Hexo 文档</a></li></ul><h2 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h2><p>安装 Hexo 之前，你的电脑上需要有</p><ul><li>Node.js</li><li>Git</li></ul><p>如果是 Mac 用户， 您在编译时可能会遇到问题，请先到 App Store 安装 Xcode，Xcode 完成后，启动并进入 <code>Preferences -&gt; Download -&gt; Command Line Tools -&gt; Install</code> 安装命令行工具</p><h2 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h2><p>全局安装 <code>hexo-cli</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>如果遇到权限的问题，可以使用如下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo chown -R $(whoami) &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;</span><br></pre></td></tr></table></figure><p>设置 <code>/usr/local/lib/node_modules/</code> 文件夹属于当前用户。</p><p>此外，如果你要使用 root 权限安装的话，可以使用 <code>sudo -s</code> 切为 root 用户进行相关操作。这么做的话，会将一些文件夹的默认属组设置为 root 了，不推荐。</p><p>npm 权限问题：</p><ul><li><a href="https://npm.community/t/global-installs-sudo-npm-i-g-fail-on-mac-after-6-5-upgrade-works-fine-after-6-4-1-downgrade/4082" target="_blank" rel="noopener">Global installs (sudo npm i -g) fail on Mac after 6.5 upgrade. Works fine after 6.4.1 downgrade</a></li><li><a href="https://zhuanlan.zhihu.com/p/35856841" target="_blank" rel="noopener">npm，yarn如何查看源和换源</a></li></ul><h2 id="建站"><a href="#建站" class="headerlink" title="建站"></a>建站</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init MyBlog</span><br><span class="line">cd MyBlog</span><br><span class="line">npm install</span><br></pre></td></tr></table></figure><p>执行完毕之后，博客其实已经 OK 了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">hexo g</span><br><span class="line">hexo s</span><br></pre></td></tr></table></figure><p>执行上面命令即可本地预览博客内容了。</p><h2 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h2><p><a href="https://hexo.io/zh-cn/docs/configuration" target="_blank" rel="noopener">官宣-站点配置文件</a> 内容中介绍了很多字段的用途</p><p>Hexo 提供快速一键部署，将博客部署到 GIthub Pages。</p><p>安装 <code>hexo-deployer-git</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd MyBlog</span><br><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><p>修改站点配置文件中的配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># npm install hexo-deployer-git --save</span><br><span class="line">deploy:</span><br><span class="line">- type: git</span><br><span class="line">  repo: git@github.com:Michael728&#x2F;michael728.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>执行部署：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d</span><br></pre></td></tr></table></figure><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><p><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">hexo 常用指令</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">hexo version # 显示hexo版本</span><br><span class="line">hexo new &lt;title&gt; # 创建新文章</span><br><span class="line">hexo g&#x2F;generate # 生成静态文件</span><br><span class="line">hexo clean # 清除缓存文件和已生成的静态文件（public）</span><br><span class="line">hexo server # 启动本地服务器</span><br><span class="line">hexo d&#x2F;deploy # 部署网站</span><br><span class="line">hexo list &lt;type&gt; # 列出网站资料</span><br></pre></td></tr></table></figure><p>npm 常用指令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">npm install 模块名 -g --save # g全局安装 save安装包信息将加入到dependencies（生产阶段的依赖）</span><br><span class="line">npm install gulp@3.9.1 # 指定版本</span><br><span class="line">npm install # 该命令可以根据dependencies配置安装所有的依赖包</span><br><span class="line">npm update [-g] 模块名</span><br><span class="line">npm outdated 模块名 # 检查模块是否过时</span><br><span class="line">npm ls -g # 查看全局安装的模块</span><br><span class="line">npm uninstall 模块名</span><br><span class="line">npm info hexo-cli # 查看hexo-cli模块的信息</span><br></pre></td></tr></table></figure><ul><li><a href="https://www.jianshu.com/p/087d839e1d0c" target="_blank" rel="noopener">npm常用命令</a></li><li><a href="http://www.cnblogs.com/PeunZhang/p/5553574.html" target="_blank" rel="noopener">【原】npm 常用命令详解</a></li></ul><h2 id="Hexo-写作技巧"><a href="#Hexo-写作技巧" class="headerlink" title="Hexo 写作技巧"></a>Hexo 写作技巧</h2><ul><li><a href="https://bestzuo.cn/posts/3147047336.html" target="_blank" rel="noopener">Sanarous-hexo博客Next主题进阶写作技巧</a></li><li><a href="https://blog.lihj.me/post/next-tag-plugin-instruction.html" target="_blank" rel="noopener">NexT 主题内置标签</a></li><li><a href="http://yearito.cn/posts/hexo-writing-skills.html" target="_blank" rel="noopener">Hexo 搭建个人博客系列：写作技巧篇</a></li></ul><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>语法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">这里写你需要写的内容</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; 注意上面的class和no-icon属性是可以选择的</span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br><span class="line">[no-icon] : Disable icon in note.</span><br></pre></td></tr></table></figure><p>示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note success no-icon %&#125;</span><br><span class="line">success形式的类别</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p class="note note-success">success形式的类别</p><p>这里使用 <code>no-icon</code> 表示不显示图标，可选，默认会带有图标。</p><h3 id="使用主题自带-FontAwesome-图标"><a href="#使用主题自带-FontAwesome-图标" class="headerlink" title="使用主题自带 FontAwesome 图标"></a>使用主题自带 FontAwesome 图标</h3><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">- &lt;i class&#x3D;&quot;fa fa-pencil&quot;&gt;&lt;&#x2F;i&gt; 铅笔</span><br><span class="line">- &lt;i class&#x3D;&quot;fa fa-cloud-upload&quot;&gt;&lt;&#x2F;i&gt; 上传</span><br><span class="line">- &lt;i class&#x3D;&quot;fa fa-download&quot;&gt;&lt;&#x2F;i&gt; 下载</span><br></pre></td></tr></table></figure><p>效果：</p><ul><li><i class="fa fa-pencil"></i> 铅笔</li><li><i class="fa fa-cloud-upload"></i> 上传</li><li><i class="fa fa-download"></i> 下载</li></ul><h3 id="文本居中"><a href="#文本居中" class="headerlink" title="文本居中"></a>文本居中</h3><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;% cq %&#125;</span><br><span class="line">人生乃是一面镜子，</span><br><span class="line">从镜子里认识自己，</span><br><span class="line">我要称之为头等大事，</span><br><span class="line">也只是我们追求的目的！</span><br><span class="line">&#123;% endcq %&#125;</span><br></pre></td></tr></table></figure><p>效果：</p><p>人生乃是一面镜子，<br>从镜子里认识自己，<br>我要称之为头等大事，<br>也只是我们追求的目的！</p><h3 id="主题自带-label-标签"><a href="#主题自带-label-标签" class="headerlink" title="主题自带 label 标签"></a>主题自带 label 标签</h3><p>首先在主题 <code>_config.xml</code> 配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Label tag.</span><br><span class="line">label: true</span><br></pre></td></tr></table></figure><p>源码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% label primary@primary内容 %&#125;</span><br></pre></td></tr></table></figure><p>效果：<br>label primary@primary内容 </p><h2 id="Hexo-其他知识"><a href="#Hexo-其他知识" class="headerlink" title="Hexo 其他知识"></a>Hexo 其他知识</h2><h3 id="图床"><a href="#图床" class="headerlink" title="图床"></a>图床</h3><p>由于一直使用的是「微博图床」，渣浪微博和简书开启了图片防盗链，请大家在博客中加入以下标签来绕过：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"referrer"</span> <span class="attr">content</span>=<span class="string">"never"</span> /&gt;</span> ​​​​</span><br></pre></td></tr></table></figure><p>Next 主题只需要在 <code>themes/next/layout/_partials/head/head.swig</code> 中添加上面一行内容即可。</p><h2 id="Next-主题"><a href="#Next-主题" class="headerlink" title="Next 主题"></a>Next 主题</h2><ul><li><a href="https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/README.md" target="_blank" rel="noopener">theme-next/hexo-theme-next</a></li></ul><h3 id="安装-Next"><a href="#安装-Next" class="headerlink" title="安装 Next"></a>安装 Next</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd MyBlog</span><br><span class="line">$ git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><p>Next 扩展都安装在<code>themes/next/source/lib</code>文件夹下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd MyBlog</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure><h3 id="启动-Next-主题"><a href="#启动-Next-主题" class="headerlink" title="启动 Next 主题"></a>启动 Next 主题</h3><p>编辑站点配置文件 <code>_config.yml</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next # 启用next主题</span><br></pre></td></tr></table></figure><h3 id="主题设置"><a href="#主题设置" class="headerlink" title="主题设置"></a>主题设置</h3><ul><li><a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">next-开始使用</a></li></ul><h3 id="设置语言"><a href="#设置语言" class="headerlink" title="设置语言"></a>设置语言</h3><p>站点配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN # 最新版中，不再使用zh-Hans</span><br></pre></td></tr></table></figure><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>编辑主题配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: &#x2F; || home</span><br><span class="line">  #about: &#x2F;about&#x2F; || user</span><br><span class="line">  #tags: &#x2F;tags&#x2F; || tags</span><br><span class="line">  #categories: &#x2F;categories&#x2F; || th</span><br><span class="line">  archives: &#x2F;archives&#x2F; || archive</span><br><span class="line">  #schedule: &#x2F;schedule&#x2F; || calendar</span><br><span class="line">  #sitemap: &#x2F;sitemap.xml || sitemap</span><br><span class="line">  #commonweal: &#x2F;404&#x2F; || heartbeat</span><br></pre></td></tr></table></figure><p>菜单内容的设置格式是：<code>item name: link || icon</code>。其中 `item name 是一个名称，这个名称并不直接显示在页面上，她将用于匹配图标以及翻译。</p><p>设置菜单项的显示文本。在第一步中设置的菜单的名称并不直接用于界面上的展示。Hexo 在生成的时候将使用 这个名称查找对应的语言翻译，并提取显示文本。这些翻译文本放置在 NexT 主题目录下的 <code>languages/{language}.yml</code> （<code>{language}</code> 为你所使用的语言）。</p><p>icon 使用的是 <a href="https://fontawesome.com/icons" target="_blank" rel="noopener">fontawesome</a> 图标，严格区分大小写。</p><h3 id="设置头像"><a href="#设置头像" class="headerlink" title="设置头像"></a>设置头像</h3><p>将准备好的头像放置在主题目录下的 <code>source/images/</code> 中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">avatar:</span><br><span class="line">  # In theme directory (source&#x2F;images): &#x2F;images&#x2F;avatar.gif</span><br><span class="line">  # In site directory (source&#x2F;uploads): &#x2F;uploads&#x2F;avatar.gif</span><br><span class="line">  # You can also use other linking images.</span><br><span class="line">  url: &#x2F;images&#x2F;logo.jpg</span><br></pre></td></tr></table></figure><h3 id="百度统计"><a href="#百度统计" class="headerlink" title="百度统计"></a>百度统计</h3><ol><li>登录<a href="http://tongji.baidu.com/" target="_blank" rel="noopener">百度统计</a>， 定位到站点的<a href="https://tongji.baidu.com/sc-web/18360470/home/site/getjs?siteId=12775404" target="_blank" rel="noopener">代码获取页面</a></li><li>复制 hm.js? 后面那串统计脚本 id，如：</li><li>编辑 主题配置文件， 修改字段 <code>baidu_analytics</code> 字段，值设置成你的百度统计脚本 id</li></ol><h3 id="阅读次数"><a href="#阅读次数" class="headerlink" title="阅读次数"></a>阅读次数</h3><p>使用 <a href="https://leancloud.cn/dashboard/applist.html#/apps" target="_blank" rel="noopener">LeanCloud</a></p><p>参考这个 <a href="https://notes.wanghao.work/2015-10-21-%E4%B8%BANexT%E4%B8%BB%E9%A2%98%E6%B7%BB%E5%8A%A0%E6%96%87%E7%AB%A0%E9%98%85%E8%AF%BB%E9%87%8F%E7%BB%9F%E8%AE%A1%E5%8A%9F%E8%83%BD.html#%E9%85%8D%E7%BD%AELeanCloud" target="_blank" rel="noopener">为NexT主题添加文章阅读量统计功能</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true # 启用了 valine，所以这里可以置为 false</span><br><span class="line">  app_id: xxx</span><br><span class="line">  app_key: xxx</span><br></pre></td></tr></table></figure><h3 id="设置-RSS"><a href="#设置-RSS" class="headerlink" title="设置 RSS"></a>设置 RSS</h3><p>主题配置文件中，<code>rss</code> 字段设为空，启用，设为 <code>false</code> 则不启用。启用的话，需要安装插键：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure><h3 id="添加标签页面"><a href="#添加标签页面" class="headerlink" title="添加标签页面"></a>添加标签页面</h3><ol><li>新建页面 <code>hexo new page tags</code></li><li>设置页面类型，编辑刚新建的页面，将页面的类型设置为 tags ，主题将自动为这个页面显示标签云<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ol><p>如果有集成评论服务，页面也会带有评论。 若需要关闭的话，请添加字段 comments 并将值设置为 false，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">title: 标签</span><br><span class="line">date: 2014-12-22 12:39:04</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><ol start="3"><li>修改菜单，在菜单中添加链接。编辑 主题配置文件 ， 添加 tags 到 menu 中</li></ol><p>标签示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">title: 标签测试文章</span><br><span class="line">tags:</span><br><span class="line">  - Testing</span><br><span class="line">  - Another Tag</span><br></pre></td></tr></table></figure><p>请参阅 <a href="https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">Hexo 的分类与标签文档</a>，了解如何为文章添加标签或者分类</p><p>补充：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">tags:</span><br><span class="line">- PS3</span><br><span class="line">- Games</span><br></pre></td></tr></table></figure><p>分类方法的分歧<br>如果您有过使用WordPress的经验，就很容易误解Hexo的分类方式。WordPress支持对一篇文章设置多个分类，而且这些分类可以是同级的，也可以是父子分类。但是Hexo不支持指定多个同级分类。下面的指定方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- Diary</span><br><span class="line">- Life</span><br></pre></td></tr></table></figure><p>会使分类Life成为Diary的子分类，而不是并列分类。因此，有必要为您的文章选择尽可能准确的分类。</p><p>并列分类，了解一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Linux]</span><br><span class="line">- [Tools]</span><br></pre></td></tr></table></figure><p>并列+子分类，再了解一下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">categories:</span><br><span class="line">- [Linux, Hexo]</span><br><span class="line">- [Tools, PHP]</span><br></pre></td></tr></table></figure><p>同样的方法，添加分类页面：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><h3 id="设置字体"><a href="#设置字体" class="headerlink" title="设置字体"></a>设置字体</h3><p>设置字体可参考:<a href="https://theme-next.iissnan.com/theme-settings.html#fonts-customization" target="_blank" rel="noopener">官宣-字体</a></p><h3 id="设置代码高亮主题"><a href="#设置代码高亮主题" class="headerlink" title="设置代码高亮主题"></a>设置代码高亮主题</h3><p><a href="https://theme-next.iissnan.com/theme-settings.html#syntax-highlight-scheme" target="_blank" rel="noopener">代码高亮预览</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Code Highlight theme</span><br><span class="line"># Available value: normal | night | night eighties | night blue | night bright</span><br><span class="line"># https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-theme</span><br><span class="line">highlight_theme: night eighties</span><br></pre></td></tr></table></figure><h3 id="侧边栏社交链接"><a href="#侧边栏社交链接" class="headerlink" title="侧边栏社交链接"></a>侧边栏社交链接</h3><p>主题配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">social:</span><br><span class="line">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;Michael728 || github</span><br><span class="line">  微博: https:&#x2F;&#x2F;weibo.com&#x2F;1838446070&#x2F;profile?topnav&#x3D;1&amp;wvr&#x3D;6 || weibo</span><br><span class="line">  博客园: https:&#x2F;&#x2F;www.cnblogs.com&#x2F;michael-xiang&#x2F; || globe</span><br><span class="line">  知乎: https:&#x2F;&#x2F;www.zhihu.com&#x2F;people&#x2F;michaelXoX || globe</span><br><span class="line">  Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;728_michael || twitter</span><br><span class="line">  Telegram: https:&#x2F;&#x2F;t.me&#x2F;michaelxiang || telegram</span><br></pre></td></tr></table></figure><p>图标名称 是 Font Awesome 图标的名字（不必带 <code>fa-</code> 前缀）。 enable 选项用于控制是否显示图标，你可以设置成 false 来去掉图标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">social_icons:</span><br><span class="line">  enable: true</span><br><span class="line">  icons_only: false</span><br><span class="line">  transition: false</span><br></pre></td></tr></table></figure><h3 id="开启打赏功能"><a href="#开启打赏功能" class="headerlink" title="开启打赏功能"></a>开启打赏功能</h3><p>只需要 主题配置文件 中填入 微信 和 支付宝 收款二维码图片地址 即可开启该功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">reward_settings:</span><br><span class="line">  # If true, reward would be displayed in every article by default.</span><br><span class="line">  # You can show or hide reward in a specific article throuth &#96;reward: true | false&#96; in Front-matter.</span><br><span class="line">  enable: true</span><br><span class="line">  animation: false</span><br><span class="line">  comment: 我知道是不会有人点的，但万一有人想不开呢👇</span><br><span class="line"></span><br><span class="line">reward:</span><br><span class="line">  wechatpay: &#x2F;images&#x2F;wechatpay.jpg</span><br><span class="line">  alipay: &#x2F;images&#x2F;alipay.png</span><br></pre></td></tr></table></figure><h3 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># Blog rolls</span><br><span class="line">links_icon: link</span><br><span class="line">links_title: 关注列表 #Links</span><br><span class="line">links_layout: block</span><br><span class="line">#links_layout: inline</span><br><span class="line">links:</span><br><span class="line">  #Title: http:&#x2F;&#x2F;example.com</span><br><span class="line">  Blog List: https:&#x2F;&#x2F;michael728.github.io&#x2F;2018&#x2F;09&#x2F;16&#x2F;blog-interesting&#x2F;</span><br><span class="line">  ZeeCoder: https:&#x2F;&#x2F;zcheng.ren&#x2F;posts&#x2F;</span><br><span class="line">  ehlxr: https:&#x2F;&#x2F;ehlxr.me&#x2F;</span><br><span class="line">  卡瓦邦噶: https:&#x2F;&#x2F;www.kawabangga.com&#x2F;</span><br><span class="line">  David Dai: https:&#x2F;&#x2F;blog.stdioa.com&#x2F;</span><br><span class="line">  建站日志: https:&#x2F;&#x2F;michael728.github.io&#x2F;2016&#x2F;09&#x2F;03&#x2F;blog-logfile&#x2F;</span><br></pre></td></tr></table></figure><h3 id="站点建立时间"><a href="#站点建立时间" class="headerlink" title="站点建立时间"></a>站点建立时间</h3><p>这个时间将在站点的底部显示，例如 <code>©2013 - 2015</code>。 编辑 主题配置文件，新增字段 since：</p><h3 id="订阅微信公众号"><a href="#订阅微信公众号" class="headerlink" title="订阅微信公众号"></a>订阅微信公众号</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Wechat Subscriber</span><br><span class="line">wechat_subscriber:</span><br><span class="line">  enabled: true</span><br><span class="line">  qcode: &#x2F;uploads&#x2F;wechat-qcode.jpg</span><br><span class="line">  description: 欢迎您扫一扫上面的微信公众号，订阅我的博客！</span><br></pre></td></tr></table></figure><h3 id="设置动画效果"><a href="#设置动画效果" class="headerlink" title="设置动画效果"></a>设置动画效果</h3><p>主题配置文件设置。比较在乎速度，可以关闭动画。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Use velocity to animate everything.</span><br><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: false</span><br><span class="line">  transition:</span><br><span class="line">    # Transition variants:</span><br><span class="line">    # fadeIn | fadeOut | flipXIn | flipXOut | flipYIn | flipYOut | flipBounceXIn | flipBounceXOut | flipBounceYIn | flipBounceYOut</span><br><span class="line">    # swoopIn | swoopOut | whirlIn | whirlOut | shrinkIn | shrinkOut | expandIn | expandOut</span><br><span class="line">    # bounceIn | bounceOut | bounceUpIn | bounceUpOut | bounceDownIn | bounceDownOut | bounceLeftIn | bounceLeftOut | bounceRightIn | bounceRightOut</span><br><span class="line">    # slideUpIn | slideUpOut | slideDownIn | slideDownOut | slideLeftIn | slideLeftOut | slideRightIn | slideRightOut</span><br><span class="line">    # slideUpBigIn | slideUpBigOut | slideDownBigIn | slideDownBigOut | slideLeftBigIn | slideLeftBigOut | slideRightBigIn | slideRightBigOut</span><br><span class="line">    # perspectiveUpIn | perspectiveUpOut | perspectiveDownIn | perspectiveDownOut | perspectiveLeftIn | perspectiveLeftOut | perspectiveRightIn | perspectiveRightOut</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: slideDownIn</span><br><span class="line">    post_body: slideDownIn</span><br><span class="line">    coll_header: slideLeftIn</span><br><span class="line">    # Only for Pisces | Gemini.</span><br><span class="line">    sidebar: slideUpIn</span><br></pre></td></tr></table></figure><h3 id="设置背景动画"><a href="#设置背景动画" class="headerlink" title="设置背景动画"></a>设置背景动画</h3><p>编辑 主题配置文件， 搜索 <code>canvas_nest</code> 或 <code>three_waves</code>，根据您的需求设置值为 true 或者 false 即可</p><p>我只启用了 canvas_nest</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">canvas_nest: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-canvas-nest@1.0.0&#x2F;canvas-nest.min.js</span><br><span class="line">canvas_nest_nomobile: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;gh&#x2F;theme-next&#x2F;theme-next-canvas-nest@1&#x2F;canvas-nest-nomobile.min.js</span><br></pre></td></tr></table></figure><h3 id="搜索–Local-Search"><a href="#搜索–Local-Search" class="headerlink" title="搜索–Local Search"></a>搜索–Local Search</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>站点配置文件，新增如下内容：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure><p>编辑主题配置文件，启用本地搜索：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># Local search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br></pre></td></tr></table></figure><h3 id="不蒜子统计"><a href="#不蒜子统计" class="headerlink" title="不蒜子统计"></a>不蒜子统计</h3><p>编辑 主题配置文件 中的 <code>busuanzi_count</code> 的配置项：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">busuanzi_count:</span><br><span class="line">  enable: true</span><br><span class="line">  total_visitors: true</span><br><span class="line">  total_visitors_icon: user</span><br><span class="line">  total_views: true</span><br><span class="line">  total_views_icon: eye</span><br><span class="line">  # 文章阅读次数，关闭，避免与leanclound_visitors冲突</span><br><span class="line">  post_views: false</span><br><span class="line">  post_views_icon: eye</span><br></pre></td></tr></table></figure><h3 id="fancybox"><a href="#fancybox" class="headerlink" title="fancybox"></a>fancybox</h3><p>fancyBox is a tool that offers a nice and elegant way to add zooming functionality for images, html content and multi-media on your webpages</p><ul><li>检查<code>_config.yml</code> 中是否开启了 fancybox</li><li>找到 vendors，把 <code>fancybox</code> 和 <code>fancybox_css</code> 设置成推荐值</li></ul><p>参考：</p><ul><li><a href="https://github.com/theme-next/hexo-theme-next/issues/593" target="_blank" rel="noopener">文章里面的图片点击没有反应，也没有放大效果 [solved]</a></li></ul><h3 id="内容分享"><a href="#内容分享" class="headerlink" title="内容分享"></a>内容分享</h3><p><a href="https://github.com/theme-next/theme-next-needmoreshare2" target="_blank" rel="noopener">theme-next-needmoreshare2</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd themes&#x2F;next</span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;theme-next-needmoreshare2 source&#x2F;lib&#x2F;needsharebutton</span><br></pre></td></tr></table></figure><p>主题配置文件配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">needmoreshare2:</span><br><span class="line">  enable: true</span><br><span class="line">  postbottom:</span><br><span class="line">    enable: true</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: bottomCenter</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br><span class="line">  float:</span><br><span class="line">    enable: false</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: middleRight</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br></pre></td></tr></table></figure><h3 id="评论"><a href="#评论" class="headerlink" title="评论"></a>评论</h3><p>Next 评论配置很简单，支持很丰富。</p><p><code>front matter</code> 中设置 <code>comments: false</code>，当前页就不会显示评论框了。</p><h4 id="Disqus-评论启用，但是得网络畅通才能看到："><a href="#Disqus-评论启用，但是得网络畅通才能看到：" class="headerlink" title="Disqus 评论启用，但是得网络畅通才能看到："></a>Disqus 评论启用，但是得网络畅通才能看到：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: true</span><br><span class="line">  shortname: xxx</span><br><span class="line">  count: true</span><br></pre></td></tr></table></figure><p>编辑 主题配置文件， 将 disqus 下的 enable 设定为 true，同时提供您的 shortname。count 用于指定是否显示评论数量</p><h4 id="vline"><a href="#vline" class="headerlink" title="vline"></a>vline</h4><p><a href="https://valine.js.org/avatar.html" target="_blank" rel="noopener">Valine</a>这个评论系统也是用到了 <a href="https://leancloud.cn/dashboard/app.html?appid=7CDtrbb4U7nQzOdctmXXnMqt-gzGzoHsz#/general" target="_blank" rel="noopener">leancloud</a></p><ul><li>点击登录或注册Leancloud;</li><li>创建应用(如果已经创建了博客应用，就不用再创建了)</li><li>获取 APP ID 和 APP KEY: 刚刚创建的应用 &gt; 设置 &gt; 应用 KEY</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">valine:</span><br><span class="line">  enable: false # When enable is set to be true, leancloud_visitors is recommended to be closed for the re-initialization problem within different leancloud adk version.</span><br><span class="line">  appid:  xxx # your leancloud application appid</span><br><span class="line">  appkey:  xxx # your leancloud application appkey</span><br><span class="line">  notify: true # mail notifier , https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki https:&#x2F;&#x2F;valine.js.org&#x2F;notify.html</span><br><span class="line">  verify: true # Verification code</span><br><span class="line">  placeholder: ヾﾉ≧∀≦)o来啊，快活啊!  # comment box placeholder</span><br><span class="line">  avatar: identicon # wavatar retro gravatar style https:&#x2F;&#x2F;github.com&#x2F;xCss&#x2F;Valine&#x2F;wiki&#x2F;avatar-setting-for-valine</span><br><span class="line">  guest_info: nick,mail,link # custom comment header</span><br><span class="line">  pageSize: 10 # pagination size</span><br><span class="line">  visitor: true # leancloud-counter-security is not supported for now. When visitor is set to be true, appid and appkey are recommended to be the same as leancloud_visitors&#39; for counter compatibility. Article reading statistic https:&#x2F;&#x2F;valine.js.org&#x2F;visitor.html</span><br></pre></td></tr></table></figure><ul><li>visitor 文章访问量统计。</li><li>recordIP，默认是 fasle，是否记录评论者IP</li><li><a href="https://valine.js.org/configuration.html" target="_blank" rel="noopener">valine 配置项查看</a></li></ul><p>头像设置，可以用你对应的邮箱设置 <a href="http://cn.gravatar.com/" target="_blank" rel="noopener">Gravatar</a>，这样你评论时，就是注册时使用的邮箱了。</p><p>邮件提醒，进入Leancloud&gt;选择你的评论所存放的应用&gt;设置&gt;邮件模板，按下图设置好用于重置密码的邮件主题&gt;然后保存:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;p&gt;Hi, &#123;&#123;username&#125;&#125;&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;</span><br><span class="line">你在 &#123;&#123;appname&#125;&#125; 的评论收到了新的回复，请点击查看：</span><br><span class="line">&lt;&#x2F;p&gt;</span><br><span class="line">&lt;p&gt;&lt;a href&#x3D;&quot;https:&#x2F;&#x2F;michael728.github.io&#x2F;&quot; style&#x3D;&quot;display: inline-block; padding: 10px 20px; border-radius: 4px; background-color: #3090e4; color: #fff; text-decoration: none;&quot;&gt;马上查看&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;</span><br></pre></td></tr></table></figure><p>参考：</p><ul><li><a href="https://github.com/zhaojun1998/Valine-Admin" target="_blank" rel="noopener">valine-admin</a></li><li><a href="https://io-oi.me/technology/computer/computer-aided-art/2018/07/15/use-valine-in-theme-next.html" target="_blank" rel="noopener">在 NexT 中使用 Valine 评论系统</a></li></ul><h3 id="hexo-next-新增阅读排行页面"><a href="#hexo-next-新增阅读排行页面" class="headerlink" title="hexo next 新增阅读排行页面"></a>hexo next 新增阅读排行页面</h3><p>参考这两个教程：</p><ul><li><a href="https://hoxis.github.io/hexo-next-read-rank.html" target="_blank" rel="noopener">hexo next 新增阅读排行页面</a></li><li><a href="https://io-oi.me/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li><li><a href="https://io-oi.me/technology/computer/computer-aided-art/2018/07/15/use-valine-in-theme-next.html" target="_blank" rel="noopener">在 NexT 中使用 Valine 评论系统</a></li></ul><h3 id="在Hexo博客中加入豆瓣读书页面"><a href="#在Hexo博客中加入豆瓣读书页面" class="headerlink" title="在Hexo博客中加入豆瓣读书页面"></a>在Hexo博客中加入豆瓣读书页面</h3><p><a href="https://github.com/mythsman/hexo-douban" target="_blank" rel="noopener">hexo-douban</a> 可以实现生成豆瓣读书、电影、游戏的页面。具体的使用方法可以看项目的主页或者这篇文章</p><ul><li><a href="https://bestzuo.cn/posts/hexo-douban.html" target="_blank" rel="noopener">在Hexo博客中加入豆瓣读书页面</a></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo clean &amp;&amp; hexo douban -bm &amp;&amp; hexo g &amp;&amp;hexo deploy</span><br></pre></td></tr></table></figure><h3 id="看板娘"><a href="#看板娘" class="headerlink" title="看板娘"></a>看板娘</h3><ul><li><a href="https://github.com/EYHN/hexo-helper-live2d" target="_blank" rel="noopener">EYHN/hexo-helper-live2d</a> Hexo 博客照着配置就行</li><li><a href="https://huaji8.top/post/live2d-plugin-2.0/" target="_blank" rel="noopener">live2d-看板娘预览</a></li><li><a href="https://11.tt/posts/2018/how-to-play-with-live2d-on-hexo/" target="_blank" rel="noopener">用Live2D让看板喵入住你的Hexo博客吧(^o^)/~</a></li><li><a href="https://imjad.cn/archives/lab/add-dynamic-poster-girl-with-live2d-to-your-blog-01" target="_blank" rel="noopener">给博客添加能动的看板娘(Live2D)-关于模型的二三事</a> Hexo 博客看板娘配置进阶</li><li><a href="https://www.cnblogs.com/barryzhang/p/10535960.html" target="_blank" rel="noopener">博客园添加Live2d看板娘</a> 博客园增加看板娘</li></ul><h3 id="SEO-优化"><a href="#SEO-优化" class="headerlink" title="SEO 优化"></a>SEO 优化</h3><ul><li><a href="https://hoxis.github.io/Hexo+Next%20SEO%E4%BC%98%E5%8C%96.html" target="_blank" rel="noopener">Hexo博客Next主题SEO优化方法</a></li><li><a href="https://yfzhou.coding.me/2018/08/29/Hexo-Next%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%EF%BC%88SEO%E4%BC%98%E5%8C%96%EF%BC%89/" target="_blank" rel="noopener">Hexo-Next搭建个人博客（SEO优化）</a></li><li><a href="https://mtianyan.gitee.io/post/a625fa82.html" target="_blank" rel="noopener">Hexo+Next主题搭建博客安装美化及SEO优化指南</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://michael728.github.io/" target="_blank" rel="noopener">Michael翔</a></li><li><a href="https://chentging.github.io/2018/05/14/hexo%EF%BC%9A%EF%BC%88%E4%B8%89%EF%BC%89hexo-Next-%E4%B8%BB%E9%A2%98%E4%B8%8B%E8%BD%BD%E5%92%8C%E9%85%8D%E7%BD%AE/" target="_blank" rel="noopener">hexo：（三）hexo Next 主题下载和配置</a></li><li><a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">打造个性超赞博客Hexo+NexT+GitHubPages的超深度优化</a></li><li><a href="https://blog.runningcoder.me/2018/04/26/create-personal-blog-with-github-and-hexo-V/" target="_blank" rel="noopener">手摸手教你用github和hexo搭建个人博客（五）</a></li><li><a href="https://segmentfault.com/a/1190000009544924#articleHeader23" target="_blank" rel="noopener">hexo的next主题个性化配置教程</a></li><li><a href="https://iuok.me/posts/2911810154/" target="_blank" rel="noopener">NexT 主题的扩展以及设置</a></li><li><a href="https://bestzuo.cn/posts/blog-establish.html" target="_blank" rel="noopener">Sanarous-使用Hexo+Next主题搭建自己的个人博客</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;本文总结一下 Hexo 搭建博客的主要流程，能够在日后快速恢复博客环境。&lt;/p&gt;
&lt;p&gt;Hexo 的官方文档写的已经很全面了，本文仅将一些注意点列出。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="http://wangzc.wang/categories/Hexo/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>在linux服务器上安装jdk</title>
    <link href="http://wangzc.wang/2019/12/10/linux-i-jdk/"/>
    <id>http://wangzc.wang/2019/12/10/linux-i-jdk/</id>
    <published>2019-12-10T15:45:49.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<h3 id="yum安装jdk"><a href="#yum安装jdk" class="headerlink" title="yum安装jdk"></a>yum安装jdk</h3><p>在linux上使用yum安装是非常粗暴无脑的，但仍然有需要注意的点，不然会掉坑里。这里说一下步骤。</p><p>1.执行命令<code>yum -y list java*</code>查看可安装java版本。执行成功后可以看见如下的结果</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/h1AmRk20%20.jpg"  alt=""></p><p>2.选择一个java版本进行安装，这里我们希望安装java1.8，因为我们的机器是64位的，所以选择安装java-1.8.0-openjdk-devel.x86_64。<br>这里有个地方要注意，上图中我用红框圈起来的两个java版本，要选择-devel的安装，因为这个安装的是jdk，而那个不带-devel的安装完了其实是jre。</p><p>3.执行命令<code>yum install -y java-1.8.0-openjdk-devel.x86_641</code>。执行完后会看见控制台刷出很多输出。<br>耐心等待至自动安装完成</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/disQBh35%20.jpg"  alt=""></p><p>4.输入<code>java -version</code>查看已安装的jdk版本，当出现如下输出表示安装成功。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/HbrV5f48%20.jpg"  alt=""></p><p>5.你可能好奇，yum安装的jdk，被安装到哪里去了？你可以在<code>/usr/lib/jvm</code>目录下找到他们。</p><p><img src="/" class="lazyload" data-src="https://gitee.com/Wzhichao/img/raw/master/uPic/D12x2F59%20.jpg"  alt=""></p><p>至此，yum安装jdk完成</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;yum安装jdk&quot;&gt;&lt;a href=&quot;#yum安装jdk&quot; class=&quot;headerlink&quot; title=&quot;yum安装jdk&quot;&gt;&lt;/a&gt;yum安装jdk&lt;/h3&gt;&lt;p&gt;在linux上使用yum安装是非常粗暴无脑的，但仍然有需要注意的点，不然会掉坑里。这里说一下
      
    
    </summary>
    
    
      <category term="前端自动化" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    
    
      <category term="jenkins" scheme="http://wangzc.wang/tags/jenkins/"/>
    
  </entry>
  
  <entry>
    <title>前端数据操作</title>
    <link href="http://wangzc.wang/2019/08/09/formatData/"/>
    <id>http://wangzc.wang/2019/08/09/formatData/</id>
    <published>2019-08-09T13:24:09.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p>在与后端联调的时候，经常会遇到数据格式与自己之前mock的不太一样的情况，后端又不方便修改，前端该怎么来处理呢</p><a id="more"></a><p>下面我列出了几种情况：<br>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h4 id="一-数组对象不匹配"><a href="#一-数组对象不匹配" class="headerlink" title="一.数组对象不匹配"></a>一.数组对象不匹配</h4><p>后端返回数据格式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">data: [</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">'003268955'</span>,</span><br><span class="line">    name: <span class="string">'tom'</span>,</span><br><span class="line">    age: <span class="number">18</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    id: <span class="string">'0335689754'</span>,</span><br><span class="line">    name: <span class="string">'mark'</span>,</span><br><span class="line">    age: <span class="number">23</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><ul><li>假设：</li></ul><ol><li>这里的id返回的类型是string，而你需要的是number类型<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">data = data.map(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...res,</span><br><span class="line">        id: <span class="built_in">Number</span>(res.id)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出=&gt;</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">3268955</span>, <span class="attr">name</span>: <span class="string">'tom'</span>, <span class="attr">age</span>: <span class="number">18</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="number">335689754</span>, <span class="attr">name</span>: <span class="string">'mark'</span>, <span class="attr">age</span>: <span class="number">23</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li>后端返回的是name字段名，而你需要的是username(这里我们直接复制出一个新的key就行，旧的key值可以保留也可删除)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//不删除旧key</span></span><br><span class="line">data = data.map(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...res,</span><br><span class="line">        username: res.name</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出=&gt;</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'003268955'</span>, <span class="attr">name</span>: <span class="string">'tom'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">username</span>: <span class="string">'tom'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'0335689754'</span>, <span class="attr">name</span>: <span class="string">'mark'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">username</span>: <span class="string">'mark'</span> &#125;</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除旧key</span></span><br><span class="line">data = data.map(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> username = res.name</span><br><span class="line">   <span class="keyword">delete</span> res.name</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...res,</span><br><span class="line">        username: username</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出=&gt;</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'003268955'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">username</span>: <span class="string">'tom'</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'0335689754'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">username</span>: <span class="string">'mark'</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li><li>checkbox情况，你还需要一个变量checked来处理有没有被选择的情况(初始值置为false)<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">data = data.map(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">   <span class="keyword">let</span> username = res.name</span><br><span class="line">   <span class="keyword">delete</span> res.name</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        ...res,</span><br><span class="line">        checked: <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//输出=&gt;</span></span><br><span class="line">[</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'003268955'</span>, <span class="attr">age</span>: <span class="number">18</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;,</span><br><span class="line">  &#123; <span class="attr">id</span>: <span class="string">'0335689754'</span>, <span class="attr">age</span>: <span class="number">23</span>, <span class="attr">checked</span>: <span class="literal">false</span> &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><h4 id="二、树状数据结构"><a href="#二、树状数据结构" class="headerlink" title="二、树状数据结构"></a>二、树状数据结构</h4>后端返回数据：<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'一号楼'</span>,</span><br><span class="line">    key: <span class="string">'100'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">'一单元'</span>,</span><br><span class="line">        key: <span class="string">'1001'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; <span class="attr">title</span>: <span class="string">'3405'</span>, <span class="attr">key</span>: <span class="string">'10010'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">title</span>: <span class="string">'3302'</span>, <span class="attr">key</span>: <span class="string">'10011'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure></li></ol><ul><li>假设</li></ul><p>1.使用的树插件的key以及value字段名称是id和name；(递归方式进行替换并删除旧key)</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    res.id = res.key;</span><br><span class="line">    res.name = res.title;</span><br><span class="line">    <span class="keyword">delete</span> res.key;</span><br><span class="line">    <span class="keyword">delete</span> res.title;</span><br><span class="line">    <span class="keyword">if</span>(res.children)&#123;</span><br><span class="line">      format(res.children)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">format(data)</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出==&gt;</span></span><br><span class="line"></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        children: [</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="string">'10010'</span>, <span class="attr">name</span>: <span class="string">'3405'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">id</span>: <span class="string">'10011'</span>, <span class="attr">name</span>: <span class="string">'3302'</span> &#125;</span><br><span class="line">        ],</span><br><span class="line">        id: <span class="string">'1001'</span>,</span><br><span class="line">        name: <span class="string">'一单元'</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    id: <span class="string">'100'</span>,</span><br><span class="line">    name: <span class="string">'一号楼'</span></span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>2.希望在最后一个节点显示前面父集的集合：一号楼一单元10010</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">data,text</span>)</span>&#123;</span><br><span class="line">  data.forEach(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!res.children)&#123;</span><br><span class="line">      res.title = text + res.title</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(res.children)&#123;</span><br><span class="line">      text += res.title;</span><br><span class="line">      format(res.children,text)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">format(data,<span class="string">''</span>);<span class="comment">//初始text置为空</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//输出==&gt;</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'一号楼'</span>,</span><br><span class="line">    key: <span class="string">'100'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">'一单元'</span>,</span><br><span class="line">        key: <span class="string">'1001'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; <span class="attr">title</span>: <span class="string">'一号楼一单元3405'</span>, <span class="attr">key</span>: <span class="string">'10010'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">title</span>: <span class="string">'一号楼一单元3302'</span>, <span class="attr">key</span>: <span class="string">'10011'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p>3.将节点进行排序</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> compare = <span class="function"><span class="params">p</span> =&gt;</span> <span class="function">(<span class="params">m, n</span>) =&gt;</span> m[p] - n[p];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">format</span>(<span class="params">data, key</span>) </span>&#123;<span class="comment">//key:需要排序的字段</span></span><br><span class="line">  data.sort(compare(key));</span><br><span class="line">  data.forEach(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!res.children) &#123;</span><br><span class="line">      <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      format(res.children, key);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">format(data, <span class="string">'title'</span>);</span><br><span class="line"><span class="comment">//输出=&gt;</span></span><br><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    title: <span class="string">'一号楼'</span>,</span><br><span class="line">    key: <span class="string">'100'</span>,</span><br><span class="line">    children: [</span><br><span class="line">      &#123;</span><br><span class="line">        title: <span class="string">'一单元'</span>,</span><br><span class="line">        key: <span class="string">'1001'</span>,</span><br><span class="line">        children: [</span><br><span class="line">          &#123; <span class="attr">title</span>: <span class="string">'3302'</span>, <span class="attr">key</span>: <span class="string">'10011'</span> &#125;,</span><br><span class="line">          &#123; <span class="attr">title</span>: <span class="string">'3405'</span>, <span class="attr">key</span>: <span class="string">'10010'</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">];</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在与后端联调的时候，经常会遇到数据格式与自己之前mock的不太一样的情况，后端又不方便修改，前端该怎么来处理呢&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>apply和call的区别</title>
    <link href="http://wangzc.wang/2019/05/09/apply-call/"/>
    <id>http://wangzc.wang/2019/05/09/apply-call/</id>
    <published>2019-05-09T17:56:02.000Z</published>
    <updated>2020-04-16T16:39:56.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="apply-和-call-的区别"><a href="#apply-和-call-的区别" class="headerlink" title="apply 和 call 的区别"></a>apply 和 call 的区别</h2><p> ECMAScript 规范给所有函数都定义了 call 与 apply 两个方法，它们的应用非常广泛，它们的作用也是一模一样，只是传参的形式有区别而已。<br>  <a id="more"></a><br>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h3 id="apply"><a href="#apply" class="headerlink" title="apply( )"></a>apply( )</h3><p> apply 方法传入两个参数：一个是作为函数上下文的对象，另外一个是作为函数参数所组成的数组。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name : <span class="string">'linxin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">firstName, lastName</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + <span class="keyword">this</span>.name + <span class="string">' '</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.apply(obj, [<span class="string">'A'</span>, <span class="string">'B'</span>]);    <span class="comment">// A linxin B</span></span><br></pre></td></tr></table></figure><p> 可以看到，obj 是作为函数上下文的对象，函数 func 中 this 指向了 obj 这个对象。参数 A 和 B 是放在数组中传入 func 函数，分别对应 func 参数的列表元素。</p><h3 id="call"><a href="#call" class="headerlink" title="call( )"></a>call( )</h3><p> call 方法第一个参数也是作为函数上下文的对象，但是后面传入的是一个参数列表，而不是单个数组。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'linxin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">firstName, lastName</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(firstName + <span class="string">' '</span> + <span class="keyword">this</span>.name + <span class="string">' '</span> + lastName);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.call(obj, <span class="string">'C'</span>, <span class="string">'D'</span>);       <span class="comment">// C linxin D</span></span><br></pre></td></tr></table></figure><p> 对比 apply 我们可以看到区别，C 和 D 是作为单独的参数传给 func 函数，而不是放到数组中。</p><p> 对于什么时候该用什么方法，其实不用纠结。如果你的参数本来就存在一个数组中，那自然就用 apply，如果参数比较散乱相互之间没什么关联，就用 call。</p><h2 id="apply-和-call-的用法"><a href="#apply-和-call-的用法" class="headerlink" title="apply 和 call 的用法"></a>apply 和 call 的用法</h2><h3 id="1-改变-this-指向"><a href="#1-改变-this-指向" class="headerlink" title="1.改变 this 指向"></a>1.改变 this 指向</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'linxin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">func.call(obj);       <span class="comment">// linxin</span></span><br></pre></td></tr></table></figure><p> 我们知道，call 方法的第一个参数是作为函数上下文的对象，这里把 obj 作为参数传给了 func，此时函数里的 this 便指向了 obj 对象。此处 func 函数里其实相当于</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(obj.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-借用别的对象的方法"><a href="#2-借用别的对象的方法" class="headerlink" title="2.借用别的对象的方法"></a>2.借用别的对象的方法</h3><p> 先看例子</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Person1  = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'linxin'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> Person2 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.getname = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    Person1.call(<span class="keyword">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person2();</span><br><span class="line">person.getname();       <span class="comment">// linxin</span></span><br></pre></td></tr></table></figure><p> 从上面我们看到，Person2 实例化出来的对象 person 通过 getname 方法拿到了 Person1 中的 name。因为在 Person2 中，Person1.call(this) 的作用就是使用 Person1 对象代替 this 对象，那么 Person2 就有了 Person1 中的所有属性和方法了，相当于 Person2 继承了 Person1 的属性和方法。</p><h3 id="3-调用函数"><a href="#3-调用函数" class="headerlink" title="3.调用函数"></a>3.调用函数</h3><p> apply、call 方法都会使函数立即执行，因此它们也可以用来调用函数。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'linxin'</span>);</span><br><span class="line">&#125;</span><br><span class="line">func.call();            <span class="comment">// linxin</span></span><br></pre></td></tr></table></figure><h2 id="call-和-bind-的区别"><a href="#call-和-bind-的区别" class="headerlink" title="call 和 bind 的区别"></a>call 和 bind 的区别</h2><p> 在 EcmaScript5 中扩展了叫 bind 的方法，在低版本的 IE 中不兼容。它和 call 很相似，接受的参数有两部分，第一个参数是是作为函数上下文的对象，第二部分参数是个列表，可以接受多个参数。<br> 它们之间的区别有以下两点。</p><h3 id="1-bind-发返回值是函数"><a href="#1-bind-发返回值是函数" class="headerlink" title="1.bind 发返回值是函数"></a>1.bind 发返回值是函数</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    name: <span class="string">'linxin'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> func1 = func.bind(obj);</span><br><span class="line">func1();                        <span class="comment">// linxin</span></span><br></pre></td></tr></table></figure><p> bind 方法不会立即执行，而是返回一个改变了上下文 this 后的函数。而原函数 func 中的 this 并没有被改变，依旧指向全局对象 window。</p><h3 id="2-参数的使用"><a href="#2-参数的使用" class="headerlink" title="2.参数的使用"></a>2.参数的使用</h3> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> func1 = func.bind(<span class="literal">null</span>,<span class="string">'linxin'</span>);</span><br><span class="line"></span><br><span class="line">func(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);            <span class="comment">// A B C</span></span><br><span class="line">func1(<span class="string">'A'</span>, <span class="string">'B'</span>, <span class="string">'C'</span>);           <span class="comment">// linxin A B</span></span><br><span class="line">func1(<span class="string">'B'</span>, <span class="string">'C'</span>);                <span class="comment">// linxin B C</span></span><br><span class="line">func.call(<span class="literal">null</span>, <span class="string">'linxin'</span>);      <span class="comment">// linxin undefined undefined</span></span><br></pre></td></tr></table></figure><p> call 是把第二个及以后的参数作为 func 方法的实参传进去，而 func1 方法的实参实则是在 bind 中参数的基础上再往后排。</p><p> 在低版本浏览器没有 bind 方法，我们也可以自己实现一个。</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!<span class="built_in">Function</span>.prototype.bind) &#123;</span><br><span class="line">        <span class="built_in">Function</span>.prototype.bind = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> self = <span class="keyword">this</span>,                        <span class="comment">// 保存原函数</span></span><br><span class="line">                context = [].shift.call(<span class="built_in">arguments</span>), <span class="comment">// 保存需要绑定的this上下文</span></span><br><span class="line">                args = [].slice.call(<span class="built_in">arguments</span>);    <span class="comment">// 剩余的参数转为数组</span></span><br><span class="line">            <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;                    <span class="comment">// 返回一个新函数</span></span><br><span class="line">                self.apply(context,[].concat.call(args, [].slice.call(<span class="built_in">arguments</span>)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><ul><li>ES6里面的call还能用解构来传参<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> f = <span class="function"><span class="keyword">function</span> (<span class="params">a, b, c</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(a, b, c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line">f.call(<span class="literal">null</span>, ...arr)</span><br></pre></td></tr></table></figure></li><li>求一个数组的最大值，使用 Math.max 函数，但是这个函数入参不支持数组，只能是将多个参数逐个传入，用逗号分隔。<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>)<span class="comment">//es5</span></span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max(...[<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>])<span class="comment">//es6</span></span><br><span class="line"><span class="comment">//使用apply</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> max = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr);</span><br></pre></td></tr></table></figure></li></ul><blockquote><p><a href="https://github.com/lin-xin/blog/issues/7" target="_blank" rel="noopener">原文链接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;apply-和-call-的区别&quot;&gt;&lt;a href=&quot;#apply-和-call-的区别&quot; class=&quot;headerlink&quot; title=&quot;apply 和 call 的区别&quot;&gt;&lt;/a&gt;apply 和 call 的区别&lt;/h2&gt;&lt;p&gt; ECMAScript 规范给所有函数都定义了 call 与 apply 两个方法，它们的应用非常广泛，它们的作用也是一模一样，只是传参的形式有区别而已。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>什么是URL？网址的组成</title>
    <link href="http://wangzc.wang/2018/11/15/what-url/"/>
    <id>http://wangzc.wang/2018/11/15/what-url/</id>
    <published>2018-11-15T15:29:27.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p>和 <a href="https://developer.mozilla.org/en-US/docs/Glossary/Hypertext" target="_blank" rel="noopener">Hypertext</a> 以及 <a href="https://developer.mozilla.org/en-US/docs/Glossary/HTTP" target="_blank" rel="noopener">HTTP</a> 一样，URL是Web中的一个核心概念。它是<a href="https://developer.mozilla.org/en-US/docs/Glossary/Browser" target="_blank" rel="noopener">浏览器</a>用来检索web上公布的任何资源的机制。</p><p>URL指的是统一资源定位符（Uniform Resource Locator）。URL无非就是一个给定的独特资源在Web上的地址。理论上说，每个有效的URL都指向一个独特的资源。这个资源可以是一个HTML页面，一个CSS文档，一幅图像，等等。而在实际中，有一些例外，最常见的情况就是URL指向了不存在的或是被移动过的资源。由于通过URL呈现的资源和URL本身由Web服务器处理，因此web服务器的拥有者需要认真地维护资源以及与它关联的URL。<br> <a id="more"></a><br>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a><br>一些URL的示例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;developer.mozilla.org</span><br><span class="line">https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;docs&#x2F;Learn&#x2F;</span><br><span class="line">https:&#x2F;&#x2F;developer.mozilla.org&#x2F;en-US&#x2F;search?q&#x3D;URL</span><br></pre></td></tr></table></figure><p>一个URL由不同的部分组成，其中一些是必须的，而另一些是可选的。让我们以下面这个URL为例看看其中最重要的部分：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.example.com:80&#x2F;path&#x2F;to&#x2F;myfile.html?key1&#x3D;value1&amp;key2&#x3D;value2#SomewhereInTheDocument</span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="mdn-url-protocol@x2.png"   ><p>http:// 是协议。它表明了浏览器必须使用何种协议。它通常都是HTTP协议或是HTTP协议的安全版，即HTTPS。Web需要它们二者之一，但浏览器也知道如何处理其他协议，比如mailto:（打开邮件客户端）或者 ftp:（处理文件传输），所以当你看到这些协议时，不必惊讶。</p><img src="/" class="lazyload" data-src="mdn-url-domain@x2.png"   ><p><a href="http://www.example.com" target="_blank" rel="noopener">www.example.com</a> 是域名。 它表明正在请求哪个Web服务器。或者，可以直接使用IP address, 但是因为它不太方便，所以它不经常在网络上使用。.</p><img src="/" class="lazyload" data-src="mdn-url-port@x2.png"   ><p>:80 是端口。 它表示用于访问Web服务器上的资源的技术“门”。如果Web服务器使用HTTP协议的标准端口（HTTP为80，HTTPS为443）来授予其资源的访问权限，则通常会被忽略。否则是强制性的。</p><img src="/" class="lazyload" data-src="mdn-url-path@x2.png"   ><p>/path/to/myfile.html 是网络服务器上资源的路径。在Web的早期阶段，像这样的路径表示Web服务器上的物理文件位置。如今，它主要是由没有任何物理现实的Web服务器处理的抽象。</p><img src="/" class="lazyload" data-src="mdn-url-parameters@x2.png"   ><p>?key1=value1&amp;key2=value2 是提供给网络服务器的额外参数。 这些参数是用 &amp; 符号分隔的键/值对列表。在返回资源之前，Web服务器可以使用这些参数来执行额外的操作。每个Web服务器都有自己关于参数的规则，唯一可靠的方式来知道特定Web服务器是否处理参数是通过询问Web服务器所有者。</p><img src="/" class="lazyload" data-src="mdn-url-anchor@x2.png"   ><p>#SomewhereInTheDocument 是资源本身的另一部分的锚点. 锚点表示资源中的一种“书签”，给浏览器显示位于该“加书签”位置的内容的方向。例如，在HTML文档上，浏览器将滚动到定义锚点的位置;在视频或音频文档上，浏览器将尝试转到锚代表的时间。值得注意的是，＃后面的部分（也称为片段标识符）从来没有发送到请求的服务器。</p><p>参考：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/Common_questions/What_is_a_URL" target="_blank" rel="noopener">什么是url</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;和 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Hypertext&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hypertext&lt;/a&gt; 以及 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/HTTP&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;HTTP&lt;/a&gt; 一样，URL是Web中的一个核心概念。它是&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Browser&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;浏览器&lt;/a&gt;用来检索web上公布的任何资源的机制。&lt;/p&gt;
&lt;p&gt;URL指的是统一资源定位符（Uniform Resource Locator）。URL无非就是一个给定的独特资源在Web上的地址。理论上说，每个有效的URL都指向一个独特的资源。这个资源可以是一个HTML页面，一个CSS文档，一幅图像，等等。而在实际中，有一些例外，最常见的情况就是URL指向了不存在的或是被移动过的资源。由于通过URL呈现的资源和URL本身由Web服务器处理，因此web服务器的拥有者需要认真地维护资源以及与它关联的URL。&lt;br&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="http" scheme="http://wangzc.wang/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>VSCode的使用</title>
    <link href="http://wangzc.wang/2018/02/10/VSCode-use/"/>
    <id>http://wangzc.wang/2018/02/10/VSCode-use/</id>
    <published>2018-02-10T09:47:10.000Z</published>
    <updated>2020-04-16T16:39:56.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>VS Code  本来是前端人员专用，但由于它实在是太好用了，于是，各种开发方向的码农也正在用 VS Code 作为他们的主力编程工具。甚至是一些写作的同学，也把 VS Code 作为 markdown 写作工具。</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h3 id="一、VS-Code-的介绍"><a href="#一、VS-Code-的介绍" class="headerlink" title="一、VS Code 的介绍"></a>一、VS Code 的介绍</h3><p>VS Code 的全称是 Visual Studio Code，是一款开源的、免费的、跨平台的、高性能的、轻量级的代码编辑器。它在性能、语言支持、开源社区方面，都做的很不错。</p><h3 id="编辑器-与-IDE"><a href="#编辑器-与-IDE" class="headerlink" title="编辑器 与 IDE"></a>编辑器 与 IDE</h3><p><code>IDE</code>和<code>编辑器</code>是有区别的：</p><ul><li><p><strong>IDE</strong> ：对代码会有较好的智能提示，同时侧重于工程项目，对项目的开发、调试工作有较好的图像化界面的支持，因此比较笨重。比如 Eclipse 的定位就是 IDE。</p></li><li><p><strong>编辑器</strong>：要相对轻量许多，侧重于文本的编辑。比如 Sublime Text 的定位就是编辑器。再比如 Windows 系统自带的「记事本」就是最简单的编辑器。</p></li></ul><p>需要注意的是，VS Code 的定位是<code>编辑器</code>，而非<code>IDE</code>。但 VS Code 又比一般的编辑器的功能要丰富许多。</p><h3 id="VS-Code的一些补充"><a href="#VS-Code的一些补充" class="headerlink" title="VS Code的一些补充"></a>VS Code的一些补充</h3><ul><li><p>VS Code 的使命，是让开发者在编辑器里拥有 IDE 那样的开发体验，比如代码的智能提示、语法检查、图形化的调试工具、插件扩展、版本管理等。</p></li><li><p>VS Code 的源代码以MIT协议开源。</p></li><li><p>VS Code 自带了 TypeScript 和 Node.js 的支持。也就是说，你在书写 JS 和 TS 时，是自带智能提示的。</p></li><li><p>有一点你可能不知道，VS Code 这个客户端软件是用 js 语言开发出来的（具体请自行查阅关键字<code>Electron</code>）。有句话说得好：能用 js 实现的功能，最终一定会用 js 实现。</p></li></ul><h3 id="前端利器之争：-VS-Code-与-WebStorm"><a href="#前端利器之争：-VS-Code-与-WebStorm" class="headerlink" title="前端利器之争： VS Code 与  WebStorm"></a>前端利器之争： VS Code 与  WebStorm</h3><p>前端小白最喜欢问的一个问题是：哪个编辑器/IDE 好用？是VS Code还是 WebStorm （WebStorm 其实是 IntelliJ IDEA的定制版）？我来做个对比：</p><ul><li><p><strong>哪个更酷</strong>：显然 VS Code 更酷。</p></li><li><p><strong>内存占用情况</strong>：根据我的观察，VS Code是很占内存的（尤其是当你打开多个窗口的时候），但如果你的内存条够用的话，使用起来是不会有任何卡顿的感觉的。相比之下，IDEA 不仅非常占内存，而且还非常卡顿。</p></li><li><p><strong>使用比例</strong>：当然是 VS Code 更胜一筹。先不说别的，我就拿数据说话，我目前所在的前端团队有100人左右，绝大部分前端同学都在用  VS Code，妥妥的。</p></li></ul><p>所以，如果你以后还问这个问题，那就真有些掉底了。</p><h3 id="VS-Code-的安装"><a href="#VS-Code-的安装" class="headerlink" title="VS Code 的安装"></a>VS Code 的安装</h3><ul><li>VS Code 官网：<a href="https://code.visualstudio.com" target="_blank" rel="noopener">https://code.visualstudio.com</a></li></ul><p>VS Code 的安装很简单，直接去官网下载安装包，然后双击安装即可。</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190313_1750_2.png"  alt=""></p><p>上图中，直接点击 download 下载安装即可。</p><h2 id="二、VS-Code快捷键"><a href="#二、VS-Code快捷键" class="headerlink" title="二、VS Code快捷键"></a>二、VS Code快捷键</h2><p>VS Code用得熟不熟，首先就看你是否会用快捷键。以下列出的内容，都是常用快捷键，而加粗部分的快捷键，使用频率则非常高。</p><p>掌握10%的内容，足矣应对90%的工作。熟练使用它们，你就已经很牛了。</p><h3 id="移动光标"><a href="#移动光标" class="headerlink" title="移动光标"></a>移动光标</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + ←</strong></td><td align="left"><strong>Fn + ←</strong></td><td align="left">将光标定位到当前行的最左侧</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Cmd + →</strong></td><td align="left"><strong>Fn + →</strong></td><td align="left">将光标定位到当前行的最右侧</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + ↑</td><td align="left">Ctrl + Home</td><td align="left">将光标定位到文章的第一行</td><td align="left"></td></tr><tr><td align="left">Cmd + ↓</td><td align="left">Ctrl + End</td><td align="left">将光标定位到文章的最后一行</td><td align="left"></td></tr></tbody></table><p>根据上面的快捷键，我们可以举一反三。补充如下：</p><ul><li><p>「方向键」：在<strong>单个字符</strong>之间移动光标</p></li><li><p>「option + 左右方向键」：在<strong>单词</strong>之间移动光标（很常用）。注：Win 快捷键是「Ctrl + 左右方向键」。</p></li><li><p>「Cmd + 左右方向键」：在<strong>整行</strong>之间移动光标（很常用）。注：Win 的快捷键是「Fn + 左右方向键」</p></li><li><p>「<code>Cmd + Shift + \</code>」：在<strong>代码块</strong>之间移动光标。</p></li></ul><h3 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>option + Backspace</strong></td><td align="left"><strong>Ctrl + Backspace</strong></td><td align="left">删除光标之前的一个单词</td><td align="left">英文有效，很常用</td></tr><tr><td align="left">option + delete</td><td align="left">Ctrl + delete</td><td align="left">删除光标之后的一个单词</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + delete</strong></td><td align="left"></td><td align="left">删除光标之前的整行内容</td><td align="left">很常用</td></tr><tr><td align="left">Cmd + delete</td><td align="left"></td><td align="left">删除光标之后的整行内容</td><td align="left"></td></tr><tr><td align="left">Cmd + shift + K</td><td align="left">Ctrl + Shift + K</td><td align="left">删除整行</td><td align="left">「Cmd + X」的作用是剪切，但也可以删除整行</td></tr></tbody></table><p>备注：上面所讲到的移动光标、删除操作的快捷键，在其他编辑器里，也是同样的操作。</p><h3 id="编辑操作"><a href="#编辑操作" class="headerlink" title="编辑操作"></a>编辑操作</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Cmd + Enter</strong></td><td align="left">Ctrl + Enter</td><td align="left">在当前行下面新增一行，然后跳至该行</td><td align="left">即使光标不在行尾，也能快速向下插入一行</td></tr><tr><td align="left"><strong>Option + ↑</strong></td><td align="left">Alt + ↑</td><td align="left">将代码向上移动</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + ↓</strong></td><td align="left">Alt + ↓</td><td align="left">将代码向下移动</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Shift + ↑</strong></td><td align="left">Alt + Shift + ↑</td><td align="left">将代码向上复制</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Shift + ↓</strong></td><td align="left">Alt + Shift + ↓</td><td align="left">将代码向下复制</td><td align="left">很常用</td></tr></tbody></table><h3 id="JS语言相关"><a href="#JS语言相关" class="headerlink" title="JS语言相关"></a>JS语言相关</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + /</td><td align="left">Ctrl + /</td><td align="left">添加单行注释</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Option + Shift + F</strong></td><td align="left">Alt + shift + F</td><td align="left">代码格式化</td><td align="left">很常用</td></tr><tr><td align="left">Ctrl + J</td><td align="left"></td><td align="left">将多行代码合并为一行</td><td align="left">Win 用户可在命令面板搜索”合并行“</td></tr><tr><td align="left">Cmd +</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">Cmd + U</td><td align="left">Ctrl + U</td><td align="left">将光标的移动回退到上一个位置</td><td align="left">撤销光标的移动和选择</td></tr></tbody></table><h3 id="跳转操作"><a href="#跳转操作" class="headerlink" title="跳转操作"></a>跳转操作</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>Ctrl + Tab</strong></td><td align="left"><strong>Ctrl + Tab</strong></td><td align="left">在已经打开的文件之间进行跳转</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + P</strong></td><td align="left">Ctrl + P</td><td align="left">在当前的项目工程里，<strong>全局</strong>搜索文件</td><td align="left">很常用</td></tr><tr><td align="left"><strong>Ctrl + G</strong></td><td align="left"><strong>Ctrl + G</strong></td><td align="left">跳转到指定行</td><td align="left"></td></tr><tr><td align="left">Cmd + Shift + O</td><td align="left">Ctrl + shift + O</td><td align="left">在当前文件的各种<strong>方法之间</strong>进行跳转</td><td align="left"></td></tr></tbody></table><h3 id="搜索"><a href="#搜索" class="headerlink" title="搜索"></a>搜索</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left">Cmd + F</td><td align="left">Ctrl + F</td><td align="left">在当前文件中搜索，光标在搜索框里</td><td align="left"></td></tr><tr><td align="left"><strong>Cmd + G</strong></td><td align="left"><strong>F3</strong></td><td align="left">在当前文件中搜索，光标仍停留在编辑器里</td><td align="left">很巧妙</td></tr><tr><td align="left"><strong>Cmd + Shift + F</strong></td><td align="left">Ctrl + Shift +F</td><td align="left">全局搜索</td><td align="left">很常用</td></tr></tbody></table><h3 id="多光标的使用"><a href="#多光标的使用" class="headerlink" title="多光标的使用"></a>多光标的使用</h3><p><strong>技巧1</strong>：按住 「Option」键（windows 用户是按住「Alt」键） ，然后在页面中希望中现光标的位置点击鼠标。</p><p><strong>技巧2</strong>：选中某个文本，然后反复按住快捷键「 Cmd + D 」键（windows 用户是按住「Ctrl + D」键）， 即可将全文中与光标当前所在位置的词相同的词逐一加入选择。</p><p><strong>技巧3</strong>：选中一堆文本后，按住「Option + Shift + i」键（windows 用户是按住「Alt + Shift + I」键），既可在<strong>每一行的末尾</strong>都创建一个光标。</p><h3 id="工作区快捷键"><a href="#工作区快捷键" class="headerlink" title="工作区快捷键"></a>工作区快捷键</h3><table><thead><tr><th align="left">Mac快捷键</th><th align="left">Win快捷键</th><th align="left">作用</th><th align="left">备注</th></tr></thead><tbody><tr><td align="left"><strong>cmd +/-</strong></td><td align="left"><strong>ctrl +/-</strong></td><td align="left">将工作区放大/缩小（包括代码字体、左侧导航栏）</td><td align="left">在投影仪场景经常用到</td></tr><tr><td align="left"><strong>Cmd + B</strong></td><td align="left">Ctrl + B</td><td align="left">显示/隐藏侧边栏</td><td align="left">很实用</td></tr><tr><td align="left"><code>Cmd + \</code></td><td align="left"><code>Ctrl + \</code></td><td align="left">创建多个编辑器</td><td align="left">比较实用</td></tr><tr><td align="left"><strong>Cmd + Option + 左右方向键</strong></td><td align="left">Ctrl + Pagedown/Pageup</td><td align="left">在已经打开的文件之间进行<strong>切换</strong></td><td align="left">非常实用</td></tr><tr><td align="left">Ctrl + Tab</td><td align="left">Ctrl + Tab</td><td align="left">在已经打开的文件之间进行跳转</td><td align="left">不如上面的快捷键实用</td></tr><tr><td align="left">Cmd + J</td><td align="left">Ctrl + J</td><td align="left">显示/隐藏控制台</td><td align="left"></td></tr></tbody></table><h3 id="自定义快捷键"><a href="#自定义快捷键" class="headerlink" title="自定义快捷键"></a>自定义快捷键</h3><p>按住快捷键「Cmd + Shift + P」，弹出命令面板，在命令面板中输入“快捷键”，可以进入快捷键的设置。</p><p>当然，你也可以选择菜单栏「偏好设置 –&gt; 键盘快捷方式」，进入快捷键的设置：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190329_2120.png"  alt=""></p><h3 id="快捷键列表"><a href="#快捷键列表" class="headerlink" title="快捷键列表"></a>快捷键列表</h3><p>你可以点击 VS Code 左下角的齿轮按钮，效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1738.png"  alt=""></p><p>上图中，在展开的菜单中选择「键盘快捷方式」，就可以查看和修改所有的快捷键列表了：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1739_2.png"  alt=""></p><h2 id="四、命令面板的使用"><a href="#四、命令面板的使用" class="headerlink" title="四、命令面板的使用"></a>四、命令面板的使用</h2><p>Mac用户按住快捷键 <code>Cmd+Shift+P</code> （Windows用户按住快捷键<code>Ctrl+Shift+P</code>），可以打开命令面板。效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190329_1750_2.png"  alt=""></p><p>如果们需要修改一些设置项，可以通过「命令面板」来操作，效率会更高。这里列举一些。</p><h3 id="字体设置"><a href="#字体设置" class="headerlink" title="字体设置"></a>字体设置</h3><p>在命令面板输入“字体”，可以进行字体的设置，效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190329_2110.png"  alt=""></p><p>当然，你也可以在菜单栏，选择「首选项-设置-常用设置」，在这个设置项里修改字体大小。</p><h3 id="快捷键设置"><a href="#快捷键设置" class="headerlink" title="快捷键设置"></a>快捷键设置</h3><p>在命令面板输入“快捷键”，就可以进入快捷键的设置。</p><h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><p>选中文本后，在命令面板中输入<code>transfrom</code>，就可以修改文本的大小写了。</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190414_1751.png"  alt=""></p><h3 id="使用命令行启动-VS-Code"><a href="#使用命令行启动-VS-Code" class="headerlink" title="使用命令行启动 VS Code"></a>使用命令行启动 VS Code</h3><p>（1）输入快捷键「Cmd + Shift + P 」，选择<code>install code command</code>：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20191103_1327.png"  alt=""></p><p>（2）使用命令行：</p><ul><li><p><code>code</code>命令：启动 VS Code 软件</p></li><li><p><code>code pathName/fileName</code>命令：通过 VS Code 软件打开指定目录/指定文件。</p></li></ul><h2 id="五、VS-Code-的常见设置项"><a href="#五、VS-Code-的常见设置项" class="headerlink" title="五、VS Code 的常见设置项"></a>五、VS Code 的常见设置项</h2><h3 id="1、VS-Code-设置为中文语言"><a href="#1、VS-Code-设置为中文语言" class="headerlink" title="1、VS Code 设置为中文语言"></a>1、VS Code 设置为中文语言</h3><p>Mac用户按住快捷键 <code>Cmd+Shift+P</code> （Windows用户按住快捷键<code>Ctrl+Shift+P</code>），打开命令面板。</p><p>在命令面板中，输入<code>Configure Display Language</code>，选择<code>Install additional languages</code>，然后安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>即可。</p><p>或者，我们可以直接安装插件<code>Chinese (Simplified) Language Pack for Visual Studio Code</code>，是一样的。</p><p>安装完成后，重启VS Code。</p><h3 id="2、面包屑（Breadcrumb）"><a href="#2、面包屑（Breadcrumb）" class="headerlink" title="2、面包屑（Breadcrumb）"></a>2、面包屑（Breadcrumb）</h3><p>打开 VS Code 的设置项，选择「用户设置 -&gt; 工作台 -&gt; 导航路径」，如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20191108_1550.png"  alt=""></p><p>上图中，将红框部分打钩即可。</p><p>设置成功后，我们就可以查看到当前文件的「层级结构」，非常方便。如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190415_2009.png"  alt=""></p><h3 id="3、是否显示代码的行号"><a href="#3、是否显示代码的行号" class="headerlink" title="3、是否显示代码的行号"></a>3、是否显示代码的行号</h3><p>VS Code 默认显示代码的行号。你可以在设置项里搜索 <code>editor.lineNumbers</code>修改设置，配置项如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2140.png"  alt=""></p><p>我建议保留这个设置项，无需修改。</p><h3 id="4、右侧是否显示代码的缩略图"><a href="#4、右侧是否显示代码的缩略图" class="headerlink" title="4、右侧是否显示代码的缩略图"></a>4、右侧是否显示代码的缩略图</h3><p>VS Code 会在代码的右侧，默认显示缩略图。你可以在设置项里搜索 <code>editor.minimap</code>进行设置，配置项如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2156.png"  alt=""></p><h3 id="6、将当前行代码高亮显示（更改光标所在行的背景色）"><a href="#6、将当前行代码高亮显示（更改光标所在行的背景色）" class="headerlink" title="6、将当前行代码高亮显示（更改光标所在行的背景色）"></a>6、将当前行代码高亮显示（更改光标所在行的背景色）</h3><p>当我们把光标放在某一行时，这一行的背景色并没有发生变化。如果想<strong>高亮显示</strong>当前行的代码，需要设置两步：</p><p>（1）在设置项里搜索<code>editor.renderLineHighlight</code>，将选项值设置为<code>all</code>或者<code>line</code>。</p><p>（2）在设置项里增加如下内容：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">"workbench.colorCustomizations": &#123;</span><br><span class="line">    "editor.lineHighlightBackground": "#00000090",</span><br><span class="line">    "editor.lineHighlightBorder": "#00000000"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面两行代码的意思是，修改光标所在行的背景色（背景色设置为全黑，透明度90%），修改光标所在行的边框色。</p><h3 id="7、改完代码后立即自动保存"><a href="#7、改完代码后立即自动保存" class="headerlink" title="7、改完代码后立即自动保存"></a>7、改完代码后立即自动保存</h3><p><strong>方式一</strong>：</p><p>改完代码后，默认不会自动保存。你可以在设置项里搜索<code>files.autoSave</code>，修改配置项如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2216.png"  alt=""></p><p>上图中，我们将配置项修改为<code>onFocusChange</code>之后，那么，当光标离开该文件后，这个文件就会自动保存了。<strong>非常方便</strong>。</p><p><strong>方式二</strong>：</p><p>当然，你也可以直接在菜单栏选择「文件-自动保存」。勾选年后，当你写完代码后，文件会立即实时保存。</p><h3 id="8、保存代码后，是否立即格式化"><a href="#8、保存代码后，是否立即格式化" class="headerlink" title="8、保存代码后，是否立即格式化"></a>8、保存代码后，是否立即格式化</h3><p>保存代码后，默认<strong>不会立即</strong>进行代码的格式化。你可以在设置项里搜索<code>editor.formatOnSave</code>查看该配置项：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2213.png"  alt=""></p><p>我觉得这个配置项保持默认就好，不用打钩。</p><h3 id="9、空格-or-制表符"><a href="#9、空格-or-制表符" class="headerlink" title="9、空格 or 制表符"></a>9、空格 or 制表符</h3><p>VS Code 会根据你所打开的文件来决定该使用空格还是制表。也就是说，如果你的项目中使用的都是制表符，那么，当你在写新的代码时，按下tab 键后，编辑器就会识别成制表符。</p><p>常见的设置项如下：</p><ul><li><strong>editor.detectIndentation</strong>：自动检测（默认开启）。截图如下：</li></ul><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2205.png"  alt=""></p><ul><li><strong>editor.insertSpaces</strong>：按 Tab 键时插入空格（默认）。截图如下：</li></ul><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2207.png"  alt=""></p><ul><li><strong>editor.tabSize</strong>：一个制表符默认等于四个空格。截图如下：</li></ul><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2209.png"  alt=""></p><h3 id="10、新建文件后的默认文件类型"><a href="#10、新建文件后的默认文件类型" class="headerlink" title="10、新建文件后的默认文件类型"></a>10、新建文件后的默认文件类型</h3><p>当我们按下快捷键「Cmd + N」新建文件时，VS Code 默认无法识别这个文件到底是什么类型的，因此也就无法识别相应的语法高亮。如果你想修改默认的文件类型，可以在设置项里搜索<code>files.defaultLanguage</code>，设置项如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190417_2221.png"  alt=""></p><p>上图中的红框部分，填入你期望的默认文件类型。我填的是<code>html</code>类型，你也可以填写成 <code>javascript</code> 或者 <code>markdown</code>，或者其他的语言类型。</p><h3 id="11、删除文件时，是否弹出确认框"><a href="#11、删除文件时，是否弹出确认框" class="headerlink" title="11、删除文件时，是否弹出确认框"></a>11、删除文件时，是否弹出确认框</h3><p>当我们在 VS Code 中删除文件时，默认会弹出确认框。如果你想修改设置，可以在设置项里搜索<code>xplorer.confirmDelete</code>。截图如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1758.png"  alt=""></p><p>我建议这个设置项保持默认的打钩就好，不用修改。删除文件前的弹窗提示，也是为了安全考虑，万一手贱不小心删了呢？</p><h2 id="六、VS-Code-设置-高级进阶"><a href="#六、VS-Code-设置-高级进阶" class="headerlink" title="六、VS Code 设置-高级进阶"></a>六、VS Code 设置-高级进阶</h2><h3 id="1、文件对比"><a href="#1、文件对比" class="headerlink" title="1、文件对比"></a>1、文件对比</h3><p>VS Code 默认支持<strong>对比两个文件的内容</strong>。选中两个文件，然后右键选择「将已选项进行比较」即可，效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190329_1756.png"  alt=""></p><p>VS Code自带的对比功能并不够强大，我们可以安装插件<code>compareit</code>，进行更丰富的对比。比如说，安装完插件<code>compareit</code>之后，我们可以将「当前文件」与「剪切板」里的内容进行对比：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190329_1757.png"  alt=""></p><h3 id="2、查找某个函数在哪些地方被调用了"><a href="#2、查找某个函数在哪些地方被调用了" class="headerlink" title="2、查找某个函数在哪些地方被调用了"></a>2、查找某个函数在哪些地方被调用了</h3><p>比如我已经在<code>a.js</code>文件里调用了 <code>foo()</code>函数。那么，如果我想知道<code>foo()</code>函数在其他文件中是否也被调用了，该怎么做呢？</p><p>做法如下：在 <code>a.js</code> 文件里，选中<code>foo()</code>函数（或者将光标放置在<code>foo()</code>函数上），然后按住快捷键「Shift + F12」，就能看到 <code>foo()</code>函数在哪些地方被调用了，比较实用。</p><h3 id="3、鼠标操作"><a href="#3、鼠标操作" class="headerlink" title="3、鼠标操作"></a>3、鼠标操作</h3><ul><li><p>在当前行的位置，鼠标三击，可以选中当前行。</p></li><li><p>用鼠标单击文件的<strong>行号</strong>，可以选中当前行。</p></li><li><p>在某个<strong>行号</strong>的位置，<strong>上下移动鼠标，可以选中多行</strong>。</p></li></ul><h3 id="4、重构"><a href="#4、重构" class="headerlink" title="4、重构"></a>4、重构</h3><p>重构分很多种，我们来举几个例子。</p><p><strong>1、命名重构</strong>：</p><p>当我们尝试去修改某个函数（或者变量名）时，我们可以把光标放在上面，然后按下「F2」键，那么，这个函数（或者变量名）出现的地方都会被修改。</p><p><strong>2、方法重构</strong>：</p><p>选中某一段代码，这个时候，代码的左侧会出现一个「灯泡图标」，点击这个图标，就可以把这段代码提取为一个单独的函数。</p><h3 id="5、在当前文件中搜索"><a href="#5、在当前文件中搜索" class="headerlink" title="5、在当前文件中搜索"></a>5、在当前文件中搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li><p>Cmd + F（Win用户是Ctrl + F）：在当前文件中搜索，光标在搜索框里</p></li><li><p>Cmd + G（Win用户是 F3）：在当前文件中搜索，光标仍停留在编辑器里</p></li></ul><p>另外，你可能会注意到，搜索框里有很多按钮，每个按钮都对应着不同的功能，如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190415_2052.png"  alt=""></p><p>上图中，你可以通过「Tab」键和「Shift + Tab」键在输入框和替换框之间进行切换。</p><p>「在选定内容中查找」这个功能还是比较实用的。你也可以在设置项里搜索 <code>editor.find.autoFindInSelection</code>，勾选该设置项后，那么，当你选中指定内容后，然后按住「Cmd + F」，就可以<strong>自动</strong>只在这些内容里进行查找。该设置项如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20191108_1655.png"  alt=""></p><h3 id="6、全局搜索"><a href="#6、全局搜索" class="headerlink" title="6、全局搜索"></a>6、全局搜索</h3><p>在上面的快捷键列表中，我们已经知道如下快捷键：</p><ul><li>Cmd + Shift + F（Win用户是Ctrl + Shift +F）：在全局的文件夹中进行搜索。效果如下：</li></ul><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190415_2107.png"  alt=""></p><p>上图中，你可以点击红框部分，展开更多的配置项。</p><h3 id="7、Git版本管理"><a href="#7、Git版本管理" class="headerlink" title="7、Git版本管理"></a>7、Git版本管理</h3><p>VS Code 自带了 Git 版本管理，如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1850.png"  alt=""></p><p>上图中，我们可以在这里进行常见的git 命令操作。如果你还不熟悉 <strong>Git版本管理</strong>，先去补补课吧。</p><p>与此同时，我建议安装插件<code>GitLens</code>，它是 VS Code 中我最推荐的一个插件，简直是Git神器，码农必备。</p><h3 id="8、将工作区放大-缩小"><a href="#8、将工作区放大-缩小" class="headerlink" title="8、将工作区放大/缩小"></a>8、将工作区放大/缩小</h3><p>我们在上面的设置项里修改字体大小后，仅仅只是修改了代码的字体大小。</p><p>如果你想要缩放整个工作区（包括代码的字体、左侧导航栏的字体等），可以按下快捷键「<strong>cmd +/-</strong>」。windows用户是按下「ctrl +/-」</p><p><strong>当我们在给别人演示代码的时候，这一招十分管用</strong>。</p><p>如果你想恢复默认的工作区大小，可以在命令面板输入<code>重置缩放</code>（英文是<code>reset zoom</code>）</p><h3 id="9、创建多层子文件夹"><a href="#9、创建多层子文件夹" class="headerlink" title="9、创建多层子文件夹"></a>9、创建多层子文件夹</h3><p>我们可以在新建文件夹的时候，如果直接输入<code>aa/bb/cc</code>，比如：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_2022.png"  alt=""></p><p>那么，就可以创建多层子文件夹，效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_2023.png"  alt=""></p><h3 id="10、-vscode-文件夹的作用"><a href="#10、-vscode-文件夹的作用" class="headerlink" title="10、.vscode 文件夹的作用"></a>10、.vscode 文件夹的作用</h3><p>如果你发现项目的根目录下有一个<code>.vscode</code>文件夹，说明这个文件夹代表的是当前项目的配置。</p><p>这个文件夹里可能包含以下集中文件：</p><ul><li><p><code>settings.json</code>：工作空间设置。只针对当前项目有效。比如说，我可以在这里面要求当前项目的代码统一使用制表符，而不需要要求每一位码农去修改各自的配置文件。</p></li><li><p><code>sftp.json</code>：ftp文件传输的配置。</p></li></ul><h3 id="11、自带终端"><a href="#11、自带终端" class="headerlink" title="11、自带终端"></a>11、自带终端</h3><p>我们可以按下「Ctrl + `」打开 VS Code 自带的终端。我认为内置终端并没有那么好用，我更建议你使用第三方的终端 <strong>item2</strong>。</p><h3 id="12、markdown语法支持"><a href="#12、markdown语法支持" class="headerlink" title="12、markdown语法支持"></a>12、markdown语法支持</h3><p>VS Code自带 markdown 语法高亮，写完 md 文件之后，你可以点击右上角的按钮进行预览，如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1907.png"  alt=""></p><p>你也可以在控制面板输入<code>Markdown: 打开预览</code>，直接全屏预览 markdown文件。</p><h3 id="13、Emmet-in-VS-Code"><a href="#13、Emmet-in-VS-Code" class="headerlink" title="13、Emmet in VS Code"></a>13、Emmet in VS Code</h3><p><code>Emmet</code>可以极大的提高 html 和 css 的编写效率，它提供了一种非常简练的语法规则。</p><p>举个例子，我们在编辑器中输入缩写代码：<code>ul&gt;li*6</code> ，然后按下 Tab 键，即可得到如下代码片段：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>VS Code 默认支持 Emmet。更多 Emmet 语法规则，请自行查阅。</p><h2 id="七、VS-Code-插件推荐"><a href="#七、VS-Code-插件推荐" class="headerlink" title="七、VS Code 插件推荐"></a>七、VS Code 插件推荐</h2><p>VS Code 有一个很强大的功能就是支持插件扩展。</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20191108_1553_2.png"  alt=""></p><p>上图中，点击红框部分，即可在输入框里，查找你想要的插件名，然后进行安装。</p><p>我来列举几个常见的插件，这些插件都很实用。</p><h3 id="GitLens"><a href="#GitLens" class="headerlink" title="GitLens"></a>GitLens</h3><p>我强烈建议你安装插件<code>GitLens</code>，它是 VS Code 中我最推荐的一个插件，简直是Git神器，码农必备。如果你不知道，那真是out了。</p><p>GitLens 在 Git 管理上有很多强大的功能，比如：</p><ul><li><p>将光标放置在代码的当前行，可以看到这样代码的提交者是谁，以及提交时间。这一点，是 GitLens 最便捷的功能。</p></li><li><p>查看某个 commit 的代码改动记录</p></li><li><p>查看不同的分支</p></li><li><p>可以将两个 commit 进行代码对比</p></li><li><p>甚至可以将两个 branch 分支进行整体的代码对比。这一点，简直是 GitLens 最强大的功能。当我们在不同分支review代码的时候，就可以用到这一招。</p></li></ul><h3 id="Bracket-Pair-Colorizer-2：突出显示成对的括号【荐】"><a href="#Bracket-Pair-Colorizer-2：突出显示成对的括号【荐】" class="headerlink" title="Bracket Pair Colorizer 2：突出显示成对的括号【荐】"></a>Bracket Pair Colorizer 2：突出显示成对的括号【荐】</h3><p><code>Bracket Pair Colorizer 2</code>插件：以不同颜色显示成对的括号，并用连线标注括号范围。</p><p>另外，还有个<code>Rainbow Brackets</code>插件，也可以突出显示成对的括号。</p><h3 id="sftp：文件传输"><a href="#sftp：文件传输" class="headerlink" title="sftp：文件传输"></a>sftp：文件传输</h3><p>如果你需要将本地文件通过 ftp 的形式上传到局域网的服务器，可以安装<code>sftp</code>这个插件，很好用。在公司会经常用到。</p><p>步骤如下：</p><p>（1）安装插件<code>sftp</code>。</p><p>（2）配置 <code>sftp.json</code>文件。 插件安装完成后，输入快捷键「cmd+shift+P」弹出命令面板，然后输入<code>sftp:config</code>，回车，当前工程的<code>.vscode</code>文件夹下就会自动生成一个<code>sftp.json</code>文件，我们需要在这个文件里配置的内容可以是：</p><ul><li><p><code>host</code>：服务器的IP地址</p></li><li><p><code>username</code>：工作站自己的用户名</p></li><li><p><code>privateKeyPath</code>：存放在本地的已配置好的用于登录工作站的密钥文件（也可以是ppk文件）</p></li><li><p><code>remotePath</code>：工作站上与本地工程同步的文件夹路径，需要和本地工程文件根目录同名，且在使用sftp上传文件之前，要手动在工作站上mkdir生成这个根目录</p></li><li><p><code>ignore</code>：指定在使用sftp: sync to remote的时候忽略的文件及文件夹，注意每一行后面有逗号，最后一行没有逗号</p></li></ul><p>举例如下：(注意，其中的注释需要去掉)</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"host"</span>: <span class="string">"192.168.xxx.xxx"</span>,     <span class="comment">//服务器ip</span></span><br><span class="line">    <span class="attr">"port"</span>: <span class="number">22</span>,     <span class="comment">//端口，sftp模式是22</span></span><br><span class="line">    <span class="attr">"username"</span>: <span class="string">""</span>, <span class="comment">//用户名</span></span><br><span class="line">    <span class="attr">"password"</span>: <span class="string">""</span>, <span class="comment">//密码</span></span><br><span class="line">    <span class="attr">"protocol"</span>: <span class="string">"sftp"</span>, <span class="comment">//模式</span></span><br><span class="line">    <span class="attr">"agent"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"privateKeyPath"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"passphrase"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"passive"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"interactiveAuth"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"remotePath"</span>: <span class="string">"/root/node/build/"</span>,  <span class="comment">//服务器上的文件地址</span></span><br><span class="line">    <span class="attr">"context"</span>: <span class="string">"./server/build"</span>,        <span class="comment">//本地的文件地址</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">"uploadOnSave"</span>: <span class="literal">true</span>,   <span class="comment">//监听保存并上传</span></span><br><span class="line">    <span class="attr">"syncMode"</span>: <span class="string">"update"</span>,</span><br><span class="line">    <span class="attr">"watcher"</span>: &#123;            <span class="comment">//监听外部文件</span></span><br><span class="line">        <span class="attr">"files"</span>: <span class="literal">false</span>,     <span class="comment">//外部文件的绝对路径</span></span><br><span class="line">        <span class="attr">"autoUpload"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">"autoDelete"</span>: <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"ignore"</span>: [             <span class="comment">//忽略项</span></span><br><span class="line">        <span class="string">"**/.vscode/**"</span>,</span><br><span class="line">        <span class="string">"**/.git/**"</span>,</span><br><span class="line">        <span class="string">"**/.DS_Store"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（3）在 VS Code的当前文件里，选择「右键 -&gt; upload」，就可以将本地的代码上传到 指定的 ftp 服务器上（也就是在上方 <code>host</code> 中配置的服务器ip）。</p><p>我们还可以选择「右键 -&gt; Diff with Remote」，就可以将本地的代码和 ftp 服务器上的代码做对比。</p><h3 id="Project-Manager"><a href="#Project-Manager" class="headerlink" title="Project Manager"></a>Project Manager</h3><p>工作中，我们经常会来回切换多个项目，每次都要找到对应项目的目录再打开，比较麻烦。Project Manager插件可以解决这样的烦恼，它提供了专门的视图来展示你的项目，我们可以把常用的项目保存在这里，需要时一键切换，十分方便。</p><h3 id="open-in-browser"><a href="#open-in-browser" class="headerlink" title="open in browser"></a>open in browser</h3><p>安装<code>open in browser</code>插件后，在 HTML 文件中「右键选择 –&gt; Open in Default Browser」，即可在浏览器中预览网页。</p><h3 id="highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】"><a href="#highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】" class="headerlink" title="highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】"></a>highlight-icemode：选中相同的代码时，让高亮显示更加明显【荐】</h3><p>VSCode自带的高亮显示，实在是不够显眼。用插件支持一下吧。</p><p>所用了这个插件之后，VS Code自带的高亮就可以关掉了：</p><p>在用户设置里添加<code>&quot;editor.selectionHighlight&quot;: false</code>即可。</p><p>参考链接：<a href="https://blog.csdn.net/palmer_kai/article/details/79548164" target="_blank" rel="noopener">vscode 选中后相同内容高亮插件推荐</a></p><h3 id="Color-Manager"><a href="#Color-Manager" class="headerlink" title="Color Manager"></a>Color Manager</h3><p>css 颜色管理。</p><h3 id="TODO-Highlight"><a href="#TODO-Highlight" class="headerlink" title="TODO Highlight"></a>TODO Highlight</h3><p>写代码过程中，突然发现一个Bug，但是又不想停下来手中的活，以免打断思路，怎么办？按照代码规范，我们一般是在代码中加个TODO注释。比如：（注意，一定要写成大写<code>TODO</code>，而不是小写的<code>todo</code>）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;TODO:这里有个bug，我一会儿再收拾你</span><br></pre></td></tr></table></figure><p>或者：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;FIXME:我也不知道为啥， but it works only that way.</span><br></pre></td></tr></table></figure><p>安装了插件 <code>TODO Highlight</code>之后，按住「Cmd + Shift + P」打开命令面板，输入「Todohighlist」，选择相关的命令，我们就可以看到一个 todoList 的清单。</p><h3 id="WakaTime"><a href="#WakaTime" class="headerlink" title="WakaTime"></a>WakaTime</h3><p>统计写代码的时间。</p><h3 id="Code-Time"><a href="#Code-Time" class="headerlink" title="Code Time"></a>Code Time</h3><p><code>Code Time</code>插件：记录编程时间，统计代码行数。摸鱼必备。</p><p>安装该插件后，VS Code 底部的状态栏右下角可以看到时间统计。点击那个位置之后，选择「Code Time Dashboard」，即可查看统计结果。</p><p>备注：团长试了一下这个 code time 插件，发现统计结果不是很准。</p><h3 id="Markdown-Preview-Github-Styling"><a href="#Markdown-Preview-Github-Styling" class="headerlink" title="Markdown Preview Github Styling"></a>Markdown Preview Github Styling</h3><p>以 GitHub 风格预览 Markdown 样式。</p><h3 id="Settings-Sync"><a href="#Settings-Sync" class="headerlink" title="Settings Sync"></a>Settings Sync</h3><ul><li><p>地址：<a href="https://github.com/shanalikhan/code-settings-sync" target="_blank" rel="noopener">https://github.com/shanalikhan/code-settings-sync</a></p></li><li><p>作用：多台设备之间，同步 VS Code 配置。通过登录 GitHub 账号来使用这个同步工具。</p></li></ul><h3 id="vscode-syncing"><a href="#vscode-syncing" class="headerlink" title="vscode-syncing"></a>vscode-syncing</h3><ul><li><p>地址：<a href="https://github.com/nonoroazoro/vscode-syncing" target="_blank" rel="noopener">https://github.com/nonoroazoro/vscode-syncing</a></p></li><li><p>作用：多台设备之间，同步 VS Code 配置。</p></li></ul><h3 id="indent-rainbow：突出显示缩进"><a href="#indent-rainbow：突出显示缩进" class="headerlink" title="indent-rainbow：突出显示缩进"></a>indent-rainbow：突出显示缩进</h3><p><code>indent-rainbow</code>插件：突出显示缩进。</p><p>安装完成后，效果如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1958.png"  alt=""></p><h3 id="RemoteHub"><a href="#RemoteHub" class="headerlink" title="RemoteHub"></a>RemoteHub</h3><p>不要惊讶，RemoteHub 和 GitLens 是同一个作者开发出来的。</p><p><code>RemoteHub</code>插件的作用是：可以在本地查看 GitHub 网站上的代码，而不需要将代码下载到本地。</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_1937.png"  alt=""></p><p>这个插件目前使用的人还不多，赶紧安装起来尝尝鲜吧。</p><h3 id="Live-Share：实时编码分享"><a href="#Live-Share：实时编码分享" class="headerlink" title="Live Share：实时编码分享"></a>Live Share：实时编码分享</h3><p><code>Live Share</code>这个神奇的插件是由微软官方出品，它的作用是：<strong>实时编码分享</strong>。也就是说，它可以实现你和你的同伴一起写代码。这绝对就是<strong>结对编程</strong>的神器啊。</p><p>安装方式：</p><p>打开插件管理，搜索“live share”，安装。安装后重启 VS Code，在左侧会多出一个按钮：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_2012.png"  alt=""></p><p>上图中，点击红框部分，登录后就可以分享你的工作空间了。</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20190418_2005.png"  alt=""></p><h3 id="vscode-pigments"><a href="#vscode-pigments" class="headerlink" title="vscode-pigments"></a>vscode-pigments</h3><p>css颜色高亮显示。</p><h2 id="八、主题插件"><a href="#八、主题插件" class="headerlink" title="八、主题插件"></a>八、主题插件</h2><ul><li><p><a href="https://marketplace.visualstudio.com/items?itemName=zhuangtongfa.Material-theme" target="_blank" rel="noopener">One Dark Pro</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=akarlsten.vscode-snazzy-akarlsten" target="_blank" rel="noopener">Snazzy Plus</a></p></li><li><p><a href="https://marketplace.visualstudio.com/items?itemName=alexanderte.dainty-vscode" target="_blank" rel="noopener">Dainty</a></p></li><li><p><code>SynthWave &#39;84</code></p></li></ul><blockquote><p><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">转载连接</a></p></blockquote><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><p><a href="https://juejin.im/post/5d74eb5c51882525017787d9" target="_blank" rel="noopener">VS Code 折腾记 - (16) 推荐一波实用的插件集</a></p></li><li><p><a href="https://juejin.im/post/5db66672f265da4d0e009aad" target="_blank" rel="noopener">VSCode前端必备插件，有可能你装了却不知道如何使用？</a></p></li><li><p><a href="https://juejin.im/post/5a08d1d6f265da430f31950e" target="_blank" rel="noopener">能让你开发效率翻倍的 VSCode 插件配置（上）</a></p></li><li><p><a href="https://segmentfault.com/a/1190000012811886" target="_blank" rel="noopener">https://segmentfault.com/a/1190000012811886</a></p></li><li><p><a href="https://idoubi.cc/2019/07/08/vscode-sublime-theme/" target="_blank" rel="noopener">「Vscode」打造类sublime的高颜值编辑器</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;VS Code  本来是前端人员专用，但由于它实在是太好用了，于是，各种开发方向的码农也正在用 VS Code 作为他们的主力编程工具。甚至是一些写作的同学，也把 VS Code 作为 markdown 写作工具。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端工具" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="VS Code" scheme="http://wangzc.wang/tags/VS-Code/"/>
    
  </entry>
  
  <entry>
    <title>cordova+vue-cli4构建app</title>
    <link href="http://wangzc.wang/2017/12/11/cordova-vue-cli4-build-app/"/>
    <id>http://wangzc.wang/2017/12/11/cordova-vue-cli4-build-app/</id>
    <published>2017-12-11T14:15:52.000Z</published>
    <updated>2020-04-16T16:39:56.500Z</updated>
    
    <content type="html"><![CDATA[<img src="/" class="lazyload" data-src="cordova_bot.png"   ><p>本文会详细的介绍如何使用cordova来打包vue项目，生成app（android）</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><p>你将学会：</p><ul><li>基于cordova构建vue项目app</li><li>自定义app名字/图标/启动页图片</li><li>自动构建脚本</li></ul><blockquote><p>Cordova<a href="https://cordova.axuer.com/docs/zh-cn/latest/guide/overview/" target="_blank" rel="noopener">(中文官网详细介绍)</a>是一个开源的移动开发框架。允许你用标准的web技术-HTML5,CSS3和JavaScript做跨平台开发,应用的实现是通过web页面，默认的本地文件名称是index.html<br>大体思路就是把打包好的vue项目放在cordova的Web App中来启动；我们开始吧</p></blockquote><h3 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h3><ul><li>Java SDK 8(cordova最高支持到8)<a href="https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html" target="_blank" rel="noopener">下载地址</a><ul><li><a href="https://www.runoob.com/java/java-environment-setup.html" target="_blank" rel="noopener">window环境配置</a></li><li><a href="https://www.runoob.com/w3cnote/win7-linux-java-setup.html" target="_blank" rel="noopener">linux环境配置</a></li><li><a href="https://java.com/en/download/help/mac_install.xml" target="_blank" rel="noopener">mac Os环境配置</a></li></ul></li><li><a href="https://gradle.org/install/" target="_blank" rel="noopener">Gradle</a></li><li><a href="https://cordova.axuer.com/" target="_blank" rel="noopener">Cordova 8.0</a></li><li><a href="http://nodejs.cn/" target="_blank" rel="noopener">Node</a></li><li><a href="https://cli.vuejs.org/zh/" target="_blank" rel="noopener">vue-cli</a></li><li><a href="https://cordova.axuer.com/docs/zh-cn/latest/guide/platforms/android/index.html" target="_blank" rel="noopener">Android Studio /Android SDK</a><ul><li><a href="https://developer.android.com/studio?pkg=tools" target="_blank" rel="noopener">Android Studio</a></li><li><a href="https://developer.android.com/studio?pkg=tools" target="_blank" rel="noopener">Android SDK</a></li></ul></li></ul><h4 id="懶人下載包-提取码：gws8"><a href="#懶人下載包-提取码：gws8" class="headerlink" title="懶人下載包(提取码：gws8)"></a>懶人下載包(提取码：gws8)</h4><p><a href="https://pan.baidu.com/s/1FjGzpI1wTgkhz309EaSuLQ" target="_blank" rel="noopener">java8+Android Studio+Gradle</a></p><h3 id="验证环境"><a href="#验证环境" class="headerlink" title="验证环境"></a>验证环境</h3><img src="/" class="lazyload" data-src="a.jpeg"  width="70%" >项目目录<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cordova</span><br><span class="line">│   cordova-project</span><br><span class="line">│   my-app</span><br></pre></td></tr></table></figure>这里把cordova项目和vue项目平级存放，也可以嵌套（自行看情况）<h3 id="新建cordova项目"><a href="#新建cordova项目" class="headerlink" title="新建cordova项目"></a>新建cordova项目</h3><h4 id="新建cordova目录-在cordova文件夹下新建cordova项目"><a href="#新建cordova目录-在cordova文件夹下新建cordova项目" class="headerlink" title="新建cordova目录,在cordova文件夹下新建cordova项目"></a>新建cordova目录,在cordova文件夹下新建cordova项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mkdir cordova</span><br><span class="line">cd cordova</span><br><span class="line">cordova create cordova-project</span><br></pre></td></tr></table></figure><h4 id="添加Android平台"><a href="#添加Android平台" class="headerlink" title="添加Android平台"></a>添加Android平台</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cordova-project</span><br><span class="line">cordova platform add android --save</span><br></pre></td></tr></table></figure><blockquote><p>要构建和运行App，你需要安装每个你需要平台的SDK。另外，当你使用浏览器开发你可以添加 browser平台，它不需要任何平台SDK。</p></blockquote><h4 id="检测你是否满足构建平台的要求"><a href="#检测你是否满足构建平台的要求" class="headerlink" title="检测你是否满足构建平台的要求:"></a>检测你是否满足构建平台的要求:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova requirements</span><br></pre></td></tr></table></figure><img src="/" class="lazyload" data-src="b.jpeg"  width="100%" ><h4 id="打包app安装到手机上（前提是手机连上电脑并开启USB调试模式）"><a href="#打包app安装到手机上（前提是手机连上电脑并开启USB调试模式）" class="headerlink" title="打包app安装到手机上（前提是手机连上电脑并开启USB调试模式）"></a>打包app安装到手机上（前提是手机连上电脑并开启USB调试模式）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova run android</span><br></pre></td></tr></table></figure><p>或者只是打包apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>apk生成目录：cordova-project/platforms/android/app/build/outputs/apk/debug/app-debug.apk</p><p>默认生成的cordova app 图标：<br><img src="/" class="lazyload" data-src="c.jpeg"   ></p><p>运行界面：<br><img src="/" class="lazyload" data-src="d.jpeg"  width="50%" ></p><p>进行到这里的时候，cordova部分先告一段落，下面开始第二部分</p><h3 id="新建vue项目"><a href="#新建vue项目" class="headerlink" title="新建vue项目"></a>新建vue项目</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd cordova</span><br><span class="line">vue create my-app</span><br><span class="line">&#x2F;&#x2F;配置里我们选择默认项就行default (babel, eslint)</span><br><span class="line">cd my-app</span><br><span class="line">npm install </span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><h4 id="浏览器运行vue项目界面："><a href="#浏览器运行vue项目界面：" class="headerlink" title="浏览器运行vue项目界面："></a>浏览器运行vue项目界面：</h4><img src="/" class="lazyload" data-src="e.jpeg"  width="30%"><h4 id="打包vue项目"><a href="#打包vue项目" class="headerlink" title="打包vue项目"></a>打包vue项目</h4><p>配置<a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">vue.config.js</a><br>my-app目录下新建vue.config.js（这里只做路径配置，其他配置项可详情<a href="https://cli.vuejs.org/zh/config/" target="_blank" rel="noopener">vue.config.js</a>）</p><blockquote><p>默认情况下，cordova create命令生成基于web的应用程序的骨骼，项目的主页是 www/index.html 文件。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#39;use strict&#39;</span><br><span class="line"></span><br><span class="line">module.exports &#x3D; &#123;</span><br><span class="line">  publicPath: &#39;.&#x2F;&#39;,</span><br><span class="line">&#x2F;&#x2F;这个值也可以被设置为空字符串 (&#39;&#39;) 或是相对路径 (&#39;.&#x2F;&#39;)，这样所有的资源都会被链接为相对路径，这样打出来的包可以被部署在任意路径，也可以用在类似 Cordova hybrid 应用的文件系统中。</span><br><span class="line">  outputDir: &#39;..&#x2F;cordova-project&#x2F;www&#39;,</span><br><span class="line">&#x2F;&#x2F;将打包目录指向&#x2F;cordova-projec下的www</span><br><span class="line">  productionSourceMap: false,</span><br><span class="line">&#x2F;&#x2F;如果你不需要生产环境的 source map，可以将其设置为 false 以加速生产环境构建。</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置好之后我们进行打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><h4 id="打包apk安装到手机上"><a href="#打包apk安装到手机上" class="headerlink" title="打包apk安装到手机上"></a>打包apk安装到手机上</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cordova-project</span><br><span class="line">cordova run android</span><br></pre></td></tr></table></figure><p>或者是打包apk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cordova-project </span><br><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>运行至手机界面：<br><img src="/" class="lazyload" data-src="f.jpeg"  width="30%"></p><h3 id="浏览器调试app"><a href="#浏览器调试app" class="headerlink" title="浏览器调试app"></a>浏览器调试app</h3><p>运行<code>cordova run android</code>后，app会装到手机上<br>谷歌浏览器输入：chrome://inspect/#devices<br>看到如下界面：<br><img src="/" class="lazyload" data-src="g.jpeg"  width="70%"></p><p>找到自己的设备（手机中也需要运行app），点击inspect，接下来就可以调试样式了<br><img src="/" class="lazyload" data-src="h.jpeg"  width="70%"></p><h3 id="更换app图标以及app名字以及app启动页"><a href="#更换app图标以及app名字以及app启动页" class="headerlink" title="更换app图标以及app名字以及app启动页"></a>更换app图标以及app名字以及app启动页</h3><p>先随便准备2张图片（图标以及启动页图片）</p><h4 id="更改图标："><a href="#更改图标：" class="headerlink" title="更改图标："></a>更改图标：</h4><img class="lazyload" data-src="i.jpeg"  src="/" ><p>进入文件夹：<code>cordova/cordova-project/res/icon/android</code><br>将图片进行替换即可（名字/图片格式推荐png）<br><img src="/" class="lazyload" data-src="j.jpeg"  width="70%"></p><p>替换为：<br><img src="/" class="lazyload" data-src="k.jpeg"  width="70%"></p><h4 id="更改启动页图片："><a href="#更改启动页图片：" class="headerlink" title="更改启动页图片："></a>更改启动页图片：</h4><img src="/" class="lazyload" data-src="l.jpeg"  width="40%"><p>安装splashscreen插件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd cordova-project</span><br><span class="line">cordova plugin add cordova-plugin-splashscreen</span><br></pre></td></tr></table></figure><p>进入文件夹：<code>/cordova/cordova-project/res/screen/android</code><br>将图片进行替换即可,这里只替换了竖屏的（名字/图片格式推荐png）<br><img src="/" class="lazyload" data-src="m.jpeg"  width="70%"></p><p>替换为<br><img src="/" class="lazyload" data-src="n.jpeg"  width="70%"></p><ul><li>打开<code>config.xml</code><h4 id="更改名字-name标签内的内容进行更改即可"><a href="#更改名字-name标签内的内容进行更改即可" class="headerlink" title="更改名字(name标签内的内容进行更改即可)"></a>更改名字(name标签内的内容进行更改即可)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;name&gt;vueApp&lt;&#x2F;name&gt;</span><br></pre></td></tr></table></figure><h4 id="更改配置项"><a href="#更改配置项" class="headerlink" title="更改配置项"></a>更改配置项</h4>添加图标以及启动页，在<code>&lt;platform name=&quot;android&quot;&gt; &lt;/platform&gt;</code>添加如下代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;platform name&#x3D;&quot;android&quot;&gt;</span><br><span class="line">     &lt;allow-intent href&#x3D;&quot;market:*&quot; &#x2F;&gt;</span><br><span class="line">     &lt;icon density&#x3D;&quot;ldpi&quot; src&#x3D;&quot;res&#x2F;icon&#x2F;android&#x2F;icon-36-ldpi.jpg&quot; &#x2F;&gt;</span><br><span class="line">     &lt;icon density&#x3D;&quot;mdpi&quot; src&#x3D;&quot;res&#x2F;icon&#x2F;android&#x2F;icon-48-mdpi.jpg&quot; &#x2F;&gt;</span><br><span class="line">     &lt;icon density&#x3D;&quot;hdpi&quot; src&#x3D;&quot;res&#x2F;icon&#x2F;android&#x2F;icon-72-hdpi.jpg&quot; &#x2F;&gt;</span><br><span class="line">     &lt;icon density&#x3D;&quot;xhdpi&quot; src&#x3D;&quot;res&#x2F;icon&#x2F;android&#x2F;icon-96-xhdpi.jpg&quot; &#x2F;&gt;</span><br><span class="line">     &lt;splash density&#x3D;&quot;port-ldpi&quot; src&#x3D;&quot;res&#x2F;screen&#x2F;android&#x2F;screen-ldpi-portrait.png&quot; &#x2F;&gt;</span><br><span class="line">     &lt;splash density&#x3D;&quot;port-mdpi&quot; src&#x3D;&quot;res&#x2F;screen&#x2F;android&#x2F;screen-mdpi-portrait.png&quot; &#x2F;&gt;</span><br><span class="line">     &lt;splash density&#x3D;&quot;port-hdpi&quot; src&#x3D;&quot;res&#x2F;screen&#x2F;android&#x2F;screen-hdpi-portrait.png&quot; &#x2F;&gt;</span><br><span class="line">     &lt;splash density&#x3D;&quot;port-xhdpi&quot; src&#x3D;&quot;res&#x2F;screen&#x2F;android&#x2F;screen-xhdpi-portrait.png&quot; &#x2F;&gt;</span><br><span class="line">     &lt;preference name&#x3D;&quot;ShowSplashScreenSpinner&quot; value&#x3D;&quot;false&quot; &#x2F;&gt;&lt;!-- 启动页面淡入淡出的效果 --&gt;</span><br><span class="line"> &lt;&#x2F;platform&gt;</span><br></pre></td></tr></table></figure><ul><li>打包查看<br>图标以及名字：<img class="lazyload" data-src="o.jpeg"  src="/" ></li></ul><p>启动页：<br><img src="/" class="lazyload" data-src="p.jpeg"  width="40%"></p><h3 id="自动构建脚本（shell）"><a href="#自动构建脚本（shell）" class="headerlink" title="自动构建脚本（shell）"></a>自动构建脚本（shell）</h3><p>每次打包需要执行如下命令，很麻烦</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd cordova&#x2F;my-app</span><br><span class="line">npm install</span><br><span class="line">npm run build</span><br><span class="line">cd ..&#x2F;cordova-project</span><br><span class="line">cordova build android &#x2F;cordova run android</span><br></pre></td></tr></table></figure><p>我们可以在cordova目录下新建build.sh文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line">#!&#x2F;usr&#x2F;bin&#x2F;env bash</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PLATFORM&#x3D;android</span><br><span class="line">#!1(not clean)   0(clean)</span><br><span class="line">TYPE&#x3D;build</span><br><span class="line">#!(-d)debug   build</span><br><span class="line">TYPE&#x3D;$1</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">function echo_action() &#123;</span><br><span class="line">    INFO_START&#x3D;&#39;\033[1;36m&#39;</span><br><span class="line">    INFO_END&#x3D;&#39;\033[0m&#39;</span><br><span class="line">    echo -e &quot;\xF0\x9F\x90\xB6 $&#123;INFO_START&#125;$1$&#123;INFO_END&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function echo_info() &#123;</span><br><span class="line">    INFO_START&#x3D;&#39;\033[1;32m&#39;</span><br><span class="line">    INFO_END&#x3D;&#39;\033[0m&#39;</span><br><span class="line">    echo -e &quot;\xF0\x9F\x92\x9A $&#123;INFO_START&#125;$1$&#123;INFO_END&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function echo_warn() &#123;</span><br><span class="line">    INFO_START&#x3D;&#39;\033[1;33m&#39;</span><br><span class="line">    INFO_END&#x3D;&#39;\033[0m&#39;</span><br><span class="line">    echo -e &quot;\xF0\x9F\x92\x9B $&#123;INFO_START&#125;$1$&#123;INFO_END&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function echo_err() &#123;</span><br><span class="line">    INFO_START&#x3D;&#39;\033[1;31m&#39;</span><br><span class="line">    INFO_END&#x3D;&#39;\033[0m&#39;</span><br><span class="line">    echo -e &quot;\xF0\x9F\x92\x94 $&#123;INFO_START&#125;$1$&#123;INFO_END&#125;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function addAndroidPlatform() &#123;</span><br><span class="line">    echo_action &quot;Start add android platform ...&quot;</span><br><span class="line">     cordova platform add android</span><br><span class="line">    if [ &quot;$?&quot; !&#x3D; &quot;0&quot; ]; then</span><br><span class="line">        return 1</span><br><span class="line">    fi</span><br><span class="line">    return 0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function installDependencesCordova() &#123;</span><br><span class="line">    echo_action &quot;Installing Cordova dependences ...&quot;</span><br><span class="line">    npm install</span><br><span class="line">    echo_info &quot; Cordova Dependences installed&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function installDependences() &#123;</span><br><span class="line">    echo_action &quot;Installing dependences ...&quot;</span><br><span class="line">    echo_action &quot;cd .&#x2F;my-app&quot;</span><br><span class="line">    cd .&#x2F;my-app</span><br><span class="line">    npm install</span><br><span class="line">    echo_info &quot;Dependences installed&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function buildWebapp() &#123;</span><br><span class="line">    echo_action &quot;Start building my-app...&quot;</span><br><span class="line">    npm run build</span><br><span class="line">    echo_info &quot;Build Command:  npm run build&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function installPlugins() &#123;</span><br><span class="line">    addAndroidPlatform</span><br><span class="line">    echo_info &quot;Install App Updater plugin finished&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function buildApk() &#123;</span><br><span class="line">    echo_action &quot;Start building ...&quot;</span><br><span class="line">    if [ &quot;$&#123;TYPE&#125;&quot; &#x3D;&#x3D; &quot;debug&quot; ]; then</span><br><span class="line">          cordova run android</span><br><span class="line">          echo_info &quot;Build Command:  cordova run android&quot;</span><br><span class="line">    else</span><br><span class="line">        cordova build android</span><br><span class="line">         echo_info &quot;Build Command:  cordova build android&quot;</span><br><span class="line">    fi</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo_info &quot;Build for $&#123;PLATFORM&#125;&quot;</span><br><span class="line">if [ &quot;$&#123;TYPE&#125;&quot; &#x3D;&#x3D; &quot;debug&quot; ]; then</span><br><span class="line">        echo_info &quot;Build Command:  cordova run android&quot;</span><br><span class="line">else</span><br><span class="line">        echo_info &quot;Build Command:  cordova build android&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">installDependences</span><br><span class="line">if [ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]; then</span><br><span class="line">    echo_info &quot;All dependences have been installed successfully.&quot;</span><br><span class="line">else</span><br><span class="line">    echo_err &quot;Failed to install dependences.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">buildWebapp</span><br><span class="line">if [ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]; then</span><br><span class="line">    echo_info &quot;All things done successfully.&quot;</span><br><span class="line">else</span><br><span class="line">    echo_err &quot;Build failed.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo_action &quot;cd ..&#x2F;cordova-project&quot;</span><br><span class="line">cd ..&#x2F;cordova-project</span><br><span class="line"></span><br><span class="line">installPlugins</span><br><span class="line">if [ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]; then</span><br><span class="line">    echo_info &quot;All plugins have been installed successfully.&quot;</span><br><span class="line">else</span><br><span class="line">    echo_err &quot;Failed to install plugins.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">installDependencesCordova</span><br><span class="line">if [ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]; then</span><br><span class="line">    echo_info &quot;All dependences have been installed successfully..&quot;</span><br><span class="line">else</span><br><span class="line">    echo_err &quot;Failed to install dependences.&quot;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">buildApk</span><br><span class="line">if [ &quot;$?&quot; &#x3D;&#x3D; &quot;0&quot; ]; then</span><br><span class="line">    echo_info &quot;All things done successfully.&quot;</span><br><span class="line">else</span><br><span class="line">    echo_err &quot;Build failed.&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>这样我们下次就可以</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd cordova</span><br><span class="line">.&#x2F;build.sh build &#x2F;&#x2F;打包apk</span><br><span class="line">.&#x2F;build.sh debug &#x2F;&#x2F;调试至手机</span><br></pre></td></tr></table></figure><h3 id="vue中使用cordova-详情vue-cordova"><a href="#vue中使用cordova-详情vue-cordova" class="headerlink" title="vue中使用cordova,详情vue-cordova"></a>vue中使用cordova,详情<a href="https://github.com/kartsims/vue-cordova" target="_blank" rel="noopener">vue-cordova</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;cordova_bot.png&quot;  &gt;

&lt;p&gt;本文会详细的介绍如何使用cordova来打包vue项目，生成app（android）&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>html单行、多行文本溢出隐藏</title>
    <link href="http://wangzc.wang/2017/11/19/line-lineoverflow/"/>
    <id>http://wangzc.wang/2017/11/19/line-lineoverflow/</id>
    <published>2017-11-19T15:58:35.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<p>html文本移除应该如何进行隐藏并显示省略号呢？</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h2 id="单行文本溢出隐藏"><a href="#单行文本溢出隐藏" class="headerlink" title="单行文本溢出隐藏"></a>单行文本溢出隐藏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">div&#123;<span class="comment">/* 单行溢出隐藏 */</span></span><br><span class="line">            width: <span class="number">150</span>px;</span><br><span class="line">            white-space: nowrap;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">            text-overflow: ellipsis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多行文本溢出隐藏"><a href="#多行文本溢出隐藏" class="headerlink" title="多行文本溢出隐藏"></a>多行文本溢出隐藏</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">div&#123;<span class="comment">/* 多行溢出隐藏 */</span></span><br><span class="line">            width: <span class="number">150</span>px;</span><br><span class="line">             display: -webkit-box;</span><br><span class="line">            -webkit-box-orient: vertical;</span><br><span class="line">            -webkit-line-clamp: <span class="number">3</span>;</span><br><span class="line">            overflow: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：</p><p>-webkit-line-clamp用来限制在一个块元素显示的文本的行数。<br>为了实现该效果，它需要组合其他的WebKit属性。常见结合属性：<br>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。<br>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;html文本移除应该如何进行隐藏并显示省略号呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="html" scheme="http://wangzc.wang/tags/html/"/>
    
  </entry>
  
  <entry>
    <title>javascript变量的数据类型</title>
    <link href="http://wangzc.wang/2017/05/14/03-JS-dataType/"/>
    <id>http://wangzc.wang/2017/05/14/03-JS-dataType/</id>
    <published>2017-05-14T15:59:27.000Z</published>
    <updated>2020-04-16T16:39:56.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="变量的数据类型"><a href="#变量的数据类型" class="headerlink" title="变量的数据类型"></a>变量的数据类型</h2><h3 id="为什么需要数据类型"><a href="#为什么需要数据类型" class="headerlink" title="为什么需要数据类型"></a>为什么需要数据类型</h3><p>在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数据类型，寓意也不同。</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><p>我们都知道，无论这个变量是字符串类型，还是数字类型，我们都可以直接用 <code>var</code> 去定义它。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">'hello word'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">123</span>;</span><br></pre></td></tr></table></figure><p>为什么可以这样做呢？这是因为：JavaScript 是一种「弱类型语言」，或者说是一种「动态语言」，这意味着不需要提前声明变量的类型，在程序运行过程中，类型会自动被确定。</p><p><strong>JS 的变量数据类型，是在程序运行的过程中，根据等号右边的值来确定的</strong>。而且，变量的数据类型是可以变化的。比如说：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'qianguyihao'</span>;</span><br><span class="line"></span><br><span class="line">name = <span class="number">123</span>; <span class="comment">// 强制将变量 name 修改为 数字类型</span></span><br></pre></td></tr></table></figure><h3 id="JS中一共有六种数据类型"><a href="#JS中一共有六种数据类型" class="headerlink" title="JS中一共有六种数据类型"></a>JS中一共有六种数据类型</h3><ul><li><p><strong>基本数据类型（值类型）</strong>：String 字符串、Number 数值、Boolean 布尔值、Null 空值、Undefined 未定义。</p></li><li><p><strong>引用数据类型（引用类型）</strong>：Object 对象。</p></li></ul><p>注意：内置对象 Function、Array、Date、RegExp、Error等都是属于 Object 类型。也就是说，除了那五种基本数据类型之外，其他的，都称之为 Object类型。</p><blockquote><p>面试问：引用数据类型有几种？</p></blockquote><blockquote><p>面试答：只有一种，即 Object 类型。</p></blockquote><p><strong>数据类型之间最大的区别</strong>：</p><ul><li><p>基本数据类型：参数赋值的时候，传数值。</p></li><li><p>引用数据类型：参数赋值的时候，传地址（修改的同一片内存空间）。</p></li></ul><p>今天这篇文章，我们详细讲一下基本数据类型。</p><h2 id="String-字符串"><a href="#String-字符串" class="headerlink" title="String 字符串"></a>String 字符串</h2><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>字符串型可以是引号中的任意文本，其语法为：双引号 <code>&quot;&quot;</code> 或者单引号 <code>&#39;&#39;</code>。</p><p>来看个示例。下面的这些，都是字符串：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"abcde"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="string">"千古壹号"</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="string">"123123"</span>;</span><br><span class="line"><span class="keyword">var</span> d = <span class="string">'哈哈哈哈哈'</span>;</span><br><span class="line"><span class="keyword">var</span> e = <span class="string">""</span>;     <span class="comment">//空字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> f = haha; <span class="comment">// 没使用引号，到这里会直接报错。因为会被认为是js代码，但是之前并没有定义 haha。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> b);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> c);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> d);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> e);</span><br></pre></td></tr></table></figure><p>控制台输出如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">string</span><br><span class="line">string</span><br><span class="line">string</span><br><span class="line">string</span><br><span class="line">string</span><br></pre></td></tr></table></figure><h3 id="引号的注意事项"><a href="#引号的注意事项" class="headerlink" title="引号的注意事项"></a>引号的注意事项</h3><p>1、单引号和双引号不能混用。比如下面这样写是不可以的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello";  // 报错：Uncaught SyntaxError: Invalid or unexpected token</span></span><br></pre></td></tr></table></figure><p>2、同类引号不能嵌套：双引号里不能再放双引号，单引号里不能再放单引号。</p><p>3、单引号里可以嵌套双引号；双引号里可以嵌套单引号。</p><h3 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h3><p>在字符串中我们可以使用<code>\</code>作为转义字符，当表示一些特殊符号时可以使用<code>\</code>进行转义。</p><ul><li><p><code>\&quot;</code> 表示 <code>&quot;</code></p></li><li><p><code>\&#39;</code> 表示 <code>&#39;</code></p></li><li><p><code>\\</code> 表示<code>\</code></p></li><li><p><code>\r</code> 表示回车</p></li><li><p><code>\n</code> 表示换行。n 的意思是 newline。</p></li><li><p><code>\t</code> 表示缩进。t 的意思是 tab。</p></li><li><p><code>\b</code> 表示空格。b 的意思是 blank。</p></li></ul><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">"我说:\"今天\t天气真不错！\""</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">"\\\\\\"</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br></pre></td></tr></table></figure><p>上方代码的打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">我说:&quot;今天天气真不错！&quot;</span><br><span class="line">\\\</span><br></pre></td></tr></table></figure><h3 id="获取字符串的长度"><a href="#获取字符串的长度" class="headerlink" title="获取字符串的长度"></a>获取字符串的长度</h3><p>字符串是由若干个字符组成的，这些字符的数量就是字符串的长度。我们可以通过字符串的 length 属性可以获取整个字符串的长度。</p><p>代码举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'千古壹号'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'千古壹号，永不止步！'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'qianguyihao'</span>;</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'qianguyihao, keep moving!'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1.length); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(str2.length); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(str3.length); <span class="comment">// 11</span></span><br><span class="line"><span class="built_in">console</span>.log(str4.length); <span class="comment">// 25</span></span><br></pre></td></tr></table></figure><p>由此可见，字符串的 length 属性，在判断字符串的长度时，会认为：</p><ul><li><p>一个中文算一个字符，一个英文算一个字符</p></li><li><p>一个标点符号（包括中文标点、英文标点）算一个字符</p></li><li><p>一个空格算一个字符</p></li></ul><h3 id="字符串拼接"><a href="#字符串拼接" class="headerlink" title="字符串拼接"></a>字符串拼接</h3><p>多个字符串之间可以使用加号 <code>+</code> 进行拼接。</p><p><strong>拼接语法</strong>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">字符串 + 任意数据类型 &#x3D; 拼接之后的新字符串;</span><br></pre></td></tr></table></figure><p><strong>拼接规则</strong>：拼接前，会把与字符串相加的这个数据类型转成字符串，然后再拼接成一个新的字符串。</p><p><strong>代码举例</strong>：（字符串与六大数据类型相加）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str1 = <span class="string">'千古壹号'</span> + <span class="string">'永不止步'</span>;</span><br><span class="line"><span class="keyword">var</span> str2 = <span class="string">'千古壹号'</span> + <span class="number">666</span>;</span><br><span class="line"><span class="keyword">var</span> str3 = <span class="string">'千古壹号'</span> + <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> str4 = <span class="string">'千古壹号'</span> + <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> str5 = <span class="string">'千古壹号'</span> + <span class="literal">undefined</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">name</span>: <span class="string">'千古壹号'</span>, <span class="attr">age</span>: <span class="number">28</span> &#125;;</span><br><span class="line"><span class="keyword">var</span> str6 = <span class="string">'千古壹号'</span> + obj;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(str1);</span><br><span class="line"><span class="built_in">console</span>.log(str2);</span><br><span class="line"><span class="built_in">console</span>.log(str3);</span><br><span class="line"><span class="built_in">console</span>.log(str4);</span><br><span class="line"><span class="built_in">console</span>.log(str5);</span><br><span class="line"><span class="built_in">console</span>.log(str6);</span><br></pre></td></tr></table></figure><p>打印结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">千古壹号永不止步</span><br><span class="line"></span><br><span class="line">千古壹号666</span><br><span class="line"></span><br><span class="line">千古壹号true</span><br><span class="line"></span><br><span class="line">千古壹号null</span><br><span class="line"></span><br><span class="line">千古壹号undefined</span><br><span class="line"></span><br><span class="line">千古壹号[object Object]</span><br></pre></td></tr></table></figure><h2 id="数值型：Number"><a href="#数值型：Number" class="headerlink" title="数值型：Number"></a>数值型：Number</h2><p>在JS中所有的数值都是 Number 类型，包括整数和浮点数（小数）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// 定义一个变量 a，并且赋值整数100</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// 输出变量 a 的类型</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">12.3</span>; <span class="comment">// 定义一个变量 b，并且赋值浮点数 12.3</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure><p>上方代码的输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">number</span><br><span class="line"></span><br><span class="line">number</span><br></pre></td></tr></table></figure><p>再次补充：在 JS 中，只要是数，就是 Number 数值型的。无论整浮、浮点数（即小数）、无论大小、无论正负，都是 Number 类型的。</p><h3 id="数值范围"><a href="#数值范围" class="headerlink" title="数值范围"></a>数值范围</h3><p>由于内存的限制，ECMAScript 并不能保存世界上所有的数值。</p><ul><li><p>最大值：<code>Number.MAX_VALUE</code>，这个值为： 1.7976931348623157e+308</p></li><li><p>最小值：<code>Number.MIN_VALUE</code>，这个值为： 5e-324</p></li></ul><p>如果使用 Number 表示的变量超过了最大值，则会返回Infinity。</p><ul><li><p>无穷大（正无穷）：Infinity</p></li><li><p>无穷小（负无穷）：-Infinity</p></li></ul><p>注意：<code>typeof Infinity</code>的返回结果是number。</p><h3 id="NaN"><a href="#NaN" class="headerlink" title="NaN"></a>NaN</h3><p><strong>NaN</strong>：是一个特殊的数字，表示Not a Number，非数值。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span> / <span class="number">18</span>);  <span class="comment">//结果是NaN</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"abc"</span> * <span class="string">"abcd"</span>); <span class="comment">//按理说，字符串相乘是没有结果的，但如果你非要让JS去算，它就一定会给你一个结果。结果是NaN</span></span><br></pre></td></tr></table></figure><p>注意：<code>typeof NaN</code>的返回结果是 number。</p><p>Undefined和任何数值计算的结果为 NaN。NaN 与任何值都不相等，包括 NaN 本身。</p><p>另外，关于 isNaN() 函数，可以看下一篇文章。</p><h3 id="浮点数的运算"><a href="#浮点数的运算" class="headerlink" title="浮点数的运算"></a>浮点数的运算</h3><p>在JS中，整数的运算<strong>基本</strong>可以保证精确；但是<strong>小数的运算，可能会得到一个不精确的结果</strong>。所以，千万不要使用JS进行对精确度要求比较高的运算。</p><p>如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">0.1</span> + <span class="number">0.2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//打印结果：0.30000000000000004</span></span><br></pre></td></tr></table></figure><p>上方代码中，打印结果并不是0.3，而是0.30000000000000004。</p><p>我们知道，所有的运算都要转换成二进制去计算，然而，二进制是无法精确表示1/10的。因此存在小数的计算不精确的问题。</p><h3 id="连字符和加号的区别"><a href="#连字符和加号的区别" class="headerlink" title="连字符和加号的区别"></a>连字符和加号的区别</h3><p>键盘上的<code>+</code>可能是连字符，也可能是数字的加号。如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(&quot;我&quot; + &quot;爱&quot; + &quot;你&quot;);&#x2F;&#x2F;连字符，把三个独立的汉字，连接在一起了</span><br><span class="line">console.log(&quot;我+爱+你&quot;);&#x2F;&#x2F;原样输出</span><br><span class="line">console.log(1+2+3);&#x2F;&#x2F;输出6</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">我爱你</span><br><span class="line">我+爱+你</span><br><span class="line">6</span><br></pre></td></tr></table></figure><p><strong>总结</strong>：如果加号两边<strong>都是</strong>数值，此时是加。否则，就是连字符（用来连接字符串）。</p><p>举例1：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"1"</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a + b);</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">12</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">console.log(&quot;a&quot; + b);&#x2F;&#x2F;&quot;a&quot;就不是变量了！所以就是&quot;a&quot;+2 输出a2</span><br></pre></td></tr></table></figure><p>控制台输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a2</span><br></pre></td></tr></table></figure><p>于是我们明白了，在变量中加入字符串进行拼接，可以被同化为字符串。【重要】</p><h3 id="隐式转换"><a href="#隐式转换" class="headerlink" title="隐式转换"></a>隐式转换</h3><p>我们知道，<code>&quot;2&quot;+1</code>得到的结果其实是字符串，但是<code>&quot;2&quot;-1</code>得到的结果却是数值1，这是因为计算机自动帮我们进行了“<strong>隐式转换</strong>”。</p><p>也就是说，<code>-</code>、<code>*</code>、<code>/</code>、<code>%</code>这几个符号会自动进行隐式转换。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">"4"</span> + <span class="number">3</span> - <span class="number">6</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">37</span></span><br></pre></td></tr></table></figure><p>虽然程序可以对<code>-</code>、<code>*</code>、<code>/</code>、`%``这几个符号自动进行“隐式转换”；但作为程序员，我们最好自己完成转换，方便程序的可读性。</p><h2 id="布尔值：Boolean"><a href="#布尔值：Boolean" class="headerlink" title="布尔值：Boolean"></a>布尔值：Boolean</h2><p>布尔型有两个值：true 和 false。主要用来做逻辑判断： true 表示真，false 表示假。</p><p>布尔值直接使用就可以了，千万不要加上引号。</p><p>代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</span><br></pre></td></tr></table></figure><p>控制台输出结果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">boolean</span><br></pre></td></tr></table></figure><p>布尔型和数字型相加时， true 按 1 来算 ，false 按 0 来算。</p><h2 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h2><h3 id="null：空值"><a href="#null：空值" class="headerlink" title="null：空值"></a><code>null</code>：空值</h3><p>专门用来表示一个为空的<strong>对象</strong>（例如：<code>var a = null</code>）。注意，专门用来表示<strong>空对象</strong>。</p><ul><li><p>Null类型的值只有一个，就是null。比如 <code>var a = null</code>。</p></li><li><p>使用 typeof 检查一个null值时，会返回object。</p></li></ul><h3 id="undefined：未定义"><a href="#undefined：未定义" class="headerlink" title="undefined：未定义"></a><code>undefined</code>：未定义</h3><p><strong>声明</strong>了一个变量，但是没有<strong>赋值</strong>（例如：<code>var a;</code>），此时它的值就是 <code>undefined</code>。</p><ul><li><p>Undefined类型的值只有一个，就是undefind。比如</p></li><li><p>使用 type of 检查一个undefined时，会返回undefined。</p></li></ul><p>null和undefined有很大的相似性。看看null == undefined的结果(true)也就更加能说明这点。</p><p>但是null === undefined的结果(false)。它们虽然相似，但还是有区别的，其中一个区别是：和数字运算时，10 + null结果为：10；10 + undefined结果为：NaN。</p><ul><li><p>任何数据类型和undefined运算都是NaN;</p></li><li><p>任何值和null运算，null可看做0运算。</p></li></ul><h2 id="变量值的传递（赋值）"><a href="#变量值的传递（赋值）" class="headerlink" title="变量值的传递（赋值）"></a>变量值的传递（赋值）</h2><p>语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a &#x3D; b;</span><br></pre></td></tr></table></figure><p>把b的值赋给a，b不变。</p><p>将等号右边的值，赋给左边的变量；等号右边的变量，值不变。</p><p>来做几个题目。</p><p>举例1：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F;ab       c</span><br><span class="line">var a &#x3D; 1;              &#x2F;&#x2F;1</span><br><span class="line">var b &#x3D; 2;              &#x2F;&#x2F;1     2</span><br><span class="line">var c &#x3D; 3;              &#x2F;&#x2F;1     2       3</span><br><span class="line">a &#x3D; b + c;              &#x2F;&#x2F;5     2       3</span><br><span class="line">b &#x3D; c - a;              &#x2F;&#x2F;5     -2      3</span><br><span class="line">c &#x3D; a * b;              &#x2F;&#x2F;5     -2      -10</span><br><span class="line">console.log(a);</span><br><span class="line">console.log(b);</span><br><span class="line">console.log(c);</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">-2</span><br><span class="line">-10</span><br></pre></td></tr></table></figure><p>举例2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F;a    b     c</span><br><span class="line">var a &#x3D; 1;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">var c &#x3D; 3;              &#x2F;&#x2F;1     2     3</span><br><span class="line">a &#x3D; a + b;              &#x2F;&#x2F;3     2     3</span><br><span class="line">b &#x3D; b + a;              &#x2F;&#x2F;3     5     3</span><br><span class="line">c &#x3D; c + b;              &#x2F;&#x2F;3     5     8</span><br><span class="line">console.log(a);  &#x2F;&#x2F;3</span><br><span class="line">console.log(b);  &#x2F;&#x2F;5</span><br><span class="line">console.log(c);  &#x2F;&#x2F;8</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">5</span><br><span class="line">8</span><br></pre></td></tr></table></figure><p>举例3：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">    &#x2F;&#x2F;a       b</span><br><span class="line">var a &#x3D; &quot;1&quot;;</span><br><span class="line">var b &#x3D; 2;          &#x2F;&#x2F;&quot;1&quot;     2</span><br><span class="line">a &#x3D; a + b;          &#x2F;&#x2F;&quot;12&quot;    2</span><br><span class="line">b &#x3D; b + a;          &#x2F;&#x2F;&quot;12&quot;    &quot;212&quot;</span><br><span class="line">console.log(a);     &#x2F;&#x2F;输出12</span><br><span class="line">console.log(b);     &#x2F;&#x2F;输出212</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">12</span><br><span class="line">212</span><br></pre></td></tr></table></figure><p>举例4：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  &#x2F;&#x2F;a         b</span><br><span class="line">var a &#x3D; &quot;1&quot;;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">a &#x3D; b + a;       &#x2F;&#x2F;&quot;21&quot;       2</span><br><span class="line">b &#x3D; b + a;       &#x2F;&#x2F;&quot;21&quot;       &quot;221&quot;</span><br><span class="line">console.log(a);  &#x2F;&#x2F;21</span><br><span class="line">console.log(b)   &#x2F;&#x2F;221</span><br></pre></td></tr></table></figure><p>效果：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">21</span><br><span class="line">221</span><br></pre></td></tr></table></figure><p>举例5：（这个例子比较特殊，字符串减去数字）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var a &#x3D; &quot;3&quot;;</span><br><span class="line">var b &#x3D; 2;</span><br><span class="line">console.log(a-b);</span><br></pre></td></tr></table></figure><p>效果：（注意，字符串 - 数值 = 数值）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">1</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">转载连接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;变量的数据类型&quot;&gt;&lt;a href=&quot;#变量的数据类型&quot; class=&quot;headerlink&quot; title=&quot;变量的数据类型&quot;&gt;&lt;/a&gt;变量的数据类型&lt;/h2&gt;&lt;h3 id=&quot;为什么需要数据类型&quot;&gt;&lt;a href=&quot;#为什么需要数据类型&quot; class=&quot;headerlink&quot; title=&quot;为什么需要数据类型&quot;&gt;&lt;/a&gt;为什么需要数据类型&lt;/h3&gt;&lt;p&gt;在计算机中，不同的数据所需占用的存储空间不同，为了充分利用存储空间，于是定义了不同的数据类型。而且，不同的数据类型，寓意也不同。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript教程" scheme="http://wangzc.wang/tags/javascript%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>javascript变量</title>
    <link href="http://wangzc.wang/2017/05/12/02-JS-data/"/>
    <id>http://wangzc.wang/2017/05/12/02-JS-data/</id>
    <published>2017-05-12T10:54:10.000Z</published>
    <updated>2020-04-16T16:39:56.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字面量：数字和字符串"><a href="#字面量：数字和字符串" class="headerlink" title="字面量：数字和字符串"></a>字面量：数字和字符串</h2><p>“字面量”即<strong>常量</strong>，是固定值，不可改变。看见什么，它就是什么。</p><p>字面量有3种：</p><ul><li><p>数字</p></li><li><p>字符串</p></li><li><p>布尔字面量</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p></li></ul><p>（1）数值的字面量非常简单，写上去就行了，不需要任何的符号。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert(<span class="number">886</span>);  <span class="comment">//886是数字，所以不需要加引号。</span></span><br></pre></td></tr></table></figure><p>（2）字符串的字面量也很简单，但一定要加上引号。可以是单词、句子等。例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">'886'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'千古壹号，永不止步'</span>);</span><br></pre></td></tr></table></figure><p>温馨提示：100是数字，”100”是字符串。</p><p>（3）布尔字面量举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'如果为真，就走这里面的代码);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>字面量都可以直接使用，但是我们一般不会直接使用字面量。</p><p>如果直接使用字面量的话，比较麻烦。比如说，多个地方要用到同一个字面量，还不如事先定义一个变量，用来保存字面量。</p><p>变量更方便我们使用，所以在开发中都是通过变量去保存一个字面量，而不会直接使用字面量。</p><h2 id="变量的概念"><a href="#变量的概念" class="headerlink" title="变量的概念"></a>变量的概念</h2><p><strong>变量</strong>：是用于存放数据的容器。我们通过「变量名」获取数据，甚至可以修改数据。</p><p>变量还可以用来保存字面量。</p><p><strong>本质</strong>：变量是程序在内存中申请的一块用来存放数据的空间。</p><h2 id="变量的声明和赋值"><a href="#变量的声明和赋值" class="headerlink" title="变量的声明和赋值"></a>变量的声明和赋值</h2><h3 id="变量的声明（变量的定义）"><a href="#变量的声明（变量的定义）" class="headerlink" title="变量的声明（变量的定义）"></a>变量的声明（变量的定义）</h3><p>在ES6语法之前，统一使用<code>var</code>关键字来声明一个变量。比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name; <span class="comment">// 生命一个名为 name 的变量</span></span><br></pre></td></tr></table></figure><p>补充：在ES6语法及之后，统一使用 <code>const</code>、<code>let</code>关键字来声明一个变量。这个以后再讲。</p><h3 id="变量的赋值"><a href="#变量的赋值" class="headerlink" title="变量的赋值"></a>变量的赋值</h3><p>变量的赋值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">name= <span class="string">'千古壹号'</span></span><br></pre></td></tr></table></figure><p>变量的声明和赋值，举例如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>; <span class="comment">// ES5语法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = hello; <span class="comment">// ES6 语法</span></span><br><span class="line"><span class="keyword">let</span> b = world; <span class="comment">// ES6 语法</span></span><br></pre></td></tr></table></figure><p>如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_2020.png"  alt=""></p><p>var是英语“variant”变量的缩写。后面要加一个空格，空格后面的东西就是“变量名”：</p><ul><li><p>定义变量：var就是一个<strong>关键字</strong>，用来定义变量。所谓关键字，就是有特殊功能的单词。</p></li><li><p>变量的赋值：等号表示<strong>赋值</strong>，将等号右边的值，赋给左边的变量。</p></li><li><p>变量名：我们可以给变量任意的取名字。</p></li></ul><p>PS：<strong>在JavaScript中，永远都是用var来定义变量</strong>（在ES6 之前），这和C、Java等语言不同。</p><h3 id="变量的初始化"><a href="#变量的初始化" class="headerlink" title="变量的初始化"></a>变量的初始化</h3><p>有经验的程序员，会把声明和赋值写在一起：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;    <span class="comment">//声明，并且赋值100</span></span><br><span class="line"><span class="built_in">console</span>.log(a);  <span class="comment">//输出100</span></span><br></pre></td></tr></table></figure><p>声明一个变量并赋值， 我们称之为<strong>变量的初始化</strong>。</p><h2 id="变量声明和赋值的补充"><a href="#变量声明和赋值的补充" class="headerlink" title="变量声明和赋值的补充"></a>变量声明和赋值的补充</h2><h3 id="修改变量的值"><a href="#修改变量的值" class="headerlink" title="修改变量的值"></a>修改变量的值</h3><p>一个变量被重新复赋值后，它原有的值就会被覆盖，变量值将以最后一次赋的值为准。</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">100</span>;</span><br><span class="line">a = <span class="number">110</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：110。因为 110 覆盖了 100</span></span><br></pre></td></tr></table></figure><h3 id="同时声明多个变量"><a href="#同时声明多个变量" class="headerlink" title="同时声明多个变量"></a>同时声明多个变量</h3><p>同时声明多个变量时，只需要写一个 var， 多个变量名之间用英文逗号隔开。</p><p>举例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">'千古壹号'</span>, age = <span class="number">27</span>, number = <span class="number">100</span>;</span><br></pre></td></tr></table></figure><h3 id="变量声明的几种特殊情况"><a href="#变量声明的几种特殊情况" class="headerlink" title="变量声明的几种特殊情况"></a>变量声明的几种特殊情况</h3><p>变量建议先声明，再使用。否则可能会报错。具体如下。</p><p><strong>写法1</strong>、先声明，再赋值：（正常）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：100</span></span><br></pre></td></tr></table></figure><p><strong>写法2</strong>、不声明，只赋值：（正常）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：100</span></span><br></pre></td></tr></table></figure><p><strong>写法3</strong>、只声明，不赋值：（注意，打印 undefined）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 打印结果：undefined</span></span><br></pre></td></tr></table></figure><p><strong>写法4</strong>、不声明，不赋值，直接使用：（会报错）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 会报错</span></span><br></pre></td></tr></table></figure><p>控制台会报错：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_2040.png"  alt=""></p><p><strong>补充</strong>：写法1和写法2虽然都正常，但这两种写法是有区别的，等以后学习了「变量提升」的概念就明白了。大多数情况下，我们都是采用的写法1。</p><h2 id="变量的命名规范"><a href="#变量的命名规范" class="headerlink" title="变量的命名规范"></a>变量的命名规范</h2><p>大写字母是可以使用的，并且大小写敏感。也就是说A和a是两个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> A = <span class="number">250</span>;    <span class="comment">//变量1</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">888</span>;    <span class="comment">//变量2</span></span><br></pre></td></tr></table></figure><p>我们来整理一下<strong>变量的命名规范</strong>：</p><ul><li><p>只能由字母(A-Z、a-z)、数字(0-9)、下划线(_)、美元符( $ )组成</p></li><li><p>不能以数字开头。也就是说，必须以字母(A-Z、a-z)、下划线(_)或者美元符( $ )开头。变量名中不允许出现空格。</p></li></ul><ul><li>不用使用 JS 语言中保留的「关键字」和「保留字」作为变量名。</li></ul><ul><li><p>建议用驼峰命名规则。比如getElementById、matherAndFather、aaaOrBbbAndCcc</p></li><li><p>变量名会区分大小写(javascript 是区分大小写的语言)。</p></li><li><p>变量名长度不能超过255个字符。</p></li><li><p>汉语可以作为变量名。但是不建议使用，因为 low。</p></li></ul><h2 id="标识符、关键字、保留字"><a href="#标识符、关键字、保留字" class="headerlink" title="标识符、关键字、保留字"></a>标识符、关键字、保留字</h2><h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><p><strong>标识符</strong>：在JS中所有的可以由我们<strong>自主命名</strong>的都可以称之为标识符。</p><p>例如：变量名、函数名、属性名、参数名都是属于标识符。通俗来讲，标识符就是我们写代码时为它们起的名字。</p><p><strong>标识符的命名规则</strong>和变量的命令规则是一样的。看上面一段就可以了。</p><p>同样，标识符不能使用语言中保留的<strong>关键字</strong>及<strong>保留字</strong>。如下。</p><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p><strong>关键字</strong>：是指 JS 本身已经使用了的单词，不能再用它们充当变量、函数名等标识符。</p><p>JS 中的关键字如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">break、continue、case、default、</span><br><span class="line"></span><br><span class="line">if、else、switch、for、in、do、while、</span><br><span class="line"></span><br><span class="line">try、catch、finally、throw、</span><br><span class="line"></span><br><span class="line">var、void、function、return、new、</span><br><span class="line"></span><br><span class="line">this、typeof、instanceof、delete、with、</span><br><span class="line"></span><br><span class="line">true、false、null、undefined</span><br></pre></td></tr></table></figure><h3 id="保留字"><a href="#保留字" class="headerlink" title="保留字"></a>保留字</h3><p><strong>保留字</strong>：实际上就是预留的“关键字”。意思是现在虽然还不是关键字，但是未来可能会成为关键字，同样不<br>能使用它们当充当变量名、函数名等标识符。</p><p>JS 中的保留字如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">abstract、boolean、byte、char、class、const、</span><br><span class="line"></span><br><span class="line">debugger、double、enum、export、extends、final、float、goto</span><br><span class="line"></span><br><span class="line">implements、import、int、interface、long、native、package、</span><br><span class="line"></span><br><span class="line">private、protected、public、short、static、super、synchronized、throws、</span><br><span class="line"></span><br><span class="line">transient、volatile</span><br></pre></td></tr></table></figure><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><p><strong>举例1</strong>：交换两个变量的值</p><p>代码实现：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a1 = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">var</span> a2 = <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp;</span><br><span class="line"></span><br><span class="line">temp = a1;</span><br><span class="line">a1 = a2;</span><br><span class="line">a2 = temp;</span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">转载连接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;字面量：数字和字符串&quot;&gt;&lt;a href=&quot;#字面量：数字和字符串&quot; class=&quot;headerlink&quot; title=&quot;字面量：数字和字符串&quot;&gt;&lt;/a&gt;字面量：数字和字符串&lt;/h2&gt;&lt;p&gt;“字面量”即&lt;strong&gt;常量&lt;/strong&gt;，是固定值，不可改变。看见什么，它就是什么。&lt;/p&gt;
&lt;p&gt;字面量有3种：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;数字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;布尔字面量&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript教程" scheme="http://wangzc.wang/tags/javascript%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>javascript简介</title>
    <link href="http://wangzc.wang/2017/05/11/01-JS/"/>
    <id>http://wangzc.wang/2017/05/11/01-JS/</id>
    <published>2017-05-11T10:53:49.000Z</published>
    <updated>2020-04-16T16:39:56.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JavaScript背景"><a href="#JavaScript背景" class="headerlink" title="JavaScript背景"></a>JavaScript背景</h2><p>Web前端有三层：</p><ul><li><p>HTML：从语义的角度，描述页面<strong>结构</strong></p></li><li><p>CSS：从审美的角度，描述<strong>样式</strong>（美化页面）</p></li><li><p>JavaScript：从交互的角度，描述<strong>行为</strong>（实现业务逻辑和页面控制）</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h3 id="发展历史"><a href="#发展历史" class="headerlink" title="发展历史"></a>发展历史</h3></li></ul><p>JavaScript诞生于<strong>1995年</strong>。布兰登 • 艾奇（Brendan Eich，1961年～），1995年在网景公司，发明的JavaScript。</p><p>JavaScript是由<strong>网景</strong>公司发明，起初命名为LiveScript；1995年年12月SUN公司合作，因市场宣传需要，改名为 JavaScript。</p><p>后来 Sun 公司 被Oracle收购，JavaScript版权归Oracle所有。</p><blockquote><p>备注：由于当时Java这个语言特别火，所以为了傍大牌，就改名为JavaScript。如同“北大”和“北大青鸟”的关系。“北大青鸟”就是傍“北大”大牌。</p></blockquote><p>同时期还有其他的网页语言，比如VBScript、JScript等等，但是后来都被JavaScript打败了，所以现在的浏览器中，只运行一种脚本语言就是JavaScript。</p><p>JavaScript是世界上用的最多的<strong>脚本语言</strong>。</p><h3 id="JavaScript的发展：蒸蒸日上"><a href="#JavaScript的发展：蒸蒸日上" class="headerlink" title="JavaScript的发展：蒸蒸日上"></a>JavaScript的发展：蒸蒸日上</h3><p>2003年之前，JavaScript被认为“牛皮鲜”，用来制作页面上的广告，弹窗、漂浮的广告。什么东西让人烦，什么东西就是JavaScript开发的。所以很多浏览器就推出了屏蔽广告功能。</p><p>2004年，JavaScript命运开始改变。那一年，<strong>谷歌公司开始带头使用Ajax技术</strong>，Ajax技术就是JavaScript的一个应用。并且，那时候人们逐渐开始提升用户体验了。Ajax有一些应用场景。比如，当我们在百度搜索框搜文字时，输入框下方的智能提示，可以通过Ajax实现。比如，当我们注册网易邮箱时，能够及时发现用户名是否被占用，而不用调到另外一个页面。</p><p>2007年乔布斯发布了第一款iPhone，这一年开始，用户就多了上网的途径，就是用移动设备上网。<br><strong>JavaScript在移动页面中，也是不可或缺的</strong>。并且这一年，互联网开始标准化，按照W3C规则三层分离，JavaScript越来越被重视。</p><p>2010年，人们更加了解<strong>HTML5技术</strong>，<strong>HTML5推出了一个东西叫做Canvas</strong>（画布），工程师可以在Canvas上进行游戏制作，利用的就是JavaScript。</p><p>2011年，<strong>Node.js诞生</strong>，使JavaScript能够开发服务器程序了。</p><p>如今，<strong>WebApp</strong>已经非常流行，就是用<strong>网页技术开发手机应用</strong>。手机系统有iOS、安卓。比如公司要开发一个“携程网”App，就需要招聘三队人马，比如iOS工程师10人，安卓工程师10人，前端工程师10人。共30人，开发成本大；而且如果要改版，要改3个版本。现在，假设公司都用web技术，用html+css+javascript技术就可以开发App。也易于迭代（网页一改变，所有的终端都变了）。</p><p>虽然目前WebApp（Web应用）在功能和性能上的体验远不如Native App（原生应用），但是“在原生App中内嵌一部分H5页面”已经是一种趋势。</p><h2 id="浏览器的介绍"><a href="#浏览器的介绍" class="headerlink" title="浏览器的介绍"></a>浏览器的介绍</h2><p>浏览器是网页运行的平台，常用的浏览器有谷歌（Chrome）、Safari、火狐（Firefox）、IE、Edge、Opera等。如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20191204_1900.png"  alt=""></p><h3 id="浏览器的组成"><a href="#浏览器的组成" class="headerlink" title="浏览器的组成"></a>浏览器的组成</h3><p>浏览器分成两部分：</p><ul><li><p>渲染引擎</p></li><li><p>JS 引擎</p></li></ul><p>1、<strong>渲染引擎</strong>：（浏览器内核）</p><p>浏览器所采用的「渲染引擎」也称之为「浏览器内核」，用来解析 HTML与CSS。渲染引擎决定了浏览器如何显示网页的内容以及页面的格式信息。<strong>渲染引擎是兼容性问题出现的根本原因。</strong></p><p>常见浏览器的内核如下：</p><table><thead><tr><th align="center">浏览器</th><th align="center">内核</th></tr></thead><tbody><tr><td align="center">chrome / 欧鹏</td><td align="center">Blink</td></tr><tr><td align="center">Safari</td><td align="center">Webkit</td></tr><tr><td align="center">Firefox 火狐</td><td align="center">Gecko</td></tr><tr><td align="center">IE</td><td align="center">Trident</td></tr></tbody></table><p>2、<strong>JS 引擎</strong>：</p><p>也称为 JS 解释器。 用来解析网页中的JavaScript代码，对其处理后再运行。</p><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行时会逐行解释源码（转换为机器语言），然后由计算机去执行。</p><p>浏览器本身并不会执行JS代码，而是通过内置 JavaScript 引擎(解释器) 来执行 JS 代码 。JS 引擎执行代码时逐行解释每一句源码（转换为机器语言），然后由计算机去执行。所以 JavaScript 语言归为脚本语言，会逐行解释执行。</p><p>常见浏览器的 JS 引擎如下：</p><table><thead><tr><th align="center">浏览器</th><th align="left">JS 引擎</th></tr></thead><tbody><tr><td align="center">chrome / 欧鹏</td><td align="left">V8</td></tr><tr><td align="center">Safari</td><td align="left">Nitro</td></tr><tr><td align="center">Firefox 火狐</td><td align="left">SpiderMonkey（1.0-3.0）/ TraceMonkey（3.5-3.6）/ JaegerMonkey（4.0-）</td></tr><tr><td align="center">Opera</td><td align="left">Linear A（4.0-6.1）/ Linear B（7.0-9.2）/ Futhark（9.5-10.2）/ Carakan（10.5-）</td></tr><tr><td align="center">IE</td><td align="left">Trident</td></tr></tbody></table><p>参考链接：</p><ul><li><a href="https://juejin.im/post/5ada727c518825670b33a584" target="_blank" rel="noopener">主流浏览器内核及JS引擎</a></li></ul><h3 id="浏览器工作原理"><a href="#浏览器工作原理" class="headerlink" title="浏览器工作原理"></a>浏览器工作原理</h3><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180124_1700.png"  alt=""></p><p>1、User Interface  用户界面，我们所看到的浏览器</p><p>2、Browser engine  浏览器引擎，用来查询和操作渲染引擎</p><p>3、Rendering engine 用来显示请求的内容，负责解析HTML、CSS</p><p>4、Networking   网络，负责发送网络请求</p><p>5、JavaScript Interpreter(解析者)   JavaScript解析器，负责执行JavaScript的代码</p><p>6、UI Backend   UI后端，用来绘制类似组合框和弹出窗口</p><p>7、Data Persistence(持久化)  数据持久化，数据存储  cookie、HTML5中的sessionStorage</p><p>参考链接：<a href="https://www.2cto.com/kf/201202/118111.html" target="_blank" rel="noopener">https://www.2cto.com/kf/201202/118111.html</a></p><h2 id="JavaScript介绍"><a href="#JavaScript介绍" class="headerlink" title="JavaScript介绍"></a>JavaScript介绍</h2><h3 id="JavaScript入门易学性"><a href="#JavaScript入门易学性" class="headerlink" title="JavaScript入门易学性"></a>JavaScript入门易学性</h3><ul><li><p>JavaScript对初学者比较友好、简单易用。可以使用任何文本编辑工具编写，只需要浏览器就可以执行程序。</p></li><li><p>JavaScript是有界面效果的（相比之下，C语言只有白底黑字）。</p></li><li><p>JavaScript是<strong>弱变量类型</strong>的语言，变量只需要用 var/let/const 来声明。而Java中变量的声明，要根据变量的类型来定义。</p></li></ul><p>比如Java中需要定义如下变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">float</span> a;</span><br><span class="line"><span class="keyword">double</span> a;</span><br><span class="line">String a;</span><br><span class="line"><span class="keyword">boolean</span> a;</span><br></pre></td></tr></table></figure><p>而JavaScript中，只需要用一种方式来定义：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ES5 写法</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6 写法</span></span><br><span class="line"><span class="keyword">const</span> a;</span><br><span class="line"><span class="keyword">let</span> a;</span><br></pre></td></tr></table></figure><h3 id="JavaScript是前端语言"><a href="#JavaScript是前端语言" class="headerlink" title="JavaScript是前端语言"></a>JavaScript是前端语言</h3><p>JavaScript是前端语言，而不是后台语言。</p><p>JavaScript运行在用户的终端网页上，而不是服务器上，所以我们称之为“<strong>前端语言</strong>”。就是服务于页面的交互效果、美化，不能操作数据库。</p><p><strong>后台语言</strong>是运行在服务器上的，比如PHP、ASP、JSP等等，这些语言都能够操作数据库，都能够对数据库进行“增删改查”操作。</p><p>备注：Node.js是用 JavaScript 开发的，现在也可以基于 Node.js 技术进行服务器端编程。</p><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><p>JavaScript基础分为三个部分：</p><ul><li><p>ECMAScript：JavaScript的语法标准。包括变量、表达式、运算符、函数、if语句、for语句等。</p></li><li><p><strong>DOM</strong>：Document Object Model（文档对象模型），操作<strong>页面上的元素</strong>的API。比如让盒子移动、变色、改变大小、轮播图等等。</p></li><li><p><strong>BOM</strong>：Browser Object Model（浏览器对象模型），操作<strong>浏览器部分功能</strong>的API。通过BOM可以操作浏览器窗口，比如弹框、控制浏览器跳转、获取浏览器分辨率等等。</p></li></ul><h2 id="JavaScript-的特点"><a href="#JavaScript-的特点" class="headerlink" title="JavaScript 的特点"></a>JavaScript 的特点</h2><h3 id="特点1：解释型语言"><a href="#特点1：解释型语言" class="headerlink" title="特点1：解释型语言"></a>特点1：解释型语言</h3><p>JavaScript 是解释型语言，不需要事先被翻译为机器码；而是边翻译边执行（翻译一行，执行一行）。</p><p>什么是「解释型语言」？详见下一段。</p><blockquote><p>由于少了实现编译这一步骤，所以解释型语言开发起来尤为方便，但是解释型语言运行较慢也是它的劣势。不过解释型语言中使用了JIT技术，使得运行速度得以改善。</p></blockquote><h3 id="特点2：单线程"><a href="#特点2：单线程" class="headerlink" title="特点2：单线程"></a>特点2：单线程</h3><h3 id="特点3：ECMAScript标准"><a href="#特点3：ECMAScript标准" class="headerlink" title="特点3：ECMAScript标准"></a>特点3：ECMAScript标准</h3><p>ECMAScript是一种由 ECMA 国际（前身为欧洲计算机制造商协会,英文名称是European Computer Manufacturers Association）制定和发布的脚本语言规范。</p><p>JavaScript是由公司开发而成的，问题是不便于其他的公司拓展和使用。所以欧洲的这个ECMA的组织，牵头制定JavaScript的标准，取名为ECMAScript。</p><p>简单来说，<strong>ECMAScript不是一门语言，而是一个标准</strong>。ECMAScript 规定了JS的编程语法和基础核心知识，是所有浏览器厂商共同遵守的一套JS语法工业标准。</p><p>ECMAScript在2015年6月，发布了ECMAScript 6版本（ES6），语言的能力更强（也包含了很多新特性）。但是，浏览器的厂商不会那么快去追上这个标准，需要时间。</p><h2 id="编程语言的分类"><a href="#编程语言的分类" class="headerlink" title="编程语言的分类"></a>编程语言的分类</h2><h3 id="翻译器"><a href="#翻译器" class="headerlink" title="翻译器"></a>翻译器</h3><p>计算机不能直接理解任何除机器语言以外的语言，所以必须要把程序员所编写的语言翻译成机器语言，计算机才能执行程序。<strong>程序语言翻译成机器语言的工具，被称为翻译器</strong>。</p><p>由此可见，所谓的“翻译”，指的是翻译成计算机能够执行的指令。</p><p>翻译器翻译的方式有两种：一种是<strong>编译</strong>，另一种是<strong>解释</strong>。两种方式之间的区别在于<strong>翻译的时机</strong>不同。</p><ul><li><p><strong>编译器</strong>：在代码执行之前，事前把所有的代码一次性翻译好，生成中间代码文件，然后整体执行。</p></li><li><p><strong>解释器</strong>：边翻译，边执行（在代码执行时进行及时翻译，并立即执行）。当编译器以解释的方式运行时，也称之为解释器。</p></li></ul><p>对应的语言，称之为“编译型语言”、“解释型语言”。</p><h3 id="编译型语言"><a href="#编译型语言" class="headerlink" title="编译型语言"></a>编译型语言</h3><ul><li><p>定义：事先把所有的代码一次性翻译好，然后整体执行。</p></li><li><p>优点：运行更快。</p></li><li><p>不足：移植性不好，不跨平台。</p></li><li><p>编译型语言举例：c、c++</p></li></ul><p>比如说，c语言的代码文件是<code>.c</code>后缀，翻译之后文件是<code>.obj</code>后缀，系统执行的是 obj 文件；再比如， java 语言的代码文件是<code>.java</code>后缀，翻译之后的文件是<code>.class</code>后缀。（注意，Java 语言不是严格的 编译型语言，这个一会儿会讲）</p><h3 id="解释型语言"><a href="#解释型语言" class="headerlink" title="解释型语言"></a>解释型语言</h3><ul><li><p>定义：<strong>边翻译边执行</strong>（翻译一行，执行一行），不需要事先一次性翻译。</p></li><li><p>优点：移植性好，跨平台。</p></li><li><p>缺点：运行更慢。</p></li><li><p>解释型语言举例：JavaScript、php、Python。</p></li></ul><h3 id="Java语言"><a href="#Java语言" class="headerlink" title="Java语言"></a>Java语言</h3><p>Java 语言既不是编译型语言，也不是解释型语言。翻译过程：</p><p>（1）编译：<code>.java</code>代码文件先通过 javac 命令编译成<code>.class</code>文件。</p><p>（2）执行：<code>.class</code>文件再通过 jvm 虚拟机，解释执行。有了 jvm 的存在，让 java 跨平台了。</p><h2 id="开始写第一行JavaScript代码"><a href="#开始写第一行JavaScript代码" class="headerlink" title="开始写第一行JavaScript代码"></a>开始写第一行JavaScript代码</h2><blockquote><p>JavaScript 代码的书写位置在哪里呢？这个问题，也可以理解成：引入 js 代码，有哪几种方式。</p></blockquote><h3 id="方式1：行内式"><a href="#方式1：行内式" class="headerlink" title="方式1：行内式"></a>方式1：行内式</h3><p><strong>代码举例</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=<span class="string">"button"</span> value=<span class="string">"点我点我"</span> onclick=<span class="string">"alert('千古壹号')"</span> /&gt;</span><br></pre></td></tr></table></figure><p>完整的可执行代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"点我点我"</span> <span class="attr">onclick</span>=<span class="string">"alert('千古壹号的方式1')"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><p>可以将单行或少量 JS 代码写在HTML标签的事件属性中（以 on 开头的属性），比如放在上面的 <code>onclick</code>点击事件中。</p></li><li><p>这种书写方式，不推荐使用，原因是：可读性差，尤其是需要编写大量 JS代码时，容易出错；引号多层嵌套时，也容易出错。</p></li><li><p>关于代码中的「引号」，在HTML标签中，我们推荐使用双引号, JS 中我们推荐使用单引号。</p></li></ul><h3 id="方式2、内嵌式"><a href="#方式2、内嵌式" class="headerlink" title="方式2、内嵌式"></a>方式2、内嵌式</h3><p>我们可以在html 页面的 <code>&lt;body&gt;</code> 标签里放入<code>&lt;script type=”text/javascript”&gt;&lt;/script&gt;</code>标签对儿，并在<code>&lt;script&gt;</code>里书写JavaScript 代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="comment">// 在这里写 js 代码</span></span></span><br><span class="line"><span class="actionscript">alert(<span class="string">'千古壹号的方式2'</span>);</span></span><br><span class="line"><span class="javascript"><span class="built_in">console</span>.log(<span class="string">'qianguyihao 方式2'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>分析</strong>：</p><ul><li><p>text表示纯文本，因为JavaScript也是一个纯文本的语言。</p></li><li><p>可以将多行JS代码写到 <code>&lt;script&gt;</code> 标签中。</p></li><li><p>内嵌式 JS 是学习时常用的方式。</p></li></ul><h3 id="方式3：引入外部的-JS-文件"><a href="#方式3：引入外部的-JS-文件" class="headerlink" title="方式3：引入外部的 JS 文件"></a>方式3：引入外部的 JS 文件</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 引入外部的 js 文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"tool.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面这段代码，依然是放到body标签里，可以和内嵌的js代码并列。</p><p>另外，引用外部 JS文件的 script 标签中间不可以再写代码。</p><p><strong>总结</strong>：</p><p>我们在实战开发中，基本都是采用方式3，因为这种方式，可以确保 html 文件和 js 文件是分开的，有利于代码的结构化和复用。很少会有人把一大堆 js 代码塞到 html 文件里。</p><h2 id="JS一些简单的语法规则"><a href="#JS一些简单的语法规则" class="headerlink" title="JS一些简单的语法规则"></a>JS一些简单的语法规则</h2><p>学习程序，是有规律可循的，程序会有有相同的部分，这些部分就是一种规定，不能更改，我们成为：语法。</p><p>（1）JavaScript对换行、缩进、空格不敏感。每一条语句以分号结尾。</p><p>也就是说：</p><p>代码一：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"今天蓝天白云"</span>);</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"我很高兴"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>等价于代码二：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">alert(<span class="string">"今天蓝天白云"</span>);alert(<span class="string">"我很高兴"</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>备注：每一条语句末尾要加上分号，虽然分号不是必须加的，如果不写分号，浏览器会自动添加，但是会消耗一些系统资源。</p><p>（2）所有的符号，都是英语的。比如<strong>括号</strong>、引号、分号。</p><p>如果你用的是搜狗拼音，<strong>建议不要用shift切换中英文</strong>（可以在搜狗软件里进行设置），不然很容易输入中文的分号；建议用ctrl+space切换中英文输入法。</p><p>（3）严格区分大小写。</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>我们不要把 HTML、CSS、JavaScript三者的注释格式搞混淆了。</p><h3 id="HTML-的注释"><a href="#HTML-的注释" class="headerlink" title="HTML 的注释"></a>HTML 的注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 我是注释  --&gt;</span></span><br></pre></td></tr></table></figure><h3 id="CSS的注释"><a href="#CSS的注释" class="headerlink" title="CSS的注释"></a>CSS的注释</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">我是注释</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">p&#123;</span><br><span class="line">font-weight: bold;</span><br><span class="line">font-style: italic;</span><br><span class="line">color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：CSS只有<code>/*  */</code>这种注释，没有<code>//</code>这种注释。而且注释要写在<code>&lt;style&gt;</code>标签里面才算生效哦。</p><h3 id="JavaScript-的注释"><a href="#JavaScript-的注释" class="headerlink" title="JavaScript 的注释"></a>JavaScript 的注释</h3><p>单行注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;&#x2F; 我是注释</span><br></pre></td></tr></table></figure><p>多行注释：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;*</span><br><span class="line">多行注释1</span><br><span class="line">多行注释2</span><br><span class="line">*&#x2F;</span><br></pre></td></tr></table></figure><p>补充：VS Code中，单行注释的快捷键是「Ctrl + /」，多行注释的默认快捷键是「Alt + Shift + A」。</p><p>当然，如果你觉得多行注释的默认快捷键不方便，我们还可以修改默认快捷键。操作如下：</p><p>VS Code –&gt; 首选项 –&gt; 键盘快捷方式 –&gt; 查找“注释”这两个字 –&gt; 将原来的快捷键修改为「Ctrl + Shift + /」。</p><h2 id="Javascript-输入输出语句"><a href="#Javascript-输入输出语句" class="headerlink" title="Javascript 输入输出语句"></a>Javascript 输入输出语句</h2><h3 id="弹出警告框：alert语句"><a href="#弹出警告框：alert语句" class="headerlink" title="弹出警告框：alert语句"></a>弹出警告框：alert语句</h3><p>我们要学习的第一个语句，就是alert语句。</p><p>代码举例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">            alert(<span class="string">'千古壹号'</span>);</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>alert</strong>（英文翻译为“警报”）的用途：<strong>弹出“警告框”</strong>。</p><p><code>alert(&quot;&quot;)</code>警告框的效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_1735.gif"  alt=""></p><p>这个警告框，在IE浏览器中长这样：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_1906.png"  alt=""></p><p>上面的代码中，如果写了两个alert()语句的话，网页的效果是：弹出第一个警告框，点击确定后，继续弹出第二个警告框。</p><h3 id="控制台输出：console-log-“”"><a href="#控制台输出：console-log-“”" class="headerlink" title="控制台输出：console.log(“”)"></a>控制台输出：console.log(“”)</h3><p><code>console.log(&quot;&quot;)</code>表示在控制台中输出。console表示“控制台”，log表示“输出”。</p><p>在Chrome浏览器中，按F12即可打开控制台，选择「console」栏，即可看到打印的内容。</p><p><code>console.log(&quot;&quot;)</code>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_2008.gif"  alt=""></p><p>控制台是工程师、程序员调试程序的地方。程序员经常使用这条语句输出一些东西，来测试程序是否正确。</p><p>普通人是不会在意控制台的，但是有些网站另藏玄机。有个很有意思的地方是，百度首页的控制台，悄悄地放了一段招聘信息：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_2010.png"  alt=""></p><p>毕竟做前端的人是经常使用控制台的。</p><p><strong>总结</strong>：alert() 主要用来显示消息给用户，console.log() 用来给程序员自己调试用的。</p><h3 id="弹出输入框：prompt-语句"><a href="#弹出输入框：prompt-语句" class="headerlink" title="弹出输入框：prompt()语句"></a>弹出输入框：prompt()语句</h3><p><code>prompt()</code>就是专门用来弹出能够让用户输入的对话框。用得少，测试的时候偶尔会用。</p><p>JS代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = prompt(<span class="string">"请随便输入点什么东西吧"</span>);</span><br><span class="line"><span class="built_in">console</span>.log(a);</span><br></pre></td></tr></table></figure><p>上方代码中，用户输入的内容，将被传递到变量 a 里面，并在控制台打印出来。</p><p>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180116_2230.gif"  alt=""></p><p><strong>prompt()语句中，用户不管输入什么内容，都是字符串。</strong></p><p><strong>alert()和prompt()的区别：</strong></p><ul><li><p>alert() 可以直接使用。</p></li><li><p>prompt() 会返回用户输入的内容。我们可以用一个变量，来接收用户输入的内容。</p><blockquote><p><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">转载连接</a></p></blockquote></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;JavaScript背景&quot;&gt;&lt;a href=&quot;#JavaScript背景&quot; class=&quot;headerlink&quot; title=&quot;JavaScript背景&quot;&gt;&lt;/a&gt;JavaScript背景&lt;/h2&gt;&lt;p&gt;Web前端有三层：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;HTML：从语义的角度，描述页面&lt;strong&gt;结构&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;CSS：从审美的角度，描述&lt;strong&gt;样式&lt;/strong&gt;（美化页面）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript：从交互的角度，描述&lt;strong&gt;行为&lt;/strong&gt;（实现业务逻辑和页面控制）&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript教程" scheme="http://wangzc.wang/tags/javascript%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>vue引入swiper</title>
    <link href="http://wangzc.wang/2017/04/09/vue-import-swiper/"/>
    <id>http://wangzc.wang/2017/04/09/vue-import-swiper/</id>
    <published>2017-04-09T22:57:16.000Z</published>
    <updated>2020-04-16T16:39:56.508Z</updated>
    
    <content type="html"><![CDATA[<img src="/" class="lazyload" data-src="logo.png"   ><h3 id="vue引入swiper-vue使用swiper-vue脚手架使用swiper-引入js文件-引入css文件"><a href="#vue引入swiper-vue使用swiper-vue脚手架使用swiper-引入js文件-引入css文件" class="headerlink" title="vue引入swiper  vue使用swiper  vue脚手架使用swiper /引入js文件/引入css文件"></a>vue引入swiper  vue使用swiper  vue脚手架使用swiper /引入js文件/引入css文件</h3><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><hr><pre><code>转载文章请注明出处！               </code></pre><hr><p> 如果只是要使用轮播效果的话可以参考下一些vue组件；比如这篇文章</p><p>——–2019.7.9——————</p><p>请参考swiper官方插件：<a href="https://github.com/surmon-china/vue-awesome-swiper" target="_blank" rel="noopener">https://github.com/surmon-china/vue-awesome-swiper</a></p><p>——–2019.7.9——————</p><h4 id="方法一：（-请先使用这种方法；更新于2018-05-14）"><a href="#方法一：（-请先使用这种方法；更新于2018-05-14）" class="headerlink" title="方法一：（ 请先使用这种方法；更新于2018-05-14）"></a>方法一：（ 请先使用这种方法；更新于2018-05-14）</h4><p>下载swiper：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install swiper --save-dev</span><br></pre></td></tr></table></figure><p>swiper4.0使用入口：<a href="http://www.swiper.com.cn/usage/index.html" target="_blank" rel="noopener">http://www.swiper.com.cn/usage/index.html</a>；</p><h3 id="html："><a href="#html：" class="headerlink" title="html："></a>html：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;Slide <span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;div class="swiper-slide"&gt;Slide 2&lt;/</span>div&gt;</span><br><span class="line">        &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;Slide <span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>div&gt;</span><br><span class="line">    &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-pagination"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">    &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    </span><br><span class="line">    &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-scrollbar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br></pre></td></tr></table></figure><p>在需要使用swiper的组件里引入swiper，swiper的初始化放在mounted里（可以把官网例子的启动 var mySwiper =  删掉）；</p><h3 id="js："><a href="#js：" class="headerlink" title="js："></a>js：</h3> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span> Swiper <span class="keyword">from</span> <span class="string">'swiper'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">     <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果需要分页器</span></span><br><span class="line">    pagination: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">    <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">    nextButton: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">    prevButton: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line">    <span class="comment">// 如果需要滚动条</span></span><br><span class="line">    scrollbar: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">  &#125;)        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="css："><a href="#css：" class="headerlink" title="css："></a>css：</h3><p>在main.js里引入css</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'swiper/dist/css/swiper.css'</span>;</span><br></pre></td></tr></table></figure><p>然后我们在用到swiper的组件里写点样式</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"><span class="css"> <span class="selector-class">.swiper-container</span> &#123;</span></span><br><span class="line">        width: 500px;</span><br><span class="line">        height: 300px;</span><br><span class="line">        margin: 20px auto;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>———————————–我是分割线———————————————————–</p><h3 id="方法二：（以下是2017年4月写的-废弃）"><a href="#方法二：（以下是2017年4月写的-废弃）" class="headerlink" title="方法二：（以下是2017年4月写的,废弃）"></a>方法二：（以下是2017年4月写的,废弃）</h3><p>1.安装vue-cli</p><p>参考地址：<a href="https://github.com/vuejs/vue-cli" target="_blank" rel="noopener">https://github.com/vuejs/vue-cli</a></p><p>如果不使用严格语法需要在后三项打no；（加了挺头疼的，老是报错，但是对自己的代码规范性也是有很大的帮助的）</p><p>2.swiper下载示例代码</p><p>参考地址：<a href="http://www.swiper.com.cn/usage/index.html" target="_blank" rel="noopener">http://www.swiper.com.cn/usage/index.html</a></p><p>一：单个组件使用：</p><p>3.在刚下载好的vue-cli里的helloworld.vue进行代码编写。</p><h5 id="3-1html部分："><a href="#3-1html部分：" class="headerlink" title="3.1html部分："></a>3.1html部分：</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> &lt;template&gt;</span><br><span class="line"> <span class="number">2</span>   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line"> <span class="number">3</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line"> <span class="number">4</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line"> <span class="number">5</span>         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;Slide <span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> 6         &lt;div class="swiper-slide"&gt;Slide 2&lt;/</span>div&gt;</span><br><span class="line"> <span class="number">7</span>         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;Slide <span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> 8     &lt;/</span>div&gt;</span><br><span class="line"> <span class="number">9</span>     &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line"><span class="number">10</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-pagination"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">11</span>     </span><br><span class="line"><span class="number">12</span>     &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line"><span class="number">13</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">14</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">15</span>     </span><br><span class="line"><span class="number">16</span>     &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line"><span class="number">17</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-scrollbar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">18</span> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">19   &lt;/</span>div&gt;</span><br><span class="line"><span class="number">20</span> &lt;<span class="regexp">/template&gt;</span></span><br></pre></td></tr></table></figure><h4 id="3-2-js部分："><a href="#3-2-js部分：" class="headerlink" title="3.2 js部分："></a>3.2 js部分：</h4><p>这里使用import引入swiper.js文件；</p><p>swiper的启动放在mounted里执行；</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">import</span><span class="string">'../assets/js/swiper.min.js'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  name: <span class="string">'HelloWorld'</span>,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to Your Vue.js App'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted()&#123;</span><br><span class="line">     <span class="keyword">var</span> mySwiper = <span class="keyword">new</span> Swiper (<span class="string">'.swiper-container'</span>, &#123;</span><br><span class="line">    loop: <span class="literal">true</span>,</span><br><span class="line">    <span class="comment">// 如果需要分页器</span></span><br><span class="line">    pagination: <span class="string">'.swiper-pagination'</span>,</span><br><span class="line">    <span class="comment">// 如果需要前进后退按钮</span></span><br><span class="line">    nextButton: <span class="string">'.swiper-button-next'</span>,</span><br><span class="line">    prevButton: <span class="string">'.swiper-button-prev'</span>,</span><br><span class="line">    <span class="comment">// 如果需要滚动条</span></span><br><span class="line">    scrollbar: <span class="string">'.swiper-scrollbar'</span>,</span><br><span class="line">  &#125;)        </span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h5 id="3-3css部分："><a href="#3-3css部分：" class="headerlink" title="3.3css部分："></a>3.3css部分：</h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> 1 &lt;<span class="selector-tag">style</span> <span class="selector-tag">scoped</span>&gt;</span><br><span class="line"> 2 <span class="keyword">@import</span>'../assets/css/swiper.min.css';</span><br><span class="line"> 3     <span class="selector-tag">body</span> &#123;</span><br><span class="line"> 4         margin: 0;</span><br><span class="line"> 5         <span class="selector-tag">padding</span>: 0;</span><br><span class="line"> 6     &#125;</span><br><span class="line"> 7     <span class="selector-class">.swiper-container</span> &#123;</span><br><span class="line"> 8         width: 500px;</span><br><span class="line"> 9         <span class="selector-tag">height</span>: 300<span class="selector-tag">px</span>;</span><br><span class="line">10         <span class="selector-tag">margin</span>: 20<span class="selector-tag">px</span> <span class="selector-tag">auto</span>;</span><br><span class="line">11     &#125;</span><br><span class="line">12    </span><br><span class="line">13 </span><br><span class="line">14     &lt;/style&gt;</span><br></pre></td></tr></table></figure><p>4.看似大工告成，这时候会报错：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot assign to read only property &#39;exports&#39; of object &#39;#&lt;Object&gt;&#39;</span><br></pre></td></tr></table></figure><p>这个错误查文档说是：</p><p>在webpack打包的时候，可以在js文件中混用require和export。但是不能混用import 以及module.exports。</p><p>因为webpack 2中不允许混用import和module.exports</p><p>我们只需要吧.babelrc文件里的第11行代码插件项”plugins”: [“transform-runtime”],中的transform-runtime删掉即可；</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> &#123;</span><br><span class="line"> 2   "presets": [</span><br><span class="line"> <span class="number">3</span>     [<span class="string">"env"</span>, &#123;</span><br><span class="line"> 4       "modules": false,</span><br><span class="line"> 5       "targets": &#123;</span><br><span class="line"> 6         "browsers": ["&gt; 1%", "last 2 versions", "not ie &lt;= 8"]</span><br><span class="line"> 7       &#125;</span><br><span class="line"> 8     &#125;],</span><br><span class="line"> <span class="number">9</span>     <span class="string">"stage-2"</span></span><br><span class="line">10   ],</span><br><span class="line">11   "plugins": [],</span><br><span class="line">12   "env": &#123;</span><br><span class="line">13     "test": &#123;</span><br><span class="line">14       "presets": ["env", "stage-2"],</span><br><span class="line">15       "plugins": ["istanbul"]</span><br><span class="line">16     &#125;</span><br><span class="line">17   &#125;</span><br><span class="line">18 &#125;</span><br></pre></td></tr></table></figure><p>5.好了问题解决；</p><p><img src="/" class="lazyload" data-src="https://user-gold-cdn.xitu.io/2020/1/4/16f6c6310e966f77?w=670&h=584&f=bmp&s=1175076"  alt=""></p><p>二：全局使用：</p><p>6.当然也可以全局使用swiper；代码如下；</p><p>还是在刚才的helloworld.vue进行代码编写；只是去掉js和css文件的引入！</p><p>helloworld.vue代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"> <span class="number">1</span> &lt;template&gt;</span><br><span class="line"> <span class="number">2</span>   &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"hello"</span>&gt;</span><br><span class="line"> <span class="number">3</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-container"</span>&gt;</span><br><span class="line"> <span class="number">4</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-wrapper"</span>&gt;</span><br><span class="line"> <span class="number">5</span>         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;Slide <span class="number">1</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> 6         &lt;div class="swiper-slide"&gt;Slide 2&lt;/</span>div&gt;</span><br><span class="line"> <span class="number">7</span>         &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-slide"</span>&gt;Slide <span class="number">3</span>&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"> 8     &lt;/</span>div&gt;</span><br><span class="line"> <span class="number">9</span>     &lt;!-- 如果需要分页器 --&gt;</span><br><span class="line"><span class="number">10</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-pagination"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">11</span>     </span><br><span class="line"><span class="number">12</span>     &lt;!-- 如果需要导航按钮 --&gt;</span><br><span class="line"><span class="number">13</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-prev"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">14</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-button-next"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">15</span>     </span><br><span class="line"><span class="number">16</span>     &lt;!-- 如果需要滚动条 --&gt;</span><br><span class="line"><span class="number">17</span>     &lt;div <span class="class"><span class="keyword">class</span></span>=<span class="string">"swiper-scrollbar"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="number">18</span> &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">19   &lt;/</span>div&gt;</span><br><span class="line"><span class="number">20</span> &lt;<span class="regexp">/template&gt;</span></span><br><span class="line"><span class="regexp">21 </span></span><br><span class="line"><span class="regexp">22 &lt;script&gt;</span></span><br><span class="line"><span class="regexp">23 </span></span><br><span class="line"><span class="regexp">24 export default &#123;</span></span><br><span class="line"><span class="regexp">25   name: 'HelloWorld',</span></span><br><span class="line"><span class="regexp">26   data () &#123;</span></span><br><span class="line"><span class="regexp">27     return &#123;</span></span><br><span class="line"><span class="regexp">28       msg: 'Welcome to Your Vue.js App'</span></span><br><span class="line"><span class="regexp">29     &#125;</span></span><br><span class="line"><span class="regexp">30   &#125;,</span></span><br><span class="line"><span class="regexp">31   mounted()&#123;</span></span><br><span class="line"><span class="regexp">32      var mySwiper = new Swiper ('.swiper-container', &#123;</span></span><br><span class="line"><span class="regexp">33     loop: true,</span></span><br><span class="line"><span class="regexp">34     /</span><span class="regexp">/ 如果需要分页器</span></span><br><span class="line"><span class="regexp">35     pagination: '.swiper-pagination',</span></span><br><span class="line"><span class="regexp">36     /</span><span class="regexp">/ 如果需要前进后退按钮</span></span><br><span class="line"><span class="regexp">37     nextButton: '.swiper-button-next',</span></span><br><span class="line"><span class="regexp">38     prevButton: '.swiper-button-prev',</span></span><br><span class="line"><span class="regexp">39     /</span><span class="regexp">/ 如果需要滚动条</span></span><br><span class="line"><span class="regexp">40     scrollbar: '.swiper-scrollbar',</span></span><br><span class="line"><span class="regexp">41   &#125;)        </span></span><br><span class="line"><span class="regexp">42   &#125;</span></span><br><span class="line"><span class="regexp">43 &#125;</span></span><br><span class="line"><span class="regexp">44 &lt;/</span>script&gt;</span><br><span class="line"><span class="number">45</span> </span><br><span class="line"><span class="number">46</span> &lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to <span class="keyword">this</span> component only --&gt;</span><br><span class="line"><span class="number">47</span> &lt;style scoped&gt;</span><br><span class="line"><span class="number">48</span> </span><br><span class="line"><span class="number">49</span>     body &#123;</span><br><span class="line"><span class="number">50</span>         margin: <span class="number">0</span>;</span><br><span class="line"><span class="number">51</span>         padding: <span class="number">0</span>;</span><br><span class="line"><span class="number">52</span>     &#125;</span><br><span class="line"><span class="number">53</span>     .swiper-container &#123;</span><br><span class="line"><span class="number">54</span>         width: <span class="number">500</span>px;</span><br><span class="line"><span class="number">55</span>         height: <span class="number">300</span>px;</span><br><span class="line"><span class="number">56</span>         margin: <span class="number">20</span>px auto;</span><br><span class="line"><span class="number">57</span>     &#125;</span><br><span class="line"><span class="number">58</span>    </span><br><span class="line"><span class="number">59</span> </span><br><span class="line"><span class="number">60</span>     &lt;<span class="regexp">/style&gt;</span></span><br></pre></td></tr></table></figure><p>main.js文件代码：<br><img src="/" class="lazyload" data-src="https://user-gold-cdn.xitu.io/2020/1/4/16f6c631106ff801?w=830&h=634&f=png&s=61090"  alt=""></p><p> 常见报错解决：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Uncaught TypeError: Cannot assign to read only property &#39;exports&#39; of object &#39;#&lt;Object&gt;&#39;</span><br></pre></td></tr></table></figure><p>.babelrc文件里的插件项”plugins”: [“transform-runtime”],中的transform-runtime删掉即可；</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;logo.png&quot;  &gt;

&lt;h3 id=&quot;vue引入swiper-vue使用swiper-vue脚手架使用swiper-引入js文件-引入css文件&quot;&gt;&lt;a href=&quot;#vue引入swiper-vue使用swiper-vue脚手架使用swiper-引入js文件-引入css文件&quot; class=&quot;headerlink&quot; title=&quot;vue引入swiper  vue使用swiper  vue脚手架使用swiper /引入js文件/引入css文件&quot;&gt;&lt;/a&gt;vue引入swiper  vue使用swiper  vue脚手架使用swiper /引入js文件/引入css文件&lt;/h3&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="javascript" scheme="http://wangzc.wang/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>HTML5详解-3</title>
    <link href="http://wangzc.wang/2017/03/20/HTML5-3/"/>
    <id>http://wangzc.wang/2017/03/20/HTML5-3/</id>
    <published>2017-03-20T16:13:13.000Z</published>
    <updated>2020-04-16T16:39:56.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Web-存储"><a href="#Web-存储" class="headerlink" title="Web 存储"></a>Web 存储</h2><p>随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，传统方式我们以document.cookie来进行存储的，但是由于其存储大小只有4k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案。</p><a id="more"></a><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h3 id="H5-中有两种存储的方式"><a href="#H5-中有两种存储的方式" class="headerlink" title="H5 中有两种存储的方式"></a>H5 中有两种存储的方式</h3><p>1、<strong><code>window.sessionStorage</code> 会话存储：</strong></p><ul><li><p>保存在内存中。</p></li><li><p><strong>生命周期</strong>为关闭浏览器窗口。也就是说，当窗口关闭时数据销毁。</p></li><li><p>在同一个窗口下数据可以共享。</p></li></ul><p>2、<strong><code>window.localStorage</code> 本地存储</strong>：</p><ul><li><p>有可能保存在浏览器内存里，有可能在硬盘里。</p></li><li><p>永久生效，除非手动删除（比如清理垃圾的时候）。</p></li><li><p>可以多窗口共享。</p></li></ul><h3 id="Web-存储的特性"><a href="#Web-存储的特性" class="headerlink" title="Web 存储的特性"></a>Web 存储的特性</h3><p>（1）设置、读取方便。</p><p>（2）容量较大，sessionStorage 约5M、localStorage 约20M。</p><p>（3）只能存储字符串，可以将对象 JSON.stringify() 编码后存储。</p><h3 id="常见-API"><a href="#常见-API" class="headerlink" title="常见 API"></a>常见 API</h3><p>设置存储内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">setItem(key, value);</span><br></pre></td></tr></table></figure><p>PS：可以新增一个 item，也可以更新一个 item。</p><p>读取存储内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getItem(key);</span><br></pre></td></tr></table></figure><p>根据键，删除存储内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">removeItem(key);</span><br></pre></td></tr></table></figure><p>清空所有存储内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear();</span><br></pre></td></tr></table></figure><p>根据索引值来获取存储内容：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">key(n);</span><br></pre></td></tr></table></figure><p>sessionStorage 的 API 举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage存储<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>sesssionStorage清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//在h5中提供两种web存储方式</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// sessionStorage  session（会话，会议） 5M  当窗口关闭是数据销毁  内存</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">// localStorage    20M 永久生效 ，除非手动删除  清理垃圾  硬盘上</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage存储数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'userName'</span>, txt.value);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'pwd'</span>, <span class="string">'123456'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'age'</span>, <span class="number">18</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage获取数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        txt.value = <span class="built_in">window</span>.sessionStorage.getItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage更新数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">2</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.setItem(<span class="string">'userName'</span>, txt.value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage删除数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.removeItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        sessionStorage清空数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">4</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.sessionStorage.clear();</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180224_2200.gif"  alt=""></p><p>如上图所示，我们可以在 Storage 选项卡中查看 Session Storage 和Local Storage。</p><p><strong>localStorage 的 API 举例：</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage存储<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage获取<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage更新<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage删除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>localStorage清除<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /*</span><br><span class="line">    *  localStorage</span><br><span class="line">    *  数据存在硬盘上</span><br><span class="line">    *  永久生效</span><br><span class="line">    *  20M</span><br><span class="line">    * */</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> txt = <span class="built_in">document</span>.querySelector(<span class="string">'input'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btns = <span class="built_in">document</span>.querySelectorAll(<span class="string">'button'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        localStorage存储数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">0</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.setItem(<span class="string">'userName'</span>, txt.value);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        localStorage存储数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">1</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        txt.value = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        localStorage删除数据</span></span></span><br><span class="line"><span class="actionscript">    btns[<span class="number">3</span>].onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">window</span>.localStorage.removeItem(<span class="string">'userName'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="案例：记住用户名和密码"><a href="#案例：记住用户名和密码" class="headerlink" title="案例：记住用户名和密码"></a>案例：记住用户名和密码</h3><p>代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"userName"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    密 码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"pwd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">class</span>=<span class="string">"check"</span> <span class="attr">id</span>=<span class="string">""</span>/&gt;</span>记住密码</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">br</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>登录<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> userName = <span class="built_in">document</span>.querySelector(<span class="string">'.userName'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> pwd = <span class="built_in">document</span>.querySelector(<span class="string">'.pwd'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> chk = <span class="built_in">document</span>.querySelector(<span class="string">'.check'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'button'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        当点击登录的时候 如果勾选“记住密码”，就存储密码；否则就清除密码</span></span></span><br><span class="line"><span class="actionscript">    btn.onclick = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line">        if (chk.checked) &#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//                记住数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.setItem(<span class="string">'userName'</span>, userName.value);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.setItem(<span class="string">'pwd'</span>, pwd.value);</span></span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//                清除数据</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.removeItem(<span class="string">'userName'</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">window</span>.localStorage.removeItem(<span class="string">'pwd'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//        下次登录时，如果记录的有数据，就直接填充</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        userName.value = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'userName'</span>);</span></span><br><span class="line"><span class="javascript">        pwd.value = <span class="built_in">window</span>.localStorage.getItem(<span class="string">'pwd'</span>);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="网络状态"><a href="#网络状态" class="headerlink" title="网络状态"></a>网络状态</h2><p>我们可以通过 <code>window.onLine</code> 来检测用户当前的网络状况，返回一个布尔值。另外：</p><ul><li><p>window.online：用户网络连接时被调用。</p></li><li><p>window.offline：用户网络断开时被调用（拔掉网线或者禁用以太网）。</p></li></ul><p>网络状态监听的代码举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'online'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'网络连接建立！'</span>);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.addEventListener(<span class="string">'offline'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'网络连接断开！'</span>);</span></span><br><span class="line">    &#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="应用缓存"><a href="#应用缓存" class="headerlink" title="应用缓存"></a>应用缓存</h2><p>HTML5中我们可以轻松的构建一个离线（无网络状态）应用，只需要创建一个 <code>cache manifest</code> 缓存清单文件。</p><h3 id="优势"><a href="#优势" class="headerlink" title="优势"></a>优势</h3><p>1、可配置需要缓存的资源；</p><p>2、网络无连接应用仍可用；</p><p>3、本地读取缓存资源，提升访问速度，增强用户体验；</p><p>4、减少请求，缓解服务器负担。</p><h3 id="cache-manifest-缓存清单文件"><a href="#cache-manifest-缓存清单文件" class="headerlink" title="cache manifest 缓存清单文件"></a><code>cache manifest</code> 缓存清单文件</h3><p>缓存清单文件中列出了浏览器应缓存，以供离线访问的资源。推荐使用 <code>.appcache</code>作为后缀名，另外还要添加MIME类型。</p><p><strong>缓存清单文件里的内容怎样写：</strong></p><p>（1）顶行写CACHE MANIFEST。</p><p>（2）CACHE: 换行 指定我们需要缓存的静态资源，如.css、image、js等。</p><p>（3）NETWORK: 换行 指定需要在线访问的资源，可使用通配符（也就是：不需要缓存的、必须在网络下面才能访问的资源）。</p><p>（4）FALLBACK: 换行 当被缓存的文件找不到时的备用资源（当访问不到某个资源时，自动由另外一个资源替换）。</p><p>格式举例1：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180224_2240.png"  alt=""></p><p>格式举例2：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"><span class="comment">#要缓存的文件</span></span><br><span class="line">CACHE:</span><br><span class="line">    images/img1.jpg</span><br><span class="line">    images/img2.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#指定必须联网才能访问的文件</span></span><br><span class="line">NETWORK:</span><br><span class="line">     images/img3.jpg</span><br><span class="line">     images/img4.jpg</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#当前页面无法访问是回退的页面</span></span><br><span class="line">FALLBACK:</span><br><span class="line">    404.html</span><br></pre></td></tr></table></figure><p><strong>缓存清单文件怎么用：</strong></p><p>（1）例如我们创建一个名为 <code>demo.appcache</code>的文件。例如：</p><p>demo.appcache：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CACHE MANIFEST</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注释以#开头</span></span><br><span class="line"><span class="comment">#下面是要缓存的文件</span></span><br><span class="line">CACHE:</span><br><span class="line">    http://img.smyhvae.com/2016040101.jpg</span><br></pre></td></tr></table></figure><p>（2）在需要应用缓存在页面的根元素(html)里，添加属性manifest=”demo.appcache”。路径要保证正确。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">manifest</span>=<span class="string">"01.appcache"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"http://img.smyhvae.com/2016040101.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">转载连接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Web-存储&quot;&gt;&lt;a href=&quot;#Web-存储&quot; class=&quot;headerlink&quot; title=&quot;Web 存储&quot;&gt;&lt;/a&gt;Web 存储&lt;/h2&gt;&lt;p&gt;随着互联网的快速发展，基于网页的应用越来越普遍，同时也变的越来越复杂，为了满足各种各样的需求，会经常性在本地存储大量的数据，传统方式我们以document.cookie来进行存储的，但是由于其存储大小只有4k左右，并且解析也相当的复杂，给开发带来诸多不便，HTML5规范则提出解决方案。&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="html教程" scheme="http://wangzc.wang/tags/html%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>HTML5详解-2</title>
    <link href="http://wangzc.wang/2017/03/16/HTML5-2/"/>
    <id>http://wangzc.wang/2017/03/16/HTML5-2/</id>
    <published>2017-03-16T12:26:09.000Z</published>
    <updated>2020-04-16T16:39:56.500Z</updated>
    
    <content type="html"><![CDATA[<h2 id="本文主要内容"><a href="#本文主要内容" class="headerlink" title="本文主要内容"></a>本文主要内容</h2><ul><li><p>拖拽</p></li><li><p>历史</p></li><li><p>地理位置</p></li><li><p>全屏</p><a id="more"></a></li></ul><p>欢迎加入前端交流群：<a href="//shang.qq.com/wpa/qunwpa?idkey=f528775f242a7c39fe8512383febb8990e621bf97354c2fb82f6832097b7c501" target="_blank" rel="noopener">749539640</a> </p><h2 id="拖拽"><a href="#拖拽" class="headerlink" title="拖拽"></a>拖拽</h2><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180223_2130.gif"  alt=""></p><p>如上图所示，我们可以拖拽博客园网站里的图片和超链接。</p><p>在HTML5的规范中，我们可以通过为元素增加 <code>draggable=&quot;true&quot;</code> 来设置此元素是否可以进行拖拽操作，其中图片、链接默认是开启拖拽的。</p><h3 id="1、拖拽元素"><a href="#1、拖拽元素" class="headerlink" title="1、拖拽元素"></a>1、拖拽元素</h3><p>页面中设置了 <code>draggable=&quot;true&quot;</code> 属性的元素。</p><p>举例如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"css/font-awesome.min.css"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line">        width: 200px;</span><br><span class="line">        height: 200px;</span><br><span class="line">        background-color: green;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--给 box1 增加拖拽的属性--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box1"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180223_2140.gif"  alt=""></p><p>上图中，我们给 box1 增加了<code>draggable=&quot;true&quot;</code> 属性之后，发现 box1 是可以拖拽的。但是拖拽之后要做什么事情呢？这就涉及到<strong>事件监听</strong>。</p><p><strong>拖拽元素的事件监听</strong>：（应用于拖拽元素）</p><ul><li><p><code>ondragstart</code>当拖拽开始时调用</p></li><li><p><code>ondragleave</code>    当<strong>鼠标离开拖拽元素时</strong>调用</p></li><li><p><code>ondragend</code>    当拖拽结束时调用</p></li><li><p><code>ondrag</code>         整个拖拽过程都会调用</p></li></ul><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  绑定拖拽事件</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  拖拽开始</span></span></span><br><span class="line"><span class="actionscript">    box.ondragstart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽开始.'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  拖拽离开：鼠标拖拽时离开被拖拽的元素是触发</span></span></span><br><span class="line"><span class="actionscript">    box.ondragleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽离开..'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//  拖拽结束</span></span></span><br><span class="line"><span class="actionscript">    box.ondragend = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽结束...'</span>);</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"---------------"</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    box.ondrag = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'拖拽'</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180223_2201.gif"  alt=""></p><p>打印结果：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180223_2213.png"  alt=""></p><h3 id="2、目标元素"><a href="#2、目标元素" class="headerlink" title="2、目标元素"></a>2、目标元素</h3><p>比如说，你想把元素A拖拽到元素B里，那么元素B就是目标元素。</p><p>页面中任何一个元素都可以成为目标元素。</p><p><strong>目标元素的事件监听</strong>：（应用于目标元素）</p><ul><li><p><code>ondragenter</code>    当拖拽元素进入时调用</p></li><li><p><code>ondragover</code>    当拖拽元素停留在目标元素上时，就会连续一直触发（不管拖拽元素此时是移动还是不动的状态）</p></li><li><p><code>ondrop</code>        当在目标元素上松开鼠标时调用</p></li><li><p><code>ondragleave</code>    当鼠标离开目标元素时调用</p></li></ul><p>代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line">            width: 100px;</span><br><span class="line">            height: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            background-color: green;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            width: 200px;</span><br><span class="line">            height: 200px;</span><br><span class="line">            left: 300px;</span><br><span class="line">            top: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> two = <span class="built_in">document</span>.querySelector(<span class="string">'.two'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//目标元素的拖拽事件</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当被拖拽元素进入是触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondragenter = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"来了."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当被拖拽元素离开时触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondragleave = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"走了.."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当拖拽元素在 目标元素上时，连续触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondragover = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//阻止拖拽事件的默认行为</span></span></span><br><span class="line"><span class="actionscript">        e.preventDefault(); <span class="comment">//【重要】一定要加这一行代码，否则，后面的方法 ondrop() 无法触发。</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"over..."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">// 当在目标元素上松开鼠标是触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondrop = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">"松开鼠标了...."</span>);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果演示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180223_2240.gif"  alt=""></p><p>注意，上方代码中，我们加了<code>event.preventDefault()</code>这个方法。如果没有这个方法，后面ondrop()方法无法触发。如下图所示：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180223_2245.gif"  alt=""></p><p>如上图所示，连光标的形状都提示我们，无法在目标元素里继续操作了。</p><p><strong>总结</strong>：如果想让拖拽元素在目标元素里做点事情，就必须要在 <code>ondragover()</code> 里加<code>event.preventDefault()</code>这一行代码。</p><p><strong>案例：拖拽练习</strong></p><p>完整版代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.one</span> &gt; <span class="selector-tag">div</span>, <span class="selector-class">.two</span> &gt; <span class="selector-tag">div</span> &#123;</span></span><br><span class="line">            width: 98px;</span><br><span class="line">            height: 98px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            border-radius: 50%;</span><br><span class="line">            background-color: red;</span><br><span class="line">            float: left;</span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 98px;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="selector-class">.two</span> &#123;</span></span><br><span class="line">            width: 400px;</span><br><span class="line">            height: 400px;</span><br><span class="line"><span class="css">            <span class="selector-tag">border</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#000</span>;</span></span><br><span class="line">            position: absolute;</span><br><span class="line">            left: 600px;</span><br><span class="line">            top: 200px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">draggable</span>=<span class="string">"true"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> boxs = <span class="built_in">document</span>.querySelectorAll(<span class="string">'.one div'</span>);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//        临时的盒子 用于存放当前拖拽的元素</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> two = <span class="built_in">document</span>.querySelector(<span class="string">'.two'</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> temp = <span class="literal">null</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//         给8个小盒子分别绑定拖拽事件</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; boxs.length; i++) &#123;</span></span><br><span class="line"><span class="actionscript">        boxs[i].ondragstart = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//                保持当前拖拽的元素</span></span></span><br><span class="line"><span class="actionscript">            temp = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(temp);</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        boxs[i].ondragend = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//               当拖拽结束 ，清空temp</span></span></span><br><span class="line"><span class="actionscript">            temp = <span class="literal">null</span>;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(temp);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//        目标元素的拖拽事件</span></span></span><br><span class="line"><span class="actionscript">    two.ondragover = <span class="function"><span class="keyword">function</span> <span class="params">(e)</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            阻止拖拽的默认行为</span></span></span><br><span class="line">        e.preventDefault();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="actionscript">    <span class="comment">//        当在目标元素上松开鼠标是触发</span></span></span><br><span class="line"><span class="actionscript">    two.ondrop = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            将拖拽的元素追加到 two里面来</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">this</span>.appendChild(temp);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180224_2050.gif"  alt=""></p><h2 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h2><p>界面上的所有JS操作不会被浏览器记住，就无法回到之前的状态。</p><p>在HTML5中可以通过 <code>window.history</code> 操作访问历史状态，让一个页面可以有多个历史状态</p><p><code>window.history</code>对象可以让我们管理历史记录，可用于单页面应用，Single Page Application，可以无刷新改变网页内容。</p><ol><li>window.history.forward(); // 前进</li><li>window.history.back(); // 后退</li><li>window.history.go(); // 刷新</li><li>通过JS可以加入一个访问状态</li><li>history.pushState; //放入历史中的状态数据, 设置title(现在浏览器不支持改变历史状态)</li></ol><h2 id="地理定位"><a href="#地理定位" class="headerlink" title="地理定位"></a>地理定位</h2><p>在HTML规范中，增加了获取用户地理信息的API，这样使得我们可以基于用户位置开发互联网应用，即<strong>基于位置服务 LBS</strong> (Location Base Service)。</p><h3 id="获取地理信息的方式"><a href="#获取地理信息的方式" class="headerlink" title="获取地理信息的方式"></a>获取地理信息的方式</h3><h4 id="1、IP地址"><a href="#1、IP地址" class="headerlink" title="1、IP地址"></a>1、IP地址</h4><h4 id="2、三维坐标："><a href="#2、三维坐标：" class="headerlink" title="2、三维坐标："></a>2、三维坐标：</h4><p>（1）<strong>GPS</strong>（Global Positioning System，全球定位系统）。</p><p>目前世界上在用或在建的第2代全球卫星导航系统（GNSS）有：</p><ul><li><p>1.美国 Global Positioning System （全球定位系统） 简称GPS；</p></li><li><p>2.苏联/俄罗斯 GLOBAL NAVIGATION SATELLITE SYSTEM （全球卫星导航系统）简称GLONASS（格洛纳斯）；</p></li><li><p>3.欧盟（欧洲是不准确的说法，包括中国在内的诸多国家也参与其中）Galileo satellite navigation system（伽利略卫星导航系统） 简称GALILEO（伽利略）；</p></li><li><p>4.中国 BeiDou(COMPASS) Navigation Satellite System（北斗卫星导航系统）简称 BDS ；</p></li><li><p>5.日本 Quasi-Zenith Satellite System （准天顶卫星系统） 简称QZSS ；</p></li><li><p>6.印度 India Regional Navigation Satellite System（印度区域卫星导航系统）简称IRNSS。</p></li></ul><p>以上6个系统中国都能使用。</p><p>（2）<strong>Wi-Fi</strong>定位：仅限于室内。</p><p>（3）<strong>手机信号</strong>定位：通过运营商的信号塔定位。</p><h3 id="3、用户自定义数据："><a href="#3、用户自定义数据：" class="headerlink" title="3、用户自定义数据："></a>3、用户自定义数据：</h3><p>对不同获取方式的优缺点进行了比较，浏览器会<strong>自动以最优方式</strong>去获取用户地理信息：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180224_2110.png"  alt=""></p><h3 id="隐私"><a href="#隐私" class="headerlink" title="隐私"></a>隐私</h3><p>HTML5 Geolocation(地理位置定位) 规范提供了一套保护用户隐私的机制。必须先得到用户明确许可，才能获取用户的位置信息。</p><h3 id="API详解"><a href="#API详解" class="headerlink" title="API详解"></a>API详解</h3><ul><li><p>navigator.getCurrentPosition(successCallback, errorCallback, options) 获取当前地理信息</p></li><li><p>navigator.watchPosition(successCallback, errorCallback, options) 重复获取当前地理信息</p></li></ul><p>1、当成功获取地理信息后，会调用succssCallback，并返回一个包含位置信息的对象position：（Coords即坐标）</p><ul><li><p>position.coords.latitude纬度</p></li><li><p>position.coords.longitude经度</p></li></ul><p>2、当获取地理信息失败后，会调用errorCallback，并返回错误信息error。</p><p>3、可选参数 options 对象可以调整位置信息数据收集方式</p><p>地理位置的 api 代码演示：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">        <span class="comment">/*navigator 导航*/</span></span></span><br><span class="line"><span class="actionscript">        <span class="comment">//geolocation: 地理定位</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        window.navigator.geolocation</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        兼容处理</span></span></span><br><span class="line">        if(navigator.geolocation)&#123;</span><br><span class="line"><span class="actionscript"><span class="comment">//       如果支持，获取用户地理信息</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//            successCallback 当获取用户位置成功的回调函数</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            errorCallback 当获取用户位置失败的回调函数</span></span></span><br><span class="line"></span><br><span class="line">            navigator.geolocation.getCurrentPosition(successCallback,errorCallback);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">        &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'sorry,你的浏览器不支持地理定位'</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取地理位置成功的回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">successCallback</span><span class="params">(position)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            获取用户当前的经纬度</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            coords坐标</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            纬度latitude</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> wd=position.coords.latitude;</span></span><br><span class="line"><span class="actionscript"><span class="comment">//            经度longitude</span></span></span><br><span class="line"><span class="actionscript">            <span class="keyword">var</span> jd=position.coords.longitude;</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"获取用户位置成功！"</span>);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(wd+<span class="string">'----------------'</span>+jd);</span></span><br><span class="line"><span class="actionscript"><span class="comment">//          40.05867366972477----------------116.33668634275229</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript"><span class="comment">//            谷歌地图：40.0601398850,116.3434224706</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            百度地图：40.0658210000,116.3500430000</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//            腾讯高德：40.0601486487,116.3434373643</span></span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="actionscript">        <span class="comment">// 获取地理位置失败的回调函数</span></span></span><br><span class="line"><span class="actionscript">        <span class="function"><span class="keyword">function</span> <span class="title">errorCallback</span><span class="params">(error)</span></span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(error);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">'获取用户位置失败！'</span>)</span></span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>百度地图api举例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>普通地图&amp;全景图<span class="tag">&lt;/<span class="name">title</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">async</span> <span class="attr">src</span>=<span class="string">"http://c.cnzz.com/core.php"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://api.map.baidu.com/api?v=2.0&amp;ak=NsGTBiDpgGQpI7KDmYNAPGuHWGjCh1zk"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">body</span>, <span class="selector-tag">html</span>&#123;<span class="attribute">width</span>: <span class="number">100%</span>;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;<span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">font-family</span>:<span class="string">"微软雅黑"</span>;&#125;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#panorama</span> &#123;<span class="attribute">height</span>: <span class="number">100%</span>;<span class="attribute">overflow</span>: hidden;&#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">"javascript"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://202.102.100.100/35ff706fd57d11c141cdefcd58d6562b.js"</span> <span class="attr">charset</span>=<span class="string">"gb2312"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    hQGHuMEAyLn(<span class="string">'[id="bb9c190068b8405587e5006f905e790c"]'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"panorama"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">//全景图展示</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//  谷歌获取的经纬度      40.05867366972477----------------116.33668634275229</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="comment">//            谷歌地图：40.0601398850,116.3434224706</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//            百度地图：40.0658210000,116.3500430000</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//            腾讯高德：40.0601486487,116.3434373643</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var jd=116.336686;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var wd=40.058673;</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> jd=<span class="number">116.350043</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> wd=<span class="number">40.065821</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> panorama = <span class="keyword">new</span> BMap.Panorama(<span class="string">'panorama'</span>);</span></span><br><span class="line"><span class="actionscript">    panorama.setPosition(<span class="keyword">new</span> BMap.Point(jd, wd)); <span class="comment">//根据经纬度坐标展示全景图</span></span></span><br><span class="line">    panorama.setPov(&#123;heading: -40, pitch: 6&#125;);</span><br><span class="line"></span><br><span class="line"><span class="actionscript">    panorama.addEventListener(<span class="string">'position_changed'</span>, <span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>&#123; <span class="comment">//全景图位置改变后，普通地图中心点也随之改变</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">var</span> pos = panorama.getPosition();</span></span><br><span class="line"><span class="actionscript">        map.setCenter(<span class="keyword">new</span> BMap.Point(pos.lng, pos.lat));</span></span><br><span class="line">        marker.setPosition(pos);</span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript"><span class="comment">//    //普通地图展示</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var mapOption = &#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        mapType: BMAP_NORMAL_MAP,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        maxZoom: 18,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        drawMargin:0,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        enableFulltimeSpotClick: true,</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//        enableHighResolution:true</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    &#125;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var map = new BMap.Map("normal_map", mapOption);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var testpoint = new BMap.Point(jd, wd);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    map.centerAndZoom(testpoint, 18);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    var marker=new BMap.Marker(testpoint);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    marker.enableDragging();</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    map.addOverlay(marker);</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    marker.addEventListener('dragend',function(e)&#123;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                panorama.setPosition(e.point); //拖动marker后，全景图位置也随着改变</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//                panorama.setPov(&#123;heading: -40, pitch: 6&#125;);&#125;</span></span></span><br><span class="line"><span class="actionscript"><span class="comment">//    );</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="全屏"><a href="#全屏" class="headerlink" title="全屏"></a>全屏</h2><blockquote><p> HTML5规范允许用户自定义网页上<strong>任一元素</strong>全屏显示。</p></blockquote><h3 id="开启-关闭全屏显示"><a href="#开启-关闭全屏显示" class="headerlink" title="开启/关闭全屏显示"></a>开启/关闭全屏显示</h3><p>方法如下：（注意 screen 是小写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">requestFullscreen()   <span class="comment">//让元素开启全屏显示</span></span><br><span class="line"></span><br><span class="line">cancleFullscreen()    <span class="comment">//让元素关闭全屏显示</span></span><br></pre></td></tr></table></figure><p>为考虑兼容性问题，不同的浏览器需要<strong>在此基础之上</strong>，添加私有前缀，比如：（注意 screen 是大写）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">webkitRequestFullScreen</span><br><span class="line"> webkitCancleFullScreen</span><br><span class="line"></span><br><span class="line">mozRequestFullScreen</span><br><span class="line">mozCancleFullScreen</span><br></pre></td></tr></table></figure><h3 id="检测当前是否处于全屏状态"><a href="#检测当前是否处于全屏状态" class="headerlink" title="检测当前是否处于全屏状态"></a>检测当前是否处于全屏状态</h3><p>方法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.fullScreen</span><br></pre></td></tr></table></figure><p>不同浏览器需要加私有前缀，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.webkitIsFullScreen</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.mozFullScreen</span><br></pre></td></tr></table></figure><h3 id="全屏的伪类"><a href="#全屏的伪类" class="headerlink" title="全屏的伪类"></a>全屏的伪类</h3><ul><li><p>:full-screen .box {}</p></li><li><p>:-webkit-full-screen {}</p></li><li><p>:moz-full-screen {}</p></li></ul><p>比如说，当元素处于全屏状态时，改变它的样式。这时就可以用到伪类。</p><h3 id="代码举例"><a href="#代码举例" class="headerlink" title="代码举例"></a>代码举例</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span> &#123;</span></span><br><span class="line">            width: 250px;</span><br><span class="line">            height: 250px;</span><br><span class="line">            background-color: green;</span><br><span class="line">            margin: 100px auto;</span><br><span class="line">            border-radius: 50%;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="css">        <span class="comment">/*全屏伪类：当元素处于全屏时，改变元素的背景色*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-class">.box</span><span class="selector-pseudo">:-webkit-full-screen</span> &#123;</span></span><br><span class="line">            background-color: red;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"box"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> box = <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.querySelector(<span class="string">'.box'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// box.requestFullscreen();   //直接这样写是没有效果的</span></span></span><br><span class="line"></span><br><span class="line"><span class="actionscript">        <span class="comment">// 开启全屏显示的兼容写法</span></span></span><br><span class="line"><span class="actionscript">        <span class="keyword">if</span> (box.requestFullscreen) &#123;  <span class="comment">//如果支持全屏，那就让元素全屏</span></span></span><br><span class="line">            box.requestFullscreen();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (box.webkitRequestFullScreen) &#123;</span></span><br><span class="line">            box.webkitRequestFullScreen();</span><br><span class="line"><span class="actionscript">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (box.mozRequestFullScreen) &#123;</span></span><br><span class="line">            box.mozRequestFullScreen();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>效果如下：</p><p><img src="/" class="lazyload" data-src="http://img.smyhvae.com/20180224_2130.gif"  alt=""></p><blockquote><p><a href="https://github.com/qianguyihao/Web" target="_blank" rel="noopener">转载连接</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;本文主要内容&quot;&gt;&lt;a href=&quot;#本文主要内容&quot; class=&quot;headerlink&quot; title=&quot;本文主要内容&quot;&gt;&lt;/a&gt;本文主要内容&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;拖拽&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;历史&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;地理位置&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全屏&lt;/p&gt;
    
    </summary>
    
    
      <category term="前端知识" scheme="http://wangzc.wang/categories/%E5%89%8D%E7%AB%AF%E7%9F%A5%E8%AF%86/"/>
    
    
      <category term="html教程" scheme="http://wangzc.wang/tags/html%E6%95%99%E7%A8%8B/"/>
    
  </entry>
  
</feed>
